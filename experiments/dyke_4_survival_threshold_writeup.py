import random
import os
import shelve
import time
from multiprocessing import Process, Pool
import numpy as np
import time
from matplotlib.gridspec import GridSpec

import sys
import random
import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from scipy import optimize
from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm
import matplotlib.gridspec as gridspec
#from numba import jit
plt.rcParams["font.family"] = "Times New Roman"


# Generating ALL Parameters
SAMPLE_SIZE = 1
SAMPLE_STEP = 1
RUN_ID = int(time.time())

SPECIES_K   = 100                  # ----------- Number of Biotic Components
RANGE_R     = 100                  # ----------- Essential Range
TIME_START  = 0                     # ----------- Start of Simulation
TIME_END    = 200                   # ----------- Length of Simulation
TIME_STEP   = 1                   # ----------- Time Step3
ENV_VARS    = 1                     # ----------- Number of Environment Variables
NICHE = 5                           # ----------- Niche Size
LOCAL_SIZE  = 50                    # ----------- Local Population Size (%)
ALIVE_THRESHOLD = 0
ENV_START=[10]
omega = [[random.uniform(-1, 1) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]
mu = [[random.uniform(0, RANGE_R) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]

number_alive_global_start = 0
number_alive_start = 0

system_state = np.zeros(SPECIES_K+ENV_VARS)

Eg = ENV_START[0]

for s_i in range(SPECIES_K):

    a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))

    if a_star < ALIVE_THRESHOLD:
        a_star = 0

    system_state[s_i] = a_star

    if a_star >= ALIVE_THRESHOLD:
        number_alive_global_start +=1


number_alive_start = number_alive_global_start

# Environment Init
for _ in range(ENV_VARS):
    system_state[SPECIES_K+_] = ENV_START[_]

def rates_of_change_system_state(system_state):

    # Environment Vars Change >>> Abundance >>> Biotic Force Changes >>> Environment Vars Change\
    # Alphas_IN determine E_OUT via biotic Force
    # E_IN determine Alphas_OUT via Gaussian

    rate_of_change = system_state.copy()

    Eg = system_state[SPECIES_K+0]

    for s_i in range(SPECIES_K):

        a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))

        if a_star < ALIVE_THRESHOLD:
            a_star = 0

        rate_of_change[s_i] =  a_star - system_state[s_i]


        #da/dt = a* - a
    biotic_force_FG = 0

    for s_i in range(SPECIES_K):
        # Global
        biotic_force_FG += (system_state[s_i] * omega[0][s_i])

    rate_of_change[SPECIES_K+0] = (biotic_force_FG)

    #dE/dt = E* + F

    return(rate_of_change)



def plot_alphas():

    #temperatures = []
    #biotic_force = [[] for _ in range(SPECIES_K)]
    #step = 0.01

    #for x in np.arange (-50, RANGE_R+50, step):
    #    temperatures.append(x)

    #for y in range(SPECIES_K):
    #    for x in np.arange (-50, RANGE_R+50, step):
    #        biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])
    #        #biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))##

    #plt.figure(figsize=(30,30))
    #plt.title('Biotic Force for 100 species in the ST Model', fontsize=30)
    #plt.xlabel('Temperature', fontsize=20)
    #plt.ylabel('Biotic Force', fontsize=20)
    #plt.xticks(fontsize=20)
    #plt.yticks(fontsize=20)
    #for _ in range(SPECIES_K):
    #    plt.plot(temperatures,biotic_force[_])

    #plt.plot(temperatures,np.sum((np.array(biotic_force, dtype=float)), axis=0), lw=4)

    print("one")
    #plt.show()

truncation = 0.2


def plot_alphas_truncated():


    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])
            #biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))


    ji_sum_total = 0
    ji_sum = [[] for _ in range(SPECIES_K)]
    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            ji_sum[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
        ji_sum_total+=sum(ji_sum[y])


    plt.figure(figsize=(20,20), dpi=300)
    #plt.title('Biotic Force for 100 species in the JI Model', fontsize=30)
    plt.xlabel('Temperature', fontsize=30)
    plt.ylabel('Biotic Force', fontsize=30)
    plt.xticks(fontsize=25)
    plt.yticks(fontsize=25)
    for _ in range(SPECIES_K):
        plt.plot(temperatures,biotic_force[_])

    plt.plot(temperatures,np.sum((np.array(biotic_force, dtype=float)), axis=0), lw=4, label='Combined Biotic Force')
    plt.legend(prop={'size': 30})
    plt.tight_layout()
    plt.show()

    temperatures = []
    alive_value = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                alive_value[y].append(0)
            else:
                alive_value[y].append(aliveness * omega[0][y])


    plt.figure(figsize=(20,20), dpi=300)
    #plt.title('Biotic Force for 100 species in the ST Model', fontsize=30)
    plt.xlabel('Temperature', fontsize=30)
    plt.ylabel('Biotic Force', fontsize=30)
    plt.xticks(fontsize=25)
    plt.yticks(fontsize=25)
    for _ in range(SPECIES_K):
        plt.plot(temperatures,alive_value[_])

    plt.plot(temperatures,np.sum((np.array(alive_value, dtype=float)), axis=0), lw=4, label='Combined Biotic Force')
    plt.legend(prop={'size': 30})
    plt.tight_layout()
    plt.show()

    st_sum_total = 0
    st_sum = [[] for _ in range(SPECIES_K)]

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                st_sum[y].append(0)
            else:
                st_sum[y].append(aliveness)
        st_sum_total += sum(st_sum[y])

    print("Sum Abundance JI : ")
    print(ji_sum_total)
    print("Sum Abundance ST : ")
    print(st_sum_total)

def plot_temps():

    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))

    alive_value = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                alive_value[y].append(0)
            else:
                alive_value[y].append(aliveness)

    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))
    #fig.suptitle('Abundance for 20 species', fontsize=30)
    #fig.set_size_inches(3, 1.5)
    for _ in range(SPECIES_K-80):
        ax1.plot(temperatures,biotic_force[_])
    ax1.set_title('JI Model', fontsize=35)
    ax1.set_xlabel('Temperature', fontsize=30)
    ax1.set_ylabel('Abundance', fontsize=30)
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(23)
    for _ in range(SPECIES_K-80):
        ax2.plot(temperatures,alive_value[_])
    ax2.set_title('ST Model', fontsize=35)
    ax2.set_xlabel('Temperature', fontsize=30)
    ax2.set_ylabel('Abundance', fontsize=30)
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(23)
    fig.tight_layout()
    fig.show()





###################### ROOTS ########################################################
###################### ROOTS ########################################################


def f1(x):
    #return((x**3) + (2*(x**2)) - (2*x) - 5)
    #return(x**2 -1000)
    biotic_force = []
    for y in range(SPECIES_K):
        biotic_force.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])

    return(np.sum((np.array(biotic_force, dtype=float))))


    #print(xi," ",y[-1])

#TypeError: fsolve: there is a mismatch between the input and output shape of the 'func' argument 'f1'.Shape should be (2,) but it is (1,).

def plot_function():
    print("Plotting Sum  ... ")
    plt.figure(figsize=(20,10))
    plt.title('xy', fontsize=40)
    plt.xlabel('x', fontsize=40)
    plt.ylabel('y', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.axvline(x=0)
    plt.axhline(y=0)

    plt.plot(x,y, 'r-',label = 'roots')
    plt.show()


def plot_stable_points():

    x = []
    y = []

    X1 = -50
    Y1 = RANGE_R + 50

    for xi in np.arange(X1, Y1, 0.1):
        x.append(xi)
        y.append(f1(xi))

    print("Solving Roots ...")
    true_zeros = []

    for _ in range(RANGE_R):
        sol = optimize.root(f1, [_], jac=False, method='hybr')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)


    #print("Solving ...")
    true_zeros = []
    sign_change = ""

    if(y[0] < 0):
        sign_change = "neg"
    if(y[0] > 0):
        sign_change = "pos"
    if(y[0] == 0):
        print("ZERO DETECTED")

    #print(sign_change)

    for _ in range(RANGE_R):
        sol = optimize.root(f1, [_], method='df-sane')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)



    plt.figure(figsize=(20,10))
    plt.title('Roots', fontsize=40)
    plt.xlabel('temperature', fontsize=40)
    plt.ylabel('biotic force', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    for stable in true_zeros:
        plt.axvline(x=stable)
    plt.axvline(x=0)
    plt.axhline(y=0)
    plt.plot(x,y, 'r-',label = 'biotic force')
    #plt.legend(loc=7, prop={'size': 30})
    plt.show()




#print(np.unique(np.array(true_zeros)))

###################### ROOTS ########################################################
###################### ROOTS ########################################################


###################### ROOTS ########################################################
###################### ROOTS ########################################################

# TRUNCATION


def f1_t(x):
    #return((x**3) + (2*(x**2)) - (2*x) - 5)
    #return(x**2 -1000)
    biotic_force = []
    for y in range(SPECIES_K):
        aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
        if(aliveness <= truncation and aliveness >= (-1 * truncation)):
            biotic_force.append(0 * omega[0][y])
        else:
            biotic_force.append(aliveness * omega[0][y])


        #biotic_force.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])

    return(np.sum((np.array(biotic_force, dtype=float))))


    #print(xi," ",y[-1])

#TypeError: fsolve: there is a mismatch between the input and output shape of the 'func' argument 'f1'.Shape should be (2,) but it is (1,).

def plot_function_t():
    print("Plotting Sum  ... ")
    plt.figure(figsize=(20,10))
    plt.title('xy', fontsize=40)
    plt.xlabel('x', fontsize=40)
    plt.ylabel('y', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.axvline(x=0)
    plt.axhline(y=0)

    plt.plot(x,y, 'r-',label = 'roots')
    plt.show()



def plot_stable_points_t():

    x = []
    y = []

    X1 = -50
    Y1 = RANGE_R + 50

    for xi in np.arange(X1, Y1, 0.1):
        x.append(xi)
        y.append(f1_t(xi))


    print("Solving Roots Truncated ...")
    true_zeros = []

    for _ in range(RANGE_R):
        sol = optimize.root(f1_t, [_], jac=False, method='hybr')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)


    #print("Solving ...")
    true_zeros = []
    sign_change = ""

    if(y[0] < 0):
        sign_change = "neg"
    if(y[0] > 0):
        sign_change = "pos"
    if(y[0] == 0):
        print("ZERO DETECTED")

    #print(sign_change)

    for _ in range(RANGE_R):
        sol = optimize.root(f1_t, [_], method='df-sane')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)

    plt.figure(figsize=(20,10))
    plt.title('Roots', fontsize=40)
    plt.xlabel('temperature', fontsize=40)
    plt.ylabel('biotic force', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    for stable in true_zeros:
        plt.axvline(x=stable)
    plt.axvline(x=0)
    plt.axhline(y=0)
    plt.plot(x,y, 'r-',label = 'biotic force')
    #plt.legend(loc=7, prop={'size': 30})
    plt.show()




#print(np.unique(np.array(true_zeros)))

###################### ROOTS ########################################################


def plot_gaussian():

    ideal_temp = 50
    temp = []
    gaus = []
    for each_temp in np.arange(0,100,0.01):
        temp.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        gaus.append(result)

    plt.figure(figsize=(20,10))
    plt.title('The Gaussian Distribution', fontsize=40)
    plt.xlabel('Environment Condition (temperature)', fontsize=40)
    plt.ylabel('Alive Value', fontsize=40)
    plt.plot(temp,gaus, 'r-',label = 'The gaussian distribution')
    plt.show()

    print(gaus)

def gaus(each_temp):
    ideal_temp = 50
    temp = []
    gaus = []

    result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))

    if(result >= ALIVE_THRESHOLD):
        return(result)
    else:
        return(0)


def plot_gaussian_trunk():


    ideal_temp = 50

    temp = []
    gaus = []

    for each_temp in np.arange(0,100,0.01):
        temp.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        gaus.append(result)

    #plt.figure(figsize=(20,10))
    #plt.title('The Gaussian Distribution', fontsize=40)
    #plt.xlabel('Environment Condition (temperature)', fontsize=40)
    #plt.ylabel('Alive Value', fontsize=40)
    #plt.plot(temp,gaus, 'r-',label = 'The gaussian distribution')
    #plt.show()

    #plt.figure(figsize=(20,10))
    #plt.title('The Truncated Gaussian Distribution', fontsize=40)
    #plt.xlabel('Environment Condition (temperature)', fontsize=40)
    #plt.ylabel('Alive Value', fontsize=40)


    temp_t = []
    gaus_t = []
    alive_thresh = 0.2
    for each_temp in np.arange(0,100,0.01):
        temp_t.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        if (result > alive_thresh):
            gaus_t.append(result)
        else:
            gaus_t.append(0)

    #plt.axhline(y=ALIVE_THRESHOLD, color='g', linestyle='--')
    #plt.plot(temp_t,gaus,_t 'b-',label = 'The gaussian distribution')
    #plt.show()


    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))
    #fig.suptitle('The survival threshold',fontsize=30)
    #fig.set_size_inches(3, 1.5)
    plt.xticks(fontsize=16)
    ax1.plot(temp, gaus)
    ax1.set_title('JI Model', fontsize=35)
    ax1.set_xlabel('Temperature', fontsize=30)
    ax1.set_ylabel('Abundance', fontsize=30)
    ax1.set_xticks(np.arange(0, 101, 10))
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(23)
    ax2.plot(temp_t, gaus_t)
    ax2.set_title('ST Model', fontsize=35)
    ax2.set_xlabel('Temperature', fontsize=30)
    ax2.set_ylabel('Abundance', fontsize=30)
    ax2.hlines(y=0.2, xmin=0, xmax=100, linewidth=2, color='r', label='survival threshold')
    ax2.set_xticks(np.arange(0, 101, 10))
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(23)
    ax2.legend(prop={'size': 20})
    fig.tight_layout()
    fig.show()



if __name__ == '__main__':


    omega = [[random.uniform(-1, 1) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]
    mu = [[random.uniform(0, RANGE_R) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]

    print(omega)
    print(mu)

    #omega = [[-0.362836570849985, -0.9751533256963574, -0.7806311701705064, 0.9712401951906029, 0.3601189895015, -0.8463957748871203, 0.6687595513091078, 0.3850864444677531, 0.23623715640233844, 0.7770246567811496, -0.6082320479110899, 0.3371962669180679, 0.021218524481845025, -0.5773287151837048, 0.7494684431916077, 0.19728301797317682, -0.007180996745234536, 0.5800952232713865, -0.0004523108498382111, -0.5151925306154208, -0.40482613620275587, -0.47447728892068985, 0.583171627000286, 0.7272081556600933, 0.9360432184393499, -0.9148017128717278, 0.9358285075053276, 0.6566252342863608, 0.629548918560314, 0.06921501886363846, -0.6758057948651681, -0.01648277122966668, 0.027322832760044324, -0.8940190741353611, -0.9328618414767416, -0.30063282766837496, 0.20385711690129704, 0.751448058467199, 0.8941736924345824, -0.23538094636769658, -0.600902190630872, 0.5923328481704753, -0.9564934481786012, -0.4845952161410354, -0.6737273478307972, 0.5370605922644622, 0.6506157294766874, 0.5168394182084011, -0.21010078424313283, 0.4756322513906752, -0.6240747206417832, 0.17471626526637318, -0.3945434271249735, -0.3715906711237198, -0.43831269648661464, -0.7586270685830965, 0.7243736634016329, 0.24965549496655215, 0.19715139535522774, 0.26882758604505064, -0.20376805135551468, -0.775539317522641, 0.7553479658314555, 0.5271582377193746, 0.6659242738461757, -0.863827483881149, 0.20377602309649445, -0.13961711310735114, 0.4867628643672548, -0.5820043404752249, 0.7407667033286176, 0.4741142444674482, -0.14198660540175578, 0.5583204886102213, 0.46513384450219775, -0.45654143246824175, -0.9926601622004776, 0.3856250927424334, -0.7141869104125227, -0.671929234393285, -0.8437974939301016, -0.22139566600763083, -0.005120810916961371, -0.022420381261600397, 0.6365935562307861, 0.8668141549424548, -0.5174482342428091, -0.43238041002920946, -0.8451699708389631, -0.011244360343528381, -0.600873336427062, -0.3184402418783625, -0.7144217102334249, 0.40492780033813847, 0.045206272595087915, 0.5887761275798455, 0.09935502217421344, -0.923487446172371, -0.4712123537795523, 0.03452172318761959]]
    #mu = [[61.76607978992045, 64.73789863147108, 87.3614248815592, 73.23755103200732, 5.849806274283886, 32.88643059653612, 23.149758189372825, 2.975888542259142, 27.713648598533158, 87.44097716302484, 25.835398836139255, 4.868523218493914, 64.75756069495542, 51.43178342773869, 56.02367559636844, 25.181609939511993, 5.282029145437683, 79.33377504471608, 37.45864800386152, 34.76975042098213, 79.31853968707657, 11.535741682798461, 4.177464876393067, 93.8150876124081, 38.07161621135716, 56.98196804049773, 15.871109077496614, 36.148138844305336, 88.03516110894591, 38.49851522907037, 46.525000317335696, 38.332486322424465, 89.33288987876352, 10.821566129489534, 74.47161274716642, 77.3453673944898, 62.52455461648175, 71.04591159921824, 78.76954118364198, 79.20702262754934, 90.59082230387028, 77.75582099074482, 35.27471088234903, 37.848964948058715, 58.976206732859595, 52.52155913810168, 88.54056373975862, 63.689287509997975, 96.59812863582148, 2.014097119076763, 63.48198513555137, 15.103381226065881, 86.24038994734701, 90.48248523646465, 77.44804683083339, 98.51028694893418, 44.02855257713654, 86.80591557784689, 15.97615562840703, 58.88514196159511, 68.88842397596792, 57.86756634900932, 35.749210376713414, 51.55070175106956, 89.49952906445685, 41.317737717407134, 74.86518264349925, 62.10811184560862, 60.204731169687584, 68.08911800198977, 70.3779630530077, 84.93770682994918, 36.89095795657015, 94.42517894926866, 9.164060067270551, 38.01284780386823, 12.659055619621585, 36.40463533478759, 67.366725461676, 73.50497078494436, 11.487125035165558, 3.930061007360308, 44.91659995379999, 39.709757598106876, 63.305563424690504, 32.8816249067564, 69.65539010242367, 62.498842700874555, 18.495642114815336, 11.996962128939126, 2.4725525228450618, 76.26035829724404, 47.92712125291315, 72.78341248267087, 79.55824721974977, 21.686496356408615, 32.31143153929889, 0.7710592903669045, 83.96597733223963, 64.16220705555432]]
    #5
    #omega = [[-0.362836570849985, -0.9751533256963574, -0.7806311701705064, 0.9712401951906029, 0.3601189895015, -0.8463957748871203, 0.6687595513091078, 0.3850864444677531, 0.23623715640233844, 0.7770246567811496, -0.6082320479110899, 0.3371962669180679, 0.021218524481845025, -0.5773287151837048, 0.7494684431916077, 0.19728301797317682, -0.007180996745234536, 0.5800952232713865, -0.0004523108498382111, -0.5151925306154208, -0.40482613620275587, -0.47447728892068985, 0.583171627000286, 0.7272081556600933, 0.9360432184393499, -0.9148017128717278, 0.9358285075053276, 0.6566252342863608, 0.629548918560314, 0.06921501886363846, -0.6758057948651681, -0.01648277122966668, 0.027322832760044324, -0.8940190741353611, -0.9328618414767416, -0.30063282766837496, 0.20385711690129704, 0.751448058467199, 0.8941736924345824, -0.23538094636769658, -0.600902190630872, 0.5923328481704753, -0.9564934481786012, -0.4845952161410354, -0.6737273478307972, 0.5370605922644622, 0.6506157294766874, 0.5168394182084011, -0.21010078424313283, 0.4756322513906752, -0.6240747206417832, 0.17471626526637318, -0.3945434271249735, -0.3715906711237198, -0.43831269648661464, -0.7586270685830965, 0.7243736634016329, 0.24965549496655215, 0.19715139535522774, 0.26882758604505064, -0.20376805135551468, -0.775539317522641, 0.7553479658314555, 0.5271582377193746, 0.6659242738461757, -0.863827483881149, 0.20377602309649445, -0.13961711310735114, 0.4867628643672548, -0.5820043404752249, 0.7407667033286176, 0.4741142444674482, -0.14198660540175578, 0.5583204886102213, 0.46513384450219775, -0.45654143246824175, -0.9926601622004776, 0.3856250927424334, -0.7141869104125227, -0.671929234393285, -0.8437974939301016, -0.22139566600763083, -0.005120810916961371, -0.022420381261600397, 0.6365935562307861, 0.8668141549424548, -0.5174482342428091, -0.43238041002920946, -0.8451699708389631, -0.011244360343528381, -0.600873336427062, -0.3184402418783625, -0.7144217102334249, 0.40492780033813847, 0.045206272595087915, 0.5887761275798455, 0.09935502217421344, -0.923487446172371, -0.4712123537795523, 0.03452172318761959]]
    #mu = [[61.76607978992045, 64.73789863147108, 87.3614248815592, 73.23755103200732, 5.849806274283886, 32.88643059653612, 23.149758189372825, 2.975888542259142, 27.713648598533158, 87.44097716302484, 25.835398836139255, 4.868523218493914, 64.75756069495542, 51.43178342773869, 56.02367559636844, 25.181609939511993, 5.282029145437683, 79.33377504471608, 37.45864800386152, 34.76975042098213, 79.31853968707657, 11.535741682798461, 4.177464876393067, 93.8150876124081, 38.07161621135716, 56.98196804049773, 15.871109077496614, 36.148138844305336, 88.03516110894591, 38.49851522907037, 46.525000317335696, 38.332486322424465, 89.33288987876352, 10.821566129489534, 74.47161274716642, 77.3453673944898, 62.52455461648175, 71.04591159921824, 78.76954118364198, 79.20702262754934, 90.59082230387028, 77.75582099074482, 35.27471088234903, 37.848964948058715, 58.976206732859595, 52.52155913810168, 88.54056373975862, 63.689287509997975, 96.59812863582148, 2.014097119076763, 63.48198513555137, 15.103381226065881, 86.24038994734701, 90.48248523646465, 77.44804683083339, 98.51028694893418, 44.02855257713654, 86.80591557784689, 15.97615562840703, 58.88514196159511, 68.88842397596792, 57.86756634900932, 35.749210376713414, 51.55070175106956, 89.49952906445685, 41.317737717407134, 74.86518264349925, 62.10811184560862, 60.204731169687584, 68.08911800198977, 70.3779630530077, 84.93770682994918, 36.89095795657015, 94.42517894926866, 9.164060067270551, 38.01284780386823, 12.659055619621585, 36.40463533478759, 67.366725461676, 73.50497078494436, 11.487125035165558, 3.930061007360308, 44.91659995379999, 39.709757598106876, 63.305563424690504, 32.8816249067564, 69.65539010242367, 62.498842700874555, 18.495642114815336, 11.996962128939126, 2.4725525228450618, 76.26035829724404, 47.92712125291315, 72.78341248267087, 79.55824721974977, 21.686496356408615, 32.31143153929889, 0.7710592903669045, 83.96597733223963, 64.16220705555432]]
    #10
    #omega = [[0.6299139040430586, -0.24954835404693054, -0.6555460819796104, 0.14618239626180762, 0.6768643822603426, -0.7852596214094743, -0.8965568690781378, -0.40477355781649704, -0.520443921754858, -0.6994068634825146, -0.46194826796748845, 0.5519583676156736, 0.870815948717053, -0.023866981836854206, 0.35571746866404585, 0.8872963569388206, -0.5108879345813602, 0.6088015214563631, 0.19151653348777442, 0.1783364542133632, 0.7320423651463444, -0.6338142933870945, 0.13346174486584128, -0.22135122990281264, -0.9807750696856632, -0.8439894722480521, 0.5198113755880487, -0.9295034386225678, 0.5371270766651772, -0.6430032786505187, 0.13654843677377348, -0.1343811287231278, -0.9407141451681209, 0.013643467007429688, -0.39141937266741933, 0.25099356868266764, 0.6791384833715743, 0.6466870957599793, 0.2987286289552449, 0.5190131594866496, -0.19399702681773312, 0.8935316172464247, 0.8359110350701917, -0.35130760157618646, -0.13655496434988157, 0.9323013386518908, -0.6013414090877378, 0.2824463705807969, 0.8103280307102554, 0.8302111530852307, -0.7173551109438057, -0.14730237337271102, -0.0015208337218928225, -0.9179330447900036, -0.424204965900836, 0.8135182681995159, 0.5628017459475303, -0.9770105273796781, 0.31364724298114344, 0.15704503690738147, 0.820482259282517, -0.6013098975947953, -0.7994369247412179, 0.4822151504075478, -0.36745870174770245, -0.24912239850774665, -0.8700192683318397, -0.4173202148394528, 0.22046333851918143, -0.5260277965634055, -0.823811550679963, -0.08154245288691819, -0.9059195121689443, 0.5555653839760726, 0.03982516123274449, -0.13658744259319722, 0.8851832564928466, -0.5932021622913075, 0.16660903347665457, 0.37774969342223663, -0.18626511029723614, -0.20091219434294105, 0.9649139682696548, -0.3723136889124645, 0.6197401220889325, -0.7500942717619852, -0.9856251265948222, 0.6141258184189755, -0.8928039838738187, -0.8975601287964607, -0.39661991836115096, -0.46733041834046385, -0.7874368843242983, -0.3963569289183908, 0.12079005951087152, -0.7811710351868364, -0.41000845716836065, 0.5520635621246446, -0.6732528374777607, -0.4802365773947337]]

    #omega = [[0.79986235823773, 0.6091010996979873, -0.20250200196664903, -0.8733980751992751, -0.027184493063225013, -0.37776680223675196, -0.8385360522954668, 0.11681912164708064, 0.13669634205535375, -0.16345880683481795, -0.6514159095753493, 0.602359959328014, -0.20238536190497336, -0.6832847892999749, 0.7371701951028902, 0.7006370500309731, -0.1291726776236808, -0.8692681161039084, -0.01138995750670535, 0.12267177117392047, -0.8617342152360354, -0.9315314166082891, 0.16533244909382283, 0.27206507008500136, -0.32420246616042414, 0.17751788177597727, 0.09785189169299335, 0.5823473250118218, 0.5658839336692008, 0.9071305965349254, 0.8483225488276764, 0.2677845161128678, -0.5364804270728953, -0.12467142573080192, -0.17580393975059705, 0.14158838525215667, -0.9994173053146553, -0.018202869499435614, 0.7464313855234763, -0.6622243933091259, -0.43212065086126383, -0.35289655092772265, 0.027653862694068554, 0.8583079752329001, -0.011429358896809072, -0.35104699292406294, -0.05810904540122519, -0.18795493575078415, -0.6576312555057435, 0.29567427555697123, 0.6003099716647493, -0.8877872119780978, -0.024264439245028857, 0.21371205961727058, -0.791305781941539, -0.8269615716983159, 0.32519736859390935, -0.23529523067672353, -0.8464897027131402, 0.28542470036580947, 0.12993482601462492, 0.2277040984283838, -0.5742605619951635, 0.21028450660074238, 0.5160167436191334, -0.5085116533645468, 0.6348912961258308, -0.009536131578756768, -0.01702970306789031, -0.2849499923075589, -0.8477032310882648, -0.571103164080492, 0.15521600114833123, -0.12437914053748811, -0.3439683947208083, 0.2465239318182939, -0.918813018104617, 0.16584516198818022, 0.025248413291998117, 0.2620624232357165, -0.7477576950075384, -0.891973038729962, -0.9339440952354723, 0.8617218506134927, -0.6613488106011702, -0.43950219849008, -0.20723868976972604, 0.6148951451218967, 0.17681288202009227, 0.7763497747996566, 0.5177069281137403, -0.7140044603736491, 0.7589955100339418, 0.8612697735047212, 0.5498770259429124, -0.275107500786141, -0.16957185937699615, -0.5522222993390276, -0.6030748780278545, -0.013269728472857123]]
    #mu = [[5.66769221409843, 43.23504909431952, 29.923614001698663, 91.56033019600483, 64.38923768153907, 7.443812943484507, 64.41570899610473, 11.165489028582476, 6.168463045166117, 66.00717278116004, 62.970020621268674, 80.33962882265993, 15.710475545136626, 77.78681173303431, 95.26277653630957, 97.58111053758593, 23.695355826320963, 48.81018891518878, 25.612460247674672, 95.386296020038, 22.03821526336981, 6.817679740293725, 8.77836955917447, 14.308217356997933, 69.3270796217085, 62.482347092936074, 51.657699375805855, 68.54194156655853, 37.20063611970431, 41.23871178744951, 67.00994219240994, 16.537781076050805, 87.42202033012086, 82.96949267196948, 68.07093286798647, 82.51209507115865, 8.518603051642193, 51.583977473137544, 36.75329897490298, 87.61826401673973, 76.53796211517636, 95.68928303339092, 34.457456628358116, 55.895154199132726, 43.72621148266004, 8.10231240279805, 11.918979213003977, 17.592580496385025, 95.53149540416007, 10.452406034640816, 17.043243690543186, 28.75724918595758, 19.95161522960167, 63.533638446518715, 33.70921499029114, 96.48242011482667, 12.192196947254963, 32.546684209771925, 98.5287452940411, 35.56726541581795, 58.213519262554804, 3.819965940748926, 43.72964305952895, 95.31314390623227, 82.99568502999806, 30.68475130421656, 20.71134892271389, 59.12006752168638, 70.48633470273796, 44.84032004210441, 60.37248329464091, 62.65489074926097, 27.927030145565325, 82.03076827209946, 52.849364409403265, 40.981467547479845, 94.18645346273755, 36.70100614447141, 97.44245261810967, 5.870690098055487, 40.66047301397062, 36.08389899512443, 28.307114842973558, 42.84296456192212, 86.2766473810414, 49.08878839966465, 97.45139826397417, 93.33136321320988, 77.3295413420423, 19.64609921424223, 1.9296118470522705, 64.63108368707599, 43.85115448553189, 96.54212341246176, 29.586704579782662, 99.15737098378136, 87.81441800175149, 64.46075820930336, 5.192639623265971, 57.67768256496794]]

    #omega = [[0.5796217241862403, 0.5431209959011487, 0.49533823307622327, -0.5617402779988123, 0.5571402680960764, 0.3254699857500707, 0.7775243984789961, -0.3515710618259038, -0.6312307890461735, -0.7834113448238107, 0.3600290867843423, -0.17098981641874267, -0.4729681812056916, -0.15030639140134627, 0.06956916171350702, -0.09497328557820062, -0.6236815420159689, -0.5313684186145737, 0.31029801183044525, -0.7489605228205627, -0.5855112244736522, -0.01658215791209683, 0.7707967417350081, 0.876086082980251, -0.26484359187719186, -0.2155682811802433, -0.4283515442964838, 0.3410767266697472, -0.23525016970465185, 0.012998277743992315, 0.34190477210935555, 0.5281243062998418, -0.28603411115718247, 0.24212335125594864, 0.6467380307159871, 0.43848365226833175, 0.9465327764468985, -0.22430323851617806, 0.34150454730273627, -0.6301461733635803, 0.5813095302885223, -0.04555594351563652, -0.704059072292762, 0.84324763456438, -0.8582732049230744, 0.18118419001095498, -0.5339127194020774, 0.4366408067180092, 0.2293500016782346, -0.4890764551712017, 0.529700560279728, -0.610568406862319, -0.6817432520942148, -0.28959162596740273, -0.7275841023164207, -0.41141175317235623, 0.665574345874568, 0.018372418096645804, 0.9588856511865973, 0.02582463835323856, -0.48998328394766477, -0.9180094639169039, 0.9202139397900071, 0.7279943850243649, -0.3269867988558688, 0.6706485496528622, -0.18937246624539306, -0.9637074794010636, -0.7976281193477133, 0.7456600499063224, -0.6767139277639416, -0.23941048527058006, -0.22075465806912065, 0.9972009018786683, 0.13238413027023244, 0.2959978074108871, 0.8273008400703399, -0.5078529188332712, 0.6979780997573077, 0.8219254128080102, 0.4285828512650811, 0.5384888336925222, 0.9728744543077479, 0.7227694884531783, -0.7362020649848011, -0.9595241614554799, 0.3182824578286707, -0.8112541780089335, 0.8300696085257198, 0.01836794046411483, 0.7393939933281908, 0.7389007692906102, -0.4779673418437249, 0.16789268362794862, -0.5500128846074639, -0.4101982123841239, 0.8367683159539685, 0.665133185176817, -0.6517830991769533, 0.9362474108020009]]
    #mu = [[20.130936635521223, 53.98015116166314, 44.3711908784139, 9.555382173649217, 98.90723454128494, 41.26923497044038, 81.74461826268306, 10.269652752642877, 46.85250650921989, 44.070755485884874, 97.98050928889775, 96.48639096175495, 86.09191796640772, 85.09825558846718, 83.91727149915525, 0.28787535367467143, 78.35641854533102, 60.21167521018659, 75.9598322902987, 14.4280348425762, 12.370212251647617, 59.789919792494686, 13.287584759606874, 5.196425167942231, 75.94779962476855, 46.33381724774759, 17.478800929686543, 77.20013367623054, 26.73741955812343, 88.42512079272345, 38.38918982931626, 14.270323036678423, 5.548821336257392, 81.26602948355506, 6.529131149531664, 48.362330359806826, 89.67289332145008, 94.02819840843671, 46.72928517086525, 10.382638950453094, 40.515123694474475, 41.98714906522502, 69.4767682553803, 21.44345057613878, 97.47130268232092, 67.49950233256378, 94.97330612363874, 98.66223309648852, 9.75809560751938, 4.73761217837152, 13.592244486966553, 57.733890127224505, 0.6616739123666449, 30.217479576783703, 9.313934900996978, 16.805866240907676, 51.22727774495361, 4.996024643256247, 89.34803938467803, 21.304636369759244, 28.44809787368775, 35.92374772001011, 92.364428955513, 4.575164085193217, 22.58843878625698, 94.63305261662546, 36.850952687056605, 46.11230452840126, 25.96628555756306, 17.109659898852804, 88.35076038678017, 13.333810179193438, 48.029605770173504, 2.020044162152934, 34.622676694556496, 72.83105209879062, 35.860863142225206, 16.859560269607577, 81.85557423943023, 98.31540845757958, 92.86402198265074, 90.35907374259831, 45.51761323522198, 51.11592701966452, 56.959129679846264, 36.74914755696162, 98.06239367147337, 31.526580307161666, 77.96729658812451, 66.70074703009291, 41.69242117226499, 30.57430596074996, 36.59130725161872, 63.549280495716665, 97.42464738149235, 19.288875292371877, 36.08077863172282, 16.057384517537578, 11.434748727397793, 92.29257772650232]]


    #omega=[[0.3810110826483708, 0.9009826553399982, -0.7021136377838828, -0.4151678331154671, 0.775476278229261, 0.16432181986964967, 0.8662077555543091, 0.19430170890073817, 0.9997053019952837, 0.6765417419772393, -0.26639932700257396, 0.5255056344609037, -0.3634372070233298, -0.017807188365179805, 0.8796412334689427, -0.9743350597778389, 0.24514749715084183, 0.4225839970565157, 0.8558890961559529, 0.7130439532088526, -0.48860421139750065, -0.8337300140208368, -0.8695335923191256, -0.8591209557243387, 0.2432169300373337, -0.5906851782360476, -0.09820309785672898, -0.840153098608458, 0.31744681532650687, -0.050625287514637574, -0.0867604619686555, -0.31373655028829583, -0.7414819422287753, -0.9200645870044166, -0.15921407640637786, -0.6535331609810451, 0.8500311884706628, -0.8934137290968902, -0.8837728990022968, 0.7165073587911264, 0.5181078942128616, 0.7166447425348164, -0.7187606944758771, -0.6669673046120956, 0.7451057886315584, -0.9936683355081315, -0.8732755506523904, 0.729966344857806, -0.4322622561452758, -0.66037035436518, -0.013338018128116857, 0.6429465802516772, -0.5227245671808283, 0.8930095003762453, 0.08071701447338642, 0.6686023619843313, 0.4152024643739447, 0.9758572374735266, 0.6020727655548015, 0.13699144051605594, 0.30974002290753844, -0.49369495598405844, -0.6112432317043881, -0.31658172417055064, -0.3604788973657227, 0.40394818417436773, -0.9706351313699613, -0.811855479919714, -0.6949076593823236, -0.7911743804849254, 0.28105110096359986, -0.8364620235785658, 0.7512382366399302, -0.25156478519475356, -0.2910131332780177, -0.07638453852461247, 0.3706105241796258, -0.8749309877912348, -0.5417455661944472, 0.42137430727027825, 0.8716522853196567, 0.9373988120403514, 0.5067957417852706, 0.5716377621307325, -0.24009337046713042, -0.9603159206550471, -0.6724034804546286, 0.6267021404738691, -0.9529234745406558, 0.7068874113033681, 0.8584232127641693, 0.6803496235432414, -0.5310799885436757, -0.045208795664029244, 0.858167412475104, 0.345725873329759, -0.6131217951162953, -0.19253073890627936, -0.72506197383874, -0.7380332331169335]]
    #mu=[[58.340261916774885, 2.3638209383980757, 62.523202763636235, 66.8692718846308, 30.135734591922247, 29.29694725970331, 81.93623629332943, 40.45928446972508, 52.63229649651178, 76.51891490530505, 14.766735430892119, 36.38707094826903, 95.86951950311733, 20.077739735850606, 63.01932851016144, 31.250797321791723, 73.53271875398562, 80.34073830322987, 10.37812777584307, 18.85684453739399, 17.593646468786204, 81.50861912875702, 28.928376701878978, 46.852921246302095, 84.43396181974182, 62.316973246869445, 17.073450441469728, 69.57847351285957, 77.69003284328711, 73.77226071149737, 29.3212843892918, 37.02136726623287, 15.705335879722536, 0.9182206788962088, 7.782095553646817, 92.46406269907426, 49.8936661966024, 87.60886555508995, 13.789619639512152, 54.54501919566241, 73.97571501335273, 89.08774699104373, 67.4085051655251, 75.59982907170836, 10.711194004459612, 26.657001163403994, 80.09519607489781, 14.906794048771388, 33.60951010481942, 29.869185145970157, 74.15836014397765, 42.40896101648109, 49.31233799106993, 88.82368670667698, 62.42713055638075, 80.74641190642802, 10.534036771112753, 76.03834079448457, 84.71516754154604, 7.937172850305563, 82.5575607795899, 68.91059099055065, 1.756466117639699, 27.864126232946084, 20.539468828382258, 12.73218511857095, 94.33861645598006, 63.47664795656128, 0.45989815121814104, 38.65902815754634, 8.482517540940893, 9.604703339023391, 49.379007071446324, 35.77698401392194, 34.846006161104384, 8.506586841692531, 96.7907500662216, 87.28567854972795, 54.60003847094483, 57.120767061736984, 46.99081314010899, 97.8686022683161, 63.065077690280724, 78.07114904541233, 64.13825354089767, 13.766419114393102, 51.236048134006104, 80.85547974881628, 73.62817908658958, 64.49345113028497, 18.143120631332554, 81.73521198435438, 45.96814479301641, 46.44669128137387, 42.53229399872166, 83.42219872881044, 13.15283038068198, 62.81965194236921, 93.83704428576841, 41.46351805417837]]

#[47]
#[1, 47]

    # Write Up OK
    #omega = [[-0.45570349442317326, 0.9926566784100075, 0.888549026699764, 0.14928544806368338, -0.9996264233158934, -0.4385610485834899, -0.08038541123391796, -0.6260150923250922, -0.47235424832183703, 0.08534830008829819, 0.04489977686157176, 0.20925429233908543, 0.33254542065489434, 0.0840048379259668, -0.49418449970563194, 0.436757577051496, -0.10442494952037817, -0.4757616053069522, 0.21271766647905, -0.6493074483217449, -0.8353341996437704, -0.2056676731969611, -0.219114871126884, 0.3482756179142581, -0.7028479623473687, 0.06655864395029609, -0.2594633634515553, 0.71109331879931, 0.2747045193340545, 0.6193474305138627, -0.25427585792748153, 0.42264649771697194, -0.7670619926343019, 0.5194338631557813, 0.2955475346559173, 0.8362123688943861, 0.6573922690996239, -0.33227139325065447, -0.0417269736591952, 0.7474335021368288, 0.9721065523838919, 0.34145394392500794, -0.30158871229552675, 0.6383367973778622, -0.9658834930955591, -0.07201988587528474, 0.9859256779205499, -0.6456751377980265, 0.34596559619769796, 0.008703893399207852, -0.07077698031747182, 0.3687349388787877, -0.2128586823583034, -0.428467812969906, -0.7612417665593616, -0.753888511973025, -0.5823855135630227, 0.34720762289370155, 0.5656944867519293, 0.8403768391236615, -0.7055015387194046, 0.9167024270609578, -0.8377405059080654, 0.613368151113215, -0.20085672743369987, 0.5324877735051026, -0.5404093098424378, -0.4793030314186506, 0.020783169315794492, -0.339350185930549, 0.6054281152160448, 0.28770596557012973, -0.401032234196933, 0.38382727022568774, -0.5413820483877667, 0.758547095228723, -0.6448441963556208, 0.6560350213385717, 0.3469446743002187, 0.8625593080945051, 0.4194108163826673, -0.6339503647551701, -0.5989127516874513, 0.16883352766822046, 0.7962033825685597, 0.9763587212634572, 0.5538388523357383, -0.7229295694774867, 0.24767934527856994, -0.19051494465833296, 0.9618596596970299, -0.07639280592577236, 0.022044509842797044, -0.013989791881396485, -0.3704962409196475, 0.2672261767286863, -0.1534276130207337, -0.08114108850993196, -0.6215005516241177, 0.6759542263992802]]
    #mu = [[83.28825637081572, 19.91571692627123, 61.32525135771586, 15.672902946681667, 99.60109311987452, 24.675327758157138, 45.49766334978646, 98.01411351486603, 14.926773747336696, 26.197887508113617, 8.33039624249391, 48.66276674465474, 79.20562919962092, 31.3412946690634, 60.07521156883806, 88.51314965235781, 59.22999584861787, 10.866822137513054, 7.721663134157419, 55.212466048042465, 45.4806246853774, 85.04379254402356, 33.36264522633044, 40.3056685546258, 72.26374861765332, 89.23388249659632, 33.23888478740763, 55.56364226912627, 86.46948848547017, 60.894453999422424, 39.75123975664799, 13.596967208002864, 87.05914161816646, 49.06723745022505, 85.85137654356825, 69.49385579935682, 81.51659630137934, 66.41766460075132, 82.32530462853556, 71.40294877458498, 53.41365933231239, 72.79787798021528, 72.72213208784406, 11.622320416792142, 32.79578605848111, 77.4230920723422, 64.79175868066488, 46.11347113918881, 1.6882881330386512, 58.18262186923574, 84.53715699657215, 23.175810167449985, 33.93955774606593, 50.58356189329606, 63.62625059556708, 83.48616763999951, 92.53057854280155, 28.37362873012099, 50.22611401493394, 77.27937911974684, 9.343607616123572, 17.509062939619447, 23.933792264286257, 70.66324965971809, 9.465150222878272, 9.559033167143072, 3.9341833747434496, 11.000779992185016, 63.463144118865344, 55.13443058649155, 12.19131735262431, 40.1999622829841, 91.65020017010718, 87.98928652554477, 46.736551603767076, 67.66704553087106, 93.81008320866786, 66.1536314996456, 94.51162741284558, 69.82403754406121, 91.09060303974191, 49.9136245636434, 47.25073606399731, 60.08221965203116, 48.83208415621863, 55.86184279261995, 86.70469872121117, 4.548397985062458, 20.116473823336456, 95.11452004637383, 4.671406311441073, 48.48827517728724, 12.674309717595822, 60.89359727652629, 72.51607861597465, 1.4544709343304874, 69.00210031096566, 23.63269453291944, 96.73703677466968, 89.73427847911927]]
    # Write Up Species non living
    #omega = [[0.0595222849143906, 0.3003556638110849, -0.43853644136819514, -0.695282516599482, -0.5995859733945523, 0.2959743594387121, -0.03746401044516823, -0.3585718486316478, -0.26220105725259213, -0.6232237164522079, -0.45809166678436775, 0.6897389494362713, -0.663882738866401, 0.831855648785639, -0.7206929113070564, -0.9176201528116177, -0.7932529637967538, -0.9269626385022456, -0.5198423080135093, 0.6658829017970367, 0.711797708457687, 0.9993310411952732, 0.13554568126464495, -0.5287409490890458, 0.2996514191047137, -0.15098432711913445, -0.20323926220302035, -0.6409282655188662, -0.14533312623692707, -0.8819964635511961, 0.557014131478885, -0.6944334624803776, 0.8581608044783273, 0.5581860699456351, 0.33110851360019167, -0.8247760455218418, -0.5039468147203927, -0.4119418549056286, -0.17371852948233868, -0.13054776420980452, 0.711747942920665, 0.6502937177046493, -0.13939815040883508, 0.9611347467277598, 0.8655428773595626, -0.7774933871852512, 0.03260070681450267, 0.6870551157594096, 0.8940186470272009, 0.5860010250251209, -0.2968195977831196, 0.8153623355013431, 0.19219337971302264, 0.6024256427095882, -0.5967560381120247, -0.9129649118830743, 0.9003901660109466, -0.1372340324820185, -0.30182787415476664, -0.7260499673734162, -0.8867075910679649, -0.960418889285408, 0.9154601437561836, -0.3247665890536431, 0.5137416845305747, 0.1289831530609893, 0.534735950674698, -0.8934286264787019, 0.3249828741964713, -0.5225840510880191, -0.5578989751397609, 0.2504393378359602, 0.39485508974790684, -0.16586566863168817, 0.22960309370603693, 0.344873868909783, 0.6574505471872147, 0.3019848844124946, -0.09594394433365117, -0.59081355497861, -0.5885626283144172, -0.9481745379753856, -0.6854095889931984, -0.12282379705191548, -0.9673426833709022, -0.9048768648028249, 0.5522384440998924, -0.9439198582351813, -0.17078297616890858, -0.4227161128470083, 0.1496361597528042, -0.714069195992513, 0.1725263028569166, 0.710614867599334, 0.057445908963330794, -0.8900311735965765, -0.31745350819846996, -0.3576985595201352, -0.8797620543588065, -0.24659234705534772]]
    #mu = [[98.14249657114175, 93.50743005017955, 31.49614515977803, 35.94306287930203, 78.52410519147895, 27.12435480711558, 11.191675263257817, 11.879450565883786, 57.40151414702391, 64.49178727460885, 50.06130276928437, 10.03366068029219, 68.66390560469871, 99.72492157948113, 51.83589705969883, 24.294250807626927, 1.5985197305016463, 49.89443967597504, 65.4078861642513, 16.54286158996228, 79.52318894053127, 65.6488922306538, 57.543623924329225, 58.13880498913869, 15.199596952687944, 39.037137398687506, 72.23318030000179, 9.208493175427112, 50.47863469097086, 54.412397096219486, 77.59953485462006, 11.791506373536908, 58.800016440113346, 39.633573018111804, 13.022552776615514, 65.33032714275957, 62.7304930664471, 93.69335475851345, 76.9316029070103, 23.751844479694583, 53.24238875885432, 18.026373631116332, 35.64624023592413, 63.8093480296008, 7.948173430207072, 18.744641078718715, 48.59861146446305, 42.468423337912256, 63.63679870799089, 23.968981688023405, 68.74811696101264, 30.738303668284097, 3.1570209069105792, 81.32782198735924, 27.473375457791292, 7.365116016793372, 16.858045389006115, 2.475678162551609, 70.48896998426709, 95.71603769815738, 57.52066503926626, 39.58172448773413, 42.67299975214055, 47.460659423128305, 28.78945549564722, 34.78914611759215, 39.43182997431817, 6.982199385717747, 24.815397496539184, 70.43024015917787, 97.50578199293041, 46.46531947800915, 96.50866654060607, 16.568752174956536, 65.33892564815079, 21.577844889426345, 62.84011421135914, 17.259359913225225, 17.311567999358335, 45.36882071029276, 40.41430550170271, 16.089558853995058, 14.00386664526485, 78.65426630089077, 12.384077118158764, 18.704558331117926, 53.87473877309129, 34.82916483038547, 33.24476753632385, 4.372778387566489, 50.380044625665455, 96.43887799494277, 17.33937390394875, 24.63349151696984, 18.73538255647699, 25.07444786179972, 4.402824743399803, 51.680646656342745, 21.685122871239415, 97.77580669339994]]

    #omega = [[0.7028809639906732, -0.1772091514037275, -0.5022750707740649, -0.1839283930101332, -0.573179687469179, -0.318523504945901, 0.30413821865327284, 0.04721478201458451, -0.49004990522995384, -0.9901353887100743, -0.9962422819697276, 0.5027542917212175, -0.9618118699262848, -0.7928917383683571, -0.02702868124579294, -0.9095725190225379, 0.9747470641928524, 0.6191234350155694, -0.29112650909255544, -0.5236332790394194, -0.6366900125530555, 0.35722759574639285, 0.43721823058853215, 0.9592746886641987, 0.5686812243625643, 0.9804585142478661, 0.2341045412148408, 0.46285386788226734, -0.5585416154902711, 0.01212751015140423, 0.12847071602438653, -0.6244511430766353, 0.9339738147957892, -0.8226807621014653, 0.7295867673012404, 0.17639755570437976, 0.22047086954709916, -0.15938402616898806, 0.43075611617477794, -0.2617269876194206, -0.15165831636015614, 0.07338445390080572, -0.9618530215141241, -0.395610115379051, 0.3812532804708937, -0.20232315808643153, -0.17874404398804766, 0.49894557215192314, -0.956674140516226, -0.8092590236053854, -0.6709311499649098, -0.16036194095401868, -0.5508806699696727, -0.1649714097078563, 0.7045636586948898, -0.027319879729604146, 0.4026253117955376, 0.1775493082266295, -0.5400964804660142, -0.8448081825019156, 0.5489389795162993, 0.49035250536380803, 0.8187037657352072, -0.8449921553712942, -0.12970787985505083, 0.41868472288954894, 0.3621661141351269, -0.3310855935884425, -0.33912679493185105, 0.14353678596739838, 0.036419948196754426, 0.1348853072105045, 0.831224313873234, 0.9462021869557455, 0.2300971511620058, 0.14430682431298547, -0.4958642004223879, -0.6233901784991154, 0.7278857400128496, 0.12978147103414406, 0.18889112034612054, -0.9094653448527845, -0.9866128923964586, -0.1245641678671805, 0.8351794046015812, -0.10549900467926943, -0.6288485413070777, 0.0741880417846632, -0.713221091784791, 0.9604831424854192, -0.06183853661747252, 0.4299576095696782, -0.19926841387633898, 0.10420359128516288, 0.174139571561849, 0.26640017952861106, -0.42445134222325653, 0.5032337097135968, 0.145851034601026, 0.8173483451584787]]
    #mu = [[80.74299233587666, 93.5378965976649, 10.442357422654913, 57.4125980415755, 2.6900318185959615, 65.0079767940026, 3.1695018824787424, 99.07943749361237, 95.14352033894653, 95.3905761345429, 2.827948072883979, 98.76260833009154, 54.07506651169696, 89.45656245312934, 91.88923397699847, 41.76025029034335, 56.414761402607795, 46.436050278977866, 37.496853793391615, 35.811655964306276, 26.597083761039908, 80.95536540531619, 27.55113886283106, 77.69687362612953, 75.31233676117589, 63.913588355893246, 48.96742338820174, 23.72110957687379, 1.1717537091021635, 94.15404577285385, 0.7124774563762704, 65.98862807638378, 10.252198776237897, 37.837795434272984, 9.567036513145366, 41.51553480332737, 55.23905906699075, 35.435591919211085, 87.28532523637601, 30.68815879561391, 82.29924868961325, 75.77277464255123, 58.673461463221365, 36.48404929286906, 95.3158199844202, 99.87398025953517, 25.948584989455924, 39.79944511813248, 74.49775141313818, 50.627714351469635, 2.597507513434638, 68.39765300086133, 29.689567783082282, 21.94470691531093, 37.27607963877093, 30.567639496176835, 87.78080687809955, 24.83682332506335, 81.94615990632207, 74.24416264528865, 98.47671255849522, 14.14010604180842, 45.20608600904534, 63.088617488257626, 0.20830008536402156, 23.519309768725417, 89.52238462644834, 33.34569235178243, 99.13524757044755, 40.14874380188807, 54.62058472134517, 60.691269576440654, 79.71185658177234, 99.96791311137756, 32.44832629319998, 72.71472996111216, 20.36904543494329, 32.12244788112546, 71.92141767195601, 89.7536131380911, 12.092164739612166, 31.922795916498792, 73.17438351571633, 27.76677217387672, 8.48164571815212, 91.78413911806793, 38.684544088115345, 70.66759051842355, 81.45904210444537, 38.394326951177796, 56.2409775252245, 98.4491321724531, 2.5136419711863645, 97.31579505804064, 37.20317381700997, 97.62229262211449, 46.37237645459788, 24.147839627295586, 15.552682683569419, 99.37017949594966]]

    #64
    #[[0.5862667247606381, 0.5012087713875462, 0.17291707610794393, 0.08407121611889368, 0.31368895135292907, -0.3915319746297119, 0.046412971983357476, 0.7603935430296367, -0.12597175047731612, 0.09017174576720066, -0.4701435785874788, 0.10306288449814427, 0.2812168019214336, 0.6318405613486344, 0.8027750956627369, 0.2430131423917692, 0.37323288496024465, -0.13373611547369402, -0.7321119637568902, 0.06981624774965445, 0.39775873746278934, 0.15379837907271376, 0.40338220064666297, 0.869491987424253, 0.2341019535639144, -0.6492282085012975, 0.7927658857121851, -0.9373124255485057, 0.8855573002781105, 0.9678720531265446, 0.271244453952765, 0.24479456344345807, 0.9447629295240632, 0.04792752205547868, -0.06993388738242001, -0.24103797630844803, -0.207191257162201, -0.5861778552085377, 0.5220839191634643, 0.7497218208432406, -0.295555280774908, 0.02913150138164977, 0.3681833038774489, -0.12534036183482566, -0.9397775908612305, 0.5082762112303394, -0.32415406550754033, 0.6175510451936412, 0.8297701494490592, 0.05952507191404943, -0.6962005355488277, -0.6698205452585857, 0.6479772081552064, -0.1444412050692141, 0.06259824139617143, -0.868208817543695, -0.6067093718902778, -0.68855059433151, 0.02355720151846441, 0.11317937496177621, 0.40918153781287026, -0.8237448240742091, -0.9694267468832767, 0.02914229707096605, 0.8665959395368752, 0.2729680580441345, -0.052931076381026454, -0.41160207584822106, 0.974497923297529, -0.4889918376693829, -0.003707386526937473, 0.5340986010680158, 0.49257367262019014, -0.6353907856153478, -0.941336897281918, -0.8624088463719943, 0.4034725028290804, -0.26211470718140784, -0.3129432455015193, -0.0029575805031563096, 0.9317960577357376, -0.3951593732891525, 0.20416580114283356, -0.9364169443809485, 0.922548371920717, 0.6958874812167899, 0.9640430478250133, 0.741857075051539, 0.5690926304571042, 0.18532551124828922, -0.29198209459055025, -0.24914692253497428, 0.6857688982717887, -0.5458729362592549, 0.8943472722138006, -0.219909939252394, -0.19162741799314809, 0.009127354716620628, 0.1678953618084169, -0.4896335336361579]]
    #[[77.85005528047579, 52.30198214666145, 59.735996564619, 84.97804399881423, 93.12483409848994, 21.71095484444896, 85.75910730988923, 83.14511633242745, 54.620485807786935, 28.470978031957948, 80.428854917545, 63.87004329649882, 92.74071593306465, 67.51875511217149, 89.20535651085088, 33.65441598921819, 41.524291152250925, 63.62988005316219, 40.12369147227487, 97.7025683412075, 6.725637106002857, 10.195436880846131, 35.572640529068686, 47.69206765479611, 10.400490323940915, 31.953170175844747, 11.512171783003755, 24.586874649983613, 21.67703038328852, 21.002609247326497, 7.630574891729902, 95.3314710269658, 21.934239145535017, 47.00118533229676, 85.97198365968161, 94.45949446016468, 70.41259472309125, 32.22541284827366, 39.40229949104905, 21.147391725724283, 52.82188987311155, 70.7274252371483, 71.1783834836266, 79.62249133544339, 83.64082900438916, 56.92442366322291, 68.10065606874848, 68.38201882419371, 43.34784988706005, 70.27399940472199, 24.455818836723743, 40.64896543042581, 7.123096911956262, 67.5265511054102, 81.32244863494013, 27.947917724208015, 58.01124932793107, 0.7087475042667157, 34.92832718562527, 69.6218970768002, 59.71391686115306, 18.4316785580805, 41.205830632431116, 54.44926808119851, 98.34348182867878, 39.70626430205423, 73.88834837013322, 49.820497601445325, 10.235230075354307, 80.24931760496806, 10.332263989547608, 40.49141205528749, 18.575968574595557, 76.77700721414946, 70.12595700794886, 79.28119757639077, 51.80404284909282, 71.79831899809253, 64.84799573090471, 18.959810061909245, 30.202121411503015, 69.87879583295974, 3.4394900969141884, 2.3017220947517125, 98.11188922063594, 60.159726503216426, 80.74459496211702, 3.9795688532441975, 50.00086499114595, 6.07845403472147, 33.526381391248336, 70.03924449488586, 82.99861925590537, 15.792302253879708, 39.24989576783883, 97.04532133044134, 93.81859443364105, 19.727513404645137, 15.467944420747237, 24.134227227278448]]



    ji_alives_at_start = [0 for _ in range(SPECIES_K)]
    ji_alives_at_end   = [0 for _ in range(SPECIES_K)]
    st_alives_at_start = [0 for _ in range(SPECIES_K)]
    st_alives_at_end   = [0 for _ in range(SPECIES_K)]

    system_state = np.zeros(SPECIES_K+ENV_VARS)

    Eg = ENV_START[0]
    #Eg = random.uniform(0, RANGE_R)

    for s_i in range(SPECIES_K):
        a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
        system_state[s_i] = a_star
        if(a_star > 0):
            ji_alives_at_start[s_i] = 1


    for _ in range(ENV_VARS):
        system_state[SPECIES_K+_] = ENV_START[_]

    ENV_VAR_ALIVE_ZERO_START = ENV_START[0]
    ENV_VAR_ALIVE_ONE_START = ENV_START[0]

    ALIVE_THRESHOLD=0
    results = [[] for _ in range(SPECIES_K+ENV_VARS)]
    times_steps=[]

    for step in np.arange(TIME_START, TIME_END, TIME_STEP):
        times_steps.append(step)
        for _ in range(SPECIES_K+ENV_VARS):
            results[_].append(system_state[_])
        k1 = TIME_STEP * rates_of_change_system_state(system_state)
        k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
        k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
        k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
        system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
    ENV_VAR_ALIVE_ZERO_END = system_state[SPECIES_K+0]
    results_nt = results

    #================
    #================
    #================
    #================
    #================
    plot_gaussian_trunk()
    plot_temps()
    ALIVE_THRESHOLD=0.2
    plot_alphas_truncated()
    #plot_stable_points()
    #plot_stable_points_t()


    results = [[] for _ in range(SPECIES_K+ENV_VARS)]
    times_steps=[]
    system_state = np.zeros(SPECIES_K+ENV_VARS)
    Eg = ENV_START[0]

    for s_i in range(SPECIES_K):
        a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
        if a_star < ALIVE_THRESHOLD:
            a_star = 0
        system_state[s_i] = a_star

        if(a_star > 0.00001):
            st_alives_at_start[s_i] = 1

    for _ in range(ENV_VARS):
        system_state[SPECIES_K+_] = ENV_START[_]

    for step in np.arange(TIME_START, TIME_END, TIME_STEP):
        times_steps.append(step)
        for _ in range(SPECIES_K+ENV_VARS):
            results[_].append(system_state[_])
        k1 = TIME_STEP * rates_of_change_system_state(system_state)
        k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
        k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
        k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
        system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
    ENV_VAR_ALIVE_ONE_END = system_state[SPECIES_K+0]

    print("[JI + ST Simulations Completed]")

    ji_final_results = results_nt

    for s_i in range(SPECIES_K):
        if(ji_final_results[s_i][-1] > 0):
            ji_alives_at_end[s_i] = 1

    #print(results[-1])
    st_final_results = results
    for s_i in range(SPECIES_K):
        if(st_final_results[s_i][-1] > 0.00001):
            st_alives_at_end[s_i] = 1

    #print(ji_alives_at_start)
    #print(ji_alives_at_end)
    #print(st_alives_at_start)
    #print(st_alives_at_end)

    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    ji_alive_start_till_end = []
    ji_alive_only_start = []
    ji_not_alive_start_alive_end = []

    st_alive_start_till_end = []
    st_alive_only_start = []
    st_not_alive_start_alive_end = []

    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        if(ji_alives_at_start[y] == 1 and ji_alives_at_end[y]==1): # alive start and made it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                data.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
            ji_alive_start_till_end.append(data)
    for y in range(SPECIES_K):
        if(ji_alives_at_start[y] == 1 and ji_alives_at_end[y]==0): # alive start did not make it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                data.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
            ji_alive_only_start.append(data)
    for y in range(SPECIES_K):
        if(ji_alives_at_start[y] == 0 and ji_alives_at_end[y]==1): # not alive but alive at end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                data.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
            ji_not_alive_start_alive_end.append(data)




    for y in range(SPECIES_K):
        if(st_alives_at_start[y] == 1 and st_alives_at_end[y]==1): # alive start and made it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                aliveness = ((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
                if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                    data.append(0)
                else:
                    data.append(aliveness)
            st_alive_start_till_end.append(data)
    for y in range(SPECIES_K):
        if(st_alives_at_start[y] == 1 and st_alives_at_end[y]==0): # alive start did not make it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                aliveness = ((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
                if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                    data.append(0)
                else:
                    data.append(aliveness)
            st_alive_only_start.append(data)
    for y in range(SPECIES_K):
        if(st_alives_at_start[y] == 0 and st_alives_at_end[y]==1): # not alive but alive at end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                aliveness = ((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
                if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                    data.append(0)
                else:
                    data.append(aliveness)
            st_not_alive_start_alive_end.append(data)



    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))
    #fig.suptitle('Abundance for 20 species', fontsize=30)
    #fig.set_size_inches(3, 1.5)

    ax1.set_title('JI Model', fontsize=35)
    ax1.set_xlabel('Temperature', fontsize=30)
    ax1.set_ylabel('Abundance', fontsize=30)
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(23)

    for item in ji_alive_start_till_end:
        ax1.plot(temperatures,item, 'b', label='Alive from start till end')
    for item in ji_alive_only_start:
        ax1.plot(temperatures,item, 'r', label='Alive at start but not alive at end')
    for item in ji_not_alive_start_alive_end:
        ax1.plot(temperatures,item, 'g', label='Not alive at start but alive at end')

    ax2.set_title('ST Model', fontsize=35)
    ax2.set_xlabel('Temperature', fontsize=30)
    ax2.set_ylabel('Abundance', fontsize=30)
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(23)

    for item in st_alive_start_till_end:
        ax2.plot(temperatures,item, 'b',label='Alive from start till end')
    for item in st_alive_only_start:
        ax2.plot(temperatures,item, 'r', label='Alive at start but not alive at end')
    for item in st_not_alive_start_alive_end:
        ax2.plot(temperatures,item, 'g', label='Not alive at start but alive at end')
    fig.tight_layout()
    #fig.legend()
    fig.show()


#if((results_nt[-1][-1] > 110 or results_nt[-1][-1] < -5) and (results[-1][-1] > 110 or results[-1][-1] < -5)):
    if(1):
        #or
       # ((results_nt[-1][-1] < 100 and results_nt[-1][-1] > 0) and (results[-1][-1] > 100 or results[-1][-1] < 0))):

    #print(omega)
    #print(mu)

    # GHOST NUMBERS

    #if((results[-1][-1] > 106 or results[-1][-1] < -6)):

        #print(omega)
        #print(mu)
        #print(Eg)

        #for line in results:
        #    print(line[-2])

        print("=================================================")

        fig = plt.figure(dpi=300, figsize=(20,10))
        #fig.suptitle('Species Aliveness ' + str(sim))
        #fig.suptitle('A simulation run with 100 biotic components', fontsize=20)

        gs = fig.add_gridspec(2,2)
        ax1 = fig.add_subplot(gs[0, 0])
        ax2 = fig.add_subplot(gs[0, 1])
        ax3 = fig.add_subplot(gs[1, :])

        SIZE = 17

        myList = results_nt[:-1]
        for item in myList:
            ax1.plot(times_steps,item)
        ax1.set_title('JI Model', fontsize=20)
        ax1.set_xlabel('Time Steps', fontsize=19)
        ax1.set_ylabel('Abundance', fontsize=19)
        for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
            label.set_fontsize(SIZE)
        #ax1.set_ylim([0, 1])
        myList = results[:-1]
        for item in myList:
            ax2.plot(times_steps,item)
        ax2.set_title('ST Model', fontsize=20)
        ax2.set_xlabel('Time Steps', fontsize=19)
        ax2.set_ylabel('Abundance', fontsize=19)
        for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
            label.set_fontsize(SIZE)
        #ax2.set_ylim([0, 1])
        ax3.set_title('The Environment Condition',fontsize=20)
        ax3.set_xlabel('Time Steps', fontsize=19)
        ax3.set_ylabel('Temperature', fontsize=19)
        ax3.plot(times_steps,results_nt[-1], "b", label = "JI Model")
        ax3.plot(times_steps, results[-1],"k", label = "ST Model")
        for label in (ax3.get_xticklabels() + ax3.get_yticklabels()):
            label.set_fontsize(SIZE)

        #ax3.set_ylim([0, 100])
        plt.subplots_adjust(hspace=0.1)
        ax3.legend(prop={'size': 15})
        fig.tight_layout()
        fig.show()

        ################################################################################################################
        # Abundance Start Higher then End Graphs
        # fig = plt.figure(dpi=300, figsize=(20,10))
        #
        # gs = fig.add_gridspec(1,2)
        # ax1 = fig.add_subplot(gs[0, 0])
        # ax2 = fig.add_subplot(gs[0, 1])
        #
        # myList = results_nt[:-1]
        # ji_abundance_total_start = 0
        # ji_abundance_total_end = 0
        #
        # for item in myList:
        #     ji_abundance_total_start += item[0]
        #     ji_abundance_total_end += item[-1]
        #
        #     ax1.scatter("Start",item[0])
        #     ax1.scatter("End",item[-1])
        #
        #
        # ax1.annotate(str(ji_abundance_total_start),
        #             xy=(0.1, 0.5),
        #             xycoords='axes fraction',
        #             xytext=(0.1, 0.5))
        # ax1.annotate(str(ji_abundance_total_end),
        #              xy=(0.5, 0.5),
        #              xycoords='axes fraction',
        #              xytext=(0.5, 0.5))
        #
        #
        # ax1.set_title('JI Model', fontsize=20)
        # ax1.set_xlabel('Time Steps', fontsize=19)
        # ax1.set_ylabel('Abundance', fontsize=19)
        # for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # myList = results[:-1]
        #
        # st_abundance_total_start = 0
        # st_abundance_total_end = 0
        #
        # for item in myList:
        #     st_abundance_total_start += item[0]
        #     st_abundance_total_end += item[-1]
        #
        #     ax2.scatter("Start",item[0])
        #     ax2.scatter("End",item[-1])
        #
        #
        # ax2.annotate(str(st_abundance_total_start),
        #              xy=(0.1, 0.5),
        #              xycoords='axes fraction',
        #              xytext=(0.1, 0.5))
        # ax2.annotate(str(st_abundance_total_end),
        #              xy=(0.5, 0.5),
        #              xycoords='axes fraction',
        #              xytext=(0.5, 0.5))
        #
        # ax2.set_title('ST Model', fontsize=20)
        # ax2.set_xlabel('Time Steps', fontsize=19)
        # ax2.set_ylabel('Abundance', fontsize=19)
        # for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # fig.tight_layout()
        # fig.show()

        # ################################################################################################################
        # #
        # temperatures=[]
        # for x in np.arange (-25, RANGE_R+25, step):
        #     temperatures.append(x)
        #
        # ji_close_by_abundances = []
        # for y in range(SPECIES_K):
        #     abundances_species_near_start = []
        #     for x in np.arange (-25, RANGE_R+25, step):
        #         abundances_species_near_start.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
        #
        #     vicinity = 0
        #     temp_index = 0
        #     for temp in temperatures:
        #         if((temp >=45 and temp <=55) and abundances_species_near_start[temp_index] >0):
        #             vicinity = 1
        #         temp_index+=1
        #     if(vicinity == 1):
        #         ji_close_by_abundances.append(abundances_species_near_start)
        #
        # st_close_by_abundances = []
        # for y in range(SPECIES_K):
        #     abundances_species_near_start = []
        #     for x in np.arange (-25, RANGE_R+25, step):
        #         a_star=((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
        #         if a_star < ALIVE_THRESHOLD:
        #             abundances_species_near_start.append(0)
        #         else:
        #             abundances_species_near_start.append(a_star)
        #
        #     vicinity = 0
        #     temp_index = 0
        #     for temp in temperatures:
        #         if((temp >=45 and temp <=55) and abundances_species_near_start[temp_index] >0):
        #             vicinity = 1
        #         temp_index+=1
        #     if(vicinity == 1):
        #         st_close_by_abundances.append(abundances_species_near_start)
        #
        #
        # fig = plt.figure(dpi=300, figsize=(20,10))
        #
        # gs = fig.add_gridspec(1,2)
        # ax1 = fig.add_subplot(gs[0, 0])
        # ax2 = fig.add_subplot(gs[0, 1])
        #
        # for item in ji_close_by_abundances:
        #     ax1.plot(temperatures,item)
        #
        # ax1.set_title('JI Model', fontsize=20)
        # ax1.set_xlabel('Time Steps', fontsize=19)
        # ax1.set_ylabel('Abundance', fontsize=19)
        # for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # for item in st_close_by_abundances:
        #     ax2.plot(temperatures,item)
        #
        # ax2.set_title('ST Model', fontsize=20)
        # ax2.set_xlabel('Time Steps', fontsize=19)
        # ax2.set_ylabel('Abundance', fontsize=19)
        # for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # fig.tight_layout()
        # fig.show()


#------------------------------ Experiment Reset


    JI_Start_TEMP_Abundance=[]
    ST_Start_TEMP_Abundance=[]

    for start_temperature in np.arange (0,101, 5):
        print("Running for Start Temp : " + str(start_temperature))
        ji_start_abundance = 0
        ji_end_abundance = 0
        st_start_abundance = 0
        st_end_abundance = 0
        system_state = np.zeros(SPECIES_K+ENV_VARS)
        Eg = start_temperature

        for s_i in range(SPECIES_K):
            a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
            system_state[s_i] = a_star
            ji_start_abundance += a_star

            if(a_star > 0):
                ji_alives_at_start[s_i] = 1
        for _ in range(ENV_VARS):
            system_state[SPECIES_K+_] = start_temperature


        ENV_VAR_ALIVE_ZERO_START = ENV_START[0]
        ENV_VAR_ALIVE_ONE_START = ENV_START[0]

        ALIVE_THRESHOLD=0
        results = [[] for _ in range(SPECIES_K+ENV_VARS)]
        times_steps=[]

        for step in np.arange(TIME_START, TIME_END, TIME_STEP):
            times_steps.append(step)
            for _ in range(SPECIES_K+ENV_VARS):
                results[_].append(system_state[_])
            k1 = TIME_STEP * rates_of_change_system_state(system_state)
            k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
            k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
            k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
            system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
        ENV_VAR_ALIVE_ZERO_END = system_state[SPECIES_K+0]
        results_nt = results
        for _ in range(SPECIES_K):
            ji_end_abundance += results[_][-1]

        end_temperature = results[SPECIES_K][-1]

        JI_Start_TEMP_Abundance.append([start_temperature, end_temperature, ji_start_abundance, ji_end_abundance])

        ALIVE_THRESHOLD=0.2


        results = [[] for _ in range(SPECIES_K+ENV_VARS)]
        times_steps=[]
        system_state = np.zeros(SPECIES_K+ENV_VARS)
        Eg = start_temperature

        for s_i in range(SPECIES_K):
            a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
            if a_star < ALIVE_THRESHOLD:
                a_star = 0
            system_state[s_i] = a_star
            st_start_abundance+=a_star

            if(a_star > 0.00001):
                st_alives_at_start[s_i] = 1

        for _ in range(ENV_VARS):
            system_state[SPECIES_K+_] = start_temperature

        for step in np.arange(TIME_START, TIME_END, TIME_STEP):
            times_steps.append(step)
            for _ in range(SPECIES_K+ENV_VARS):
                results[_].append(system_state[_])
            k1 = TIME_STEP * rates_of_change_system_state(system_state)
            k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
            k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
            k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
            system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
        ENV_VAR_ALIVE_ONE_END = system_state[SPECIES_K+0]

        for _ in range(SPECIES_K):
            st_end_abundance += results[_][-1]

        end_temperature = results[SPECIES_K][-1]

        ST_Start_TEMP_Abundance.append([start_temperature,end_temperature, st_start_abundance, st_end_abundance])

        print("[JI + ST Simulations Completed] for : " + str(start_temperature))

        print("=================================================")

        # fig = plt.figure(dpi=300, figsize=(20,10))
        # #fig.suptitle('Species Aliveness ' + str(sim))
        # #fig.suptitle('A simulation run with 100 biotic components', fontsize=20)
        #
        # gs = fig.add_gridspec(2,2)
        # ax1 = fig.add_subplot(gs[0, 0])
        # ax2 = fig.add_subplot(gs[0, 1])
        # ax3 = fig.add_subplot(gs[1, :])
        #
        # SIZE = 17
        #
        # myList = results_nt[:-1]
        # for item in myList:
        #     ax1.plot(times_steps,item)
        # ax1.set_title('JI Model', fontsize=20)
        # ax1.set_xlabel('Time Steps', fontsize=19)
        # ax1.set_ylabel('Abundance', fontsize=19)
        # for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        # #ax1.set_ylim([0, 1])
        # myList = results[:-1]
        # for item in myList:
        #     ax2.plot(times_steps,item)
        # ax2.set_title('ST Model', fontsize=20)
        # ax2.set_xlabel('Time Steps', fontsize=19)
        # ax2.set_ylabel('Abundance', fontsize=19)
        # for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        # #ax2.set_ylim([0, 1])
        # ax3.set_title('The Environment Condition',fontsize=20)
        # ax3.set_xlabel('Time Steps', fontsize=19)
        # ax3.set_ylabel('Temperature', fontsize=19)
        # ax3.plot(times_steps,results_nt[-1], "b", label = "JI Model")
        # ax3.plot(times_steps, results[-1],"k", label = "ST Model")
        # for label in (ax3.get_xticklabels() + ax3.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # #ax3.set_ylim([0, 100])
        # plt.subplots_adjust(hspace=0.1)
        # ax3.legend(prop={'size': 15})
        # fig.tight_layout()
        # fig.show()

        # ################################################################################################################
        #


    fig = plt.figure(dpi=300, figsize=(20,10))

    gs = fig.add_gridspec(1,2)
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[0, 1])

    #JI_Start_TEMP_Abundance=[]
    #ST_Start_TEMP_Abundance=[]

    start_abundance_line = []
    end_abundance_line = []
    temperature = []

    #for start_t_start_a_end_a in JI_Start_TEMP_Abundance:

    for start_t_start_a_end_a in JI_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])

    ax1.plot(temperature, start_abundance_line, 'k')
    ax1.plot(temperature, end_abundance_line, 'g')

    ax1.set_title('JI Model', fontsize=20)
    ax1.set_xlabel('Start Temp', fontsize=19)
    ax1.set_ylabel('Abundance', fontsize=19)
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(SIZE)

    start_abundance_line = []
    end_abundance_line = []
    temperature = []

    #for start_t_start_a_end_a in ST_Start_TEMP_Abundance:

    for start_t_start_a_end_a in ST_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])

    ax2.plot(temperature, start_abundance_line, 'k')
    ax2.plot(temperature, end_abundance_line, 'g')

    ax2.set_title('ST Model', fontsize=20)
    ax2.set_xlabel('Start Temp', fontsize=19)
    ax2.set_ylabel('Abundance', fontsize=19)
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(SIZE)

    fig.tight_layout()
    fig.show()



    fig = plt.figure(dpi=300, figsize=(20,10))

    gs = gridspec.GridSpec(1,2)


    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[0, 1])
    #ax3 = fig.add_subplot(gs[0, 2])


    ax1.set_ylim(-30, 150)
    ax2.set_ylim(-30, 150)

    start_abundance_line = []
    end_abundance_line = []
    temperature = []
    temperature_end = []

    for start_t_start_a_end_a in JI_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        temperature_end.append(start_t_start_a_end_a[1])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])


    im = ax1.scatter(temperature,temperature_end,c = end_abundance_line, cmap = "viridis")
    #ax1.scatter(x=temperature,y=temperature_end)
    fig.colorbar(im)

    ax1.set_title('JI Model', fontsize=20)
    ax1.set_xlabel('Start Temperature', fontsize=19)
    ax1.set_ylabel('End Temperature', fontsize=19)
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(SIZE)

    start_abundance_line = []
    end_abundance_line = []
    temperature = []
    temperature_end = []

    for start_t_start_a_end_a in ST_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        temperature_end.append(start_t_start_a_end_a[1])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])

    im = ax2.scatter(temperature,temperature_end,c = end_abundance_line, cmap = "viridis")
    fig.colorbar(im)

    ax2.set_title('ST Model', fontsize=20)
    ax1.set_xlabel('Start Temperature', fontsize=19)
    ax1.set_ylabel('End Temperature', fontsize=19)
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(SIZE)

    fig.tight_layout()
    fig.show()



#https://www.sc.eso.org/~bdias/pycoffee/codes/20160407/gridspec_demo.html