import random
import os
import shelve
import time
from multiprocessing import Process, Pool
import numpy as np
import time
from matplotlib.gridspec import GridSpec

import sys
import random
import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from scipy import optimize
from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm
import matplotlib.gridspec as gridspec
from matplotlib.colorbar import Colorbar
from matplotlib.ticker import (MultipleLocator, AutoMinorLocator)
#from numba import jit
plt.rcParams["font.family"] = "Times New Roman"


# Generating ALL Parameters
SAMPLE_SIZE = 1
SAMPLE_STEP = 1
RUN_ID = int(time.time())

SPECIES_K   = 100                  # ----------- Number of Biotic Components
RANGE_R     = 100                  # ----------- Essential Range
TIME_START  = 0                     # ----------- Start of Simulation
TIME_END    = 200                   # ----------- Length of Simulation
TIME_STEP   = 1                   # ----------- Time Step3
ENV_VARS    = 1                     # ----------- Number of Environment Variables
NICHE = 5                           # ----------- Niche Size
LOCAL_SIZE  = 50                    # ----------- Local Population Size (%)
ALIVE_THRESHOLD = 0
ENV_START=[50]
omega = [[random.uniform(-1, 1) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]
mu = [[random.uniform(0, RANGE_R) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]

number_alive_global_start = 0
number_alive_start = 0

system_state = np.zeros(SPECIES_K+ENV_VARS)

Eg = ENV_START[0]

for s_i in range(SPECIES_K):

    a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))

    if a_star < ALIVE_THRESHOLD:
        a_star = 0

    system_state[s_i] = a_star

    if a_star >= ALIVE_THRESHOLD:
        number_alive_global_start +=1


number_alive_start = number_alive_global_start

# Environment Init
for _ in range(ENV_VARS):
    system_state[SPECIES_K+_] = ENV_START[_]

def rates_of_change_system_state(system_state):

    # Environment Vars Change >>> Abundance >>> Biotic Force Changes >>> Environment Vars Change\
    # Alphas_IN determine E_OUT via biotic Force
    # E_IN determine Alphas_OUT via Gaussian

    rate_of_change = system_state.copy()

    Eg = system_state[SPECIES_K+0]

    for s_i in range(SPECIES_K):

        a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))

        if a_star < ALIVE_THRESHOLD:
            a_star = 0

        rate_of_change[s_i] =  a_star - system_state[s_i]


        #da/dt = a* - a
    biotic_force_FG = 0

    for s_i in range(SPECIES_K):
        # Global
        biotic_force_FG += (system_state[s_i] * omega[0][s_i])

    rate_of_change[SPECIES_K+0] = (biotic_force_FG)

    #dE/dt = E* + F

    return(rate_of_change)



def plot_alphas():

    #temperatures = []
    #biotic_force = [[] for _ in range(SPECIES_K)]
    #step = 0.01

    #for x in np.arange (-50, RANGE_R+50, step):
    #    temperatures.append(x)

    #for y in range(SPECIES_K):
    #    for x in np.arange (-50, RANGE_R+50, step):
    #        biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])
    #        #biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))##

    #plt.figure(figsize=(30,30))
    #plt.title('Biotic Force for 100 species in the ST Model', fontsize=30)
    #plt.xlabel('Temperature', fontsize=20)
    #plt.ylabel('Biotic Force', fontsize=20)
    #plt.xticks(fontsize=20)
    #plt.yticks(fontsize=20)
    #for _ in range(SPECIES_K):
    #    plt.plot(temperatures,biotic_force[_])

    #plt.plot(temperatures,np.sum((np.array(biotic_force, dtype=float)), axis=0), lw=4)

    print("one")
    #plt.show()

truncation = 0.2


def plot_alphas_truncated(range1):


    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])
            #biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))


    ji_sum_total = 0
    ji_sum = [[] for _ in range(SPECIES_K)]
    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            ji_sum[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
        ji_sum_total+=sum(ji_sum[y])



    fig, ax = plt.subplots(figsize=(20,20), dpi=300)
    ax.set_xlabel('Temperature', fontsize=30)
    ax.set_ylabel('Biotic Force', fontsize=30)
    ax.xaxis.set_minor_locator(AutoMinorLocator())
    ax.yaxis.set_minor_locator(AutoMinorLocator())
    ax.tick_params(which='both', width=1, labelsize=20)
    ax.tick_params(which='major', length=8, labelsize=20)
    ax.tick_params(which='minor', length=6, labelsize=20)
    for _ in range(SPECIES_K):
        ax.plot(temperatures,biotic_force[_])
    ax.plot(temperatures,np.sum((np.array(biotic_force, dtype=float)), axis=0), lw=4, label='Combined Biotic Force')
    ax.legend(prop={'size': 30})
    fig.tight_layout()
    fig.savefig("ST Model")
    fig.show()



    temperatures = []
    alive_value = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                alive_value[y].append(0)
            else:
                alive_value[y].append(aliveness * omega[0][y])


    fig, ax = plt.subplots(figsize=(20,20), dpi=300)
    ax.set_xlabel('Temperature', fontsize=30)
    ax.set_ylabel('Biotic Force', fontsize=30)
    ax.xaxis.set_minor_locator(AutoMinorLocator())
    ax.yaxis.set_minor_locator(AutoMinorLocator())
    ax.tick_params(which='both', width=1, labelsize=20)
    ax.tick_params(which='major', length=8, labelsize=20)
    ax.tick_params(which='minor', length=6, labelsize=20)
    for _ in range(SPECIES_K):
        ax.plot(temperatures,alive_value[_])
    ax.plot(temperatures,np.sum((np.array(alive_value, dtype=float)), axis=0), lw=4, label='Combined Biotic Force')
    ax.legend(prop={'size': 30})
    fig.tight_layout()
    fig.savefig("ST Model")
    fig.show()


    st_sum_total = 0
    st_sum = [[] for _ in range(SPECIES_K)]

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                st_sum[y].append(0)
            else:
                st_sum[y].append(aliveness)
        st_sum_total += sum(st_sum[y])

    print("Sum Abundance JI : ")
    print(ji_sum_total)
    print("Sum Abundance ST : ")
    print(st_sum_total)

def plot_temps():

    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))

    alive_value = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                alive_value[y].append(0)
            else:
                alive_value[y].append(aliveness)

    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))
    #fig.suptitle('Abundance for 20 species', fontsize=30)
    #fig.set_size_inches(3, 1.5)
    for _ in range(SPECIES_K-80):
        ax1.plot(temperatures,biotic_force[_])
    #ax1.set_title('JI Model', fontsize=35)
    ax1.set_xlabel('Temperature', fontsize=30)
    ax1.set_ylabel('Abundance', fontsize=30)
    ax1.xaxis.set_minor_locator(AutoMinorLocator())
    ax1.yaxis.set_minor_locator(AutoMinorLocator())
    ax1.tick_params(which='both', width=1)
    ax1.tick_params(which='major', length=8)
    ax1.tick_params(which='minor', length=6)

    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(23)
    for _ in range(SPECIES_K-80):
        ax2.plot(temperatures,alive_value[_])
    #ax2.set_title('ST Model', fontsize=35)
    ax2.set_xlabel('Temperature', fontsize=30)
    ax2.set_ylabel('Abundance', fontsize=30)
    ax2.xaxis.set_minor_locator(AutoMinorLocator())
    ax2.yaxis.set_minor_locator(AutoMinorLocator())
    ax2.tick_params(which='both', width=1)
    ax2.tick_params(which='major', length=8)
    ax2.tick_params(which='minor', length=6)

    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(23)
    fig.tight_layout()
    fig.show()





###################### ROOTS ########################################################
###################### ROOTS ########################################################


def f1(x):
    #return((x**3) + (2*(x**2)) - (2*x) - 5)
    #return(x**2 -1000)
    biotic_force = []
    for y in range(SPECIES_K):
        biotic_force.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])

    return(np.sum((np.array(biotic_force, dtype=float))))


    #print(xi," ",y[-1])

#TypeError: fsolve: there is a mismatch between the input and output shape of the 'func' argument 'f1'.Shape should be (2,) but it is (1,).

def plot_function():
    print("Plotting Sum  ... ")
    plt.figure(figsize=(20,10))
    plt.title('xy', fontsize=40)
    plt.xlabel('x', fontsize=40)
    plt.ylabel('y', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.axvline(x=0)
    plt.axhline(y=0)

    plt.plot(x,y, 'r-',label = 'roots')
    plt.show()


def plot_stable_points():

    x = []
    y = []

    X1 = -50
    Y1 = RANGE_R + 50

    for xi in np.arange(X1, Y1, 0.1):
        x.append(xi)
        y.append(f1(xi))

    print("Solving Roots ...")
    true_zeros = []

    for _ in range(RANGE_R):
        sol = optimize.root(f1, [_], jac=False, method='hybr')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)


    #print("Solving ...")
    true_zeros = []
    sign_change = ""

    if(y[0] < 0):
        sign_change = "neg"
    if(y[0] > 0):
        sign_change = "pos"
    if(y[0] == 0):
        print("ZERO DETECTED")

    #print(sign_change)

    for _ in range(RANGE_R):
        sol = optimize.root(f1, [_], method='df-sane')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)



    plt.figure(figsize=(20,10))
    plt.title('Roots', fontsize=40)
    plt.xlabel('temperature', fontsize=40)
    plt.ylabel('biotic force', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    for stable in true_zeros:
        plt.axvline(x=stable)
    plt.axvline(x=0)
    plt.axhline(y=0)
    plt.plot(x,y, 'r-',label = 'biotic force')
    #plt.legend(loc=7, prop={'size': 30})
    plt.show()




#print(np.unique(np.array(true_zeros)))

###################### ROOTS ########################################################
###################### ROOTS ########################################################


###################### ROOTS ########################################################
###################### ROOTS ########################################################

# TRUNCATION


def f1_t(x):
    #return((x**3) + (2*(x**2)) - (2*x) - 5)
    #return(x**2 -1000)
    biotic_force = []
    for y in range(SPECIES_K):
        aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
        if(aliveness <= truncation and aliveness >= (-1 * truncation)):
            biotic_force.append(0 * omega[0][y])
        else:
            biotic_force.append(aliveness * omega[0][y])


        #biotic_force.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])

    return(np.sum((np.array(biotic_force, dtype=float))))


    #print(xi," ",y[-1])

#TypeError: fsolve: there is a mismatch between the input and output shape of the 'func' argument 'f1'.Shape should be (2,) but it is (1,).

def plot_function_t():
    print("Plotting Sum  ... ")
    plt.figure(figsize=(20,10))
    plt.title('xy', fontsize=40)
    plt.xlabel('x', fontsize=40)
    plt.ylabel('y', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.axvline(x=0)
    plt.axhline(y=0)

    plt.plot(x,y, 'r-',label = 'roots')
    plt.show()



def plot_stable_points_t():

    x = []
    y = []

    X1 = -50
    Y1 = RANGE_R + 50

    for xi in np.arange(X1, Y1, 0.1):
        x.append(xi)
        y.append(f1_t(xi))


    print("Solving Roots Truncated ...")
    true_zeros = []

    for _ in range(RANGE_R):
        sol = optimize.root(f1_t, [_], jac=False, method='hybr')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)


    #print("Solving ...")
    true_zeros = []
    sign_change = ""

    if(y[0] < 0):
        sign_change = "neg"
    if(y[0] > 0):
        sign_change = "pos"
    if(y[0] == 0):
        print("ZERO DETECTED")

    #print(sign_change)

    for _ in range(RANGE_R):
        sol = optimize.root(f1_t, [_], method='df-sane')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)

    plt.figure(figsize=(20,10))
    plt.title('Roots', fontsize=40)
    plt.xlabel('temperature', fontsize=40)
    plt.ylabel('biotic force', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    for stable in true_zeros:
        plt.axvline(x=stable)
    plt.axvline(x=0)
    plt.axhline(y=0)
    plt.plot(x,y, 'r-',label = 'biotic force')
    #plt.legend(loc=7, prop={'size': 30})
    plt.show()




#print(np.unique(np.array(true_zeros)))

###################### ROOTS ########################################################


def plot_gaussian():

    ideal_temp = 50
    temp = []
    gaus = []
    for each_temp in np.arange(0,100,0.01):
        temp.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        gaus.append(result)

    plt.figure(figsize=(20,10))
    plt.title('The Gaussian Distribution', fontsize=40)
    plt.xlabel('Environment Condition (temperature)', fontsize=40)
    plt.ylabel('Alive Value', fontsize=40)
    plt.plot(temp,gaus, 'r-',label = 'The gaussian distribution')
    plt.show()

    print(gaus)

def gaus(each_temp):
    ideal_temp = 50
    temp = []
    gaus = []

    result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))

    if(result >= ALIVE_THRESHOLD):
        return(result)
    else:
        return(0)


def plot_gaussian_trunk():


    ideal_temp = 50

    temp = []
    gaus = []

    for each_temp in np.arange(0,100,0.01):
        temp.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        gaus.append(result)

    #plt.figure(figsize=(20,10))
    #plt.title('The Gaussian Distribution', fontsize=40)
    #plt.xlabel('Environment Condition (temperature)', fontsize=40)
    #plt.ylabel('Alive Value', fontsize=40)
    #plt.plot(temp,gaus, 'r-',label = 'The gaussian distribution')
    #plt.show()

    #plt.figure(figsize=(20,10))
    #plt.title('The Truncated Gaussian Distribution', fontsize=40)
    #plt.xlabel('Environment Condition (temperature)', fontsize=40)
    #plt.ylabel('Alive Value', fontsize=40)


    temp_t = []
    gaus_t = []
    alive_thresh = 0.2
    for each_temp in np.arange(0,100,0.01):
        temp_t.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        if (result > alive_thresh):
            gaus_t.append(result)
        else:
            gaus_t.append(0)

    #plt.axhline(y=ALIVE_THRESHOLD, color='g', linestyle='--')
    #plt.plot(temp_t,gaus,_t 'b-',label = 'The gaussian distribution')
    #plt.show()


    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))
    #fig.suptitle('The survival threshold',fontsize=30)
    #fig.set_size_inches(3, 1.5)
    plt.xticks(fontsize=16)
    ax1.plot(temp, gaus)
    #ax1.set_title('JI Model', fontsize=35)
    ax1.set_xlabel('Temperature', fontsize=30)
    ax1.set_ylabel('Abundance', fontsize=30)
    ax1.set_xticks(np.arange(0, 101, 10))
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(23)
    ax1.xaxis.set_minor_locator(AutoMinorLocator())
    ax1.yaxis.set_minor_locator(AutoMinorLocator())
    ax1.tick_params(which='both', width=1)
    ax1.tick_params(which='major', length=8)
    ax1.tick_params(which='minor', length=6)

    ax2.plot(temp_t, gaus_t)
    #ax2.set_title('ST Model', fontsize=35)
    ax2.set_xlabel('Temperature', fontsize=30)
    ax2.set_ylabel('Abundance', fontsize=30)

    ax2.xaxis.set_minor_locator(AutoMinorLocator())
    ax2.yaxis.set_minor_locator(AutoMinorLocator())
    ax2.tick_params(which='both', width=1)
    ax2.tick_params(which='major', length=8)
    ax2.tick_params(which='minor', length=6)


    ax2.hlines(y=0.2, xmin=0, xmax=100, linewidth=2, color='r', label='survival threshold')
    ax2.set_xticks(np.arange(0, 101, 10))
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(23)
    ax2.legend(prop={'size': 20})
    fig.tight_layout()
    fig.show()



if __name__ == '__main__':


    omega = [[random.uniform(-1, 1) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]
    mu = [[random.uniform(0, RANGE_R) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]

    #omega = [[-0.362836570849985, -0.9751533256963574, -0.7806311701705064, 0.9712401951906029, 0.3601189895015, -0.8463957748871203, 0.6687595513091078, 0.3850864444677531, 0.23623715640233844, 0.7770246567811496, -0.6082320479110899, 0.3371962669180679, 0.021218524481845025, -0.5773287151837048, 0.7494684431916077, 0.19728301797317682, -0.007180996745234536, 0.5800952232713865, -0.0004523108498382111, -0.5151925306154208, -0.40482613620275587, -0.47447728892068985, 0.583171627000286, 0.7272081556600933, 0.9360432184393499, -0.9148017128717278, 0.9358285075053276, 0.6566252342863608, 0.629548918560314, 0.06921501886363846, -0.6758057948651681, -0.01648277122966668, 0.027322832760044324, -0.8940190741353611, -0.9328618414767416, -0.30063282766837496, 0.20385711690129704, 0.751448058467199, 0.8941736924345824, -0.23538094636769658, -0.600902190630872, 0.5923328481704753, -0.9564934481786012, -0.4845952161410354, -0.6737273478307972, 0.5370605922644622, 0.6506157294766874, 0.5168394182084011, -0.21010078424313283, 0.4756322513906752, -0.6240747206417832, 0.17471626526637318, -0.3945434271249735, -0.3715906711237198, -0.43831269648661464, -0.7586270685830965, 0.7243736634016329, 0.24965549496655215, 0.19715139535522774, 0.26882758604505064, -0.20376805135551468, -0.775539317522641, 0.7553479658314555, 0.5271582377193746, 0.6659242738461757, -0.863827483881149, 0.20377602309649445, -0.13961711310735114, 0.4867628643672548, -0.5820043404752249, 0.7407667033286176, 0.4741142444674482, -0.14198660540175578, 0.5583204886102213, 0.46513384450219775, -0.45654143246824175, -0.9926601622004776, 0.3856250927424334, -0.7141869104125227, -0.671929234393285, -0.8437974939301016, -0.22139566600763083, -0.005120810916961371, -0.022420381261600397, 0.6365935562307861, 0.8668141549424548, -0.5174482342428091, -0.43238041002920946, -0.8451699708389631, -0.011244360343528381, -0.600873336427062, -0.3184402418783625, -0.7144217102334249, 0.40492780033813847, 0.045206272595087915, 0.5887761275798455, 0.09935502217421344, -0.923487446172371, -0.4712123537795523, 0.03452172318761959]]
    #mu = [[61.76607978992045, 64.73789863147108, 87.3614248815592, 73.23755103200732, 5.849806274283886, 32.88643059653612, 23.149758189372825, 2.975888542259142, 27.713648598533158, 87.44097716302484, 25.835398836139255, 4.868523218493914, 64.75756069495542, 51.43178342773869, 56.02367559636844, 25.181609939511993, 5.282029145437683, 79.33377504471608, 37.45864800386152, 34.76975042098213, 79.31853968707657, 11.535741682798461, 4.177464876393067, 93.8150876124081, 38.07161621135716, 56.98196804049773, 15.871109077496614, 36.148138844305336, 88.03516110894591, 38.49851522907037, 46.525000317335696, 38.332486322424465, 89.33288987876352, 10.821566129489534, 74.47161274716642, 77.3453673944898, 62.52455461648175, 71.04591159921824, 78.76954118364198, 79.20702262754934, 90.59082230387028, 77.75582099074482, 35.27471088234903, 37.848964948058715, 58.976206732859595, 52.52155913810168, 88.54056373975862, 63.689287509997975, 96.59812863582148, 2.014097119076763, 63.48198513555137, 15.103381226065881, 86.24038994734701, 90.48248523646465, 77.44804683083339, 98.51028694893418, 44.02855257713654, 86.80591557784689, 15.97615562840703, 58.88514196159511, 68.88842397596792, 57.86756634900932, 35.749210376713414, 51.55070175106956, 89.49952906445685, 41.317737717407134, 74.86518264349925, 62.10811184560862, 60.204731169687584, 68.08911800198977, 70.3779630530077, 84.93770682994918, 36.89095795657015, 94.42517894926866, 9.164060067270551, 38.01284780386823, 12.659055619621585, 36.40463533478759, 67.366725461676, 73.50497078494436, 11.487125035165558, 3.930061007360308, 44.91659995379999, 39.709757598106876, 63.305563424690504, 32.8816249067564, 69.65539010242367, 62.498842700874555, 18.495642114815336, 11.996962128939126, 2.4725525228450618, 76.26035829724404, 47.92712125291315, 72.78341248267087, 79.55824721974977, 21.686496356408615, 32.31143153929889, 0.7710592903669045, 83.96597733223963, 64.16220705555432]]
    #5
    #omega = [[-0.362836570849985, -0.9751533256963574, -0.7806311701705064, 0.9712401951906029, 0.3601189895015, -0.8463957748871203, 0.6687595513091078, 0.3850864444677531, 0.23623715640233844, 0.7770246567811496, -0.6082320479110899, 0.3371962669180679, 0.021218524481845025, -0.5773287151837048, 0.7494684431916077, 0.19728301797317682, -0.007180996745234536, 0.5800952232713865, -0.0004523108498382111, -0.5151925306154208, -0.40482613620275587, -0.47447728892068985, 0.583171627000286, 0.7272081556600933, 0.9360432184393499, -0.9148017128717278, 0.9358285075053276, 0.6566252342863608, 0.629548918560314, 0.06921501886363846, -0.6758057948651681, -0.01648277122966668, 0.027322832760044324, -0.8940190741353611, -0.9328618414767416, -0.30063282766837496, 0.20385711690129704, 0.751448058467199, 0.8941736924345824, -0.23538094636769658, -0.600902190630872, 0.5923328481704753, -0.9564934481786012, -0.4845952161410354, -0.6737273478307972, 0.5370605922644622, 0.6506157294766874, 0.5168394182084011, -0.21010078424313283, 0.4756322513906752, -0.6240747206417832, 0.17471626526637318, -0.3945434271249735, -0.3715906711237198, -0.43831269648661464, -0.7586270685830965, 0.7243736634016329, 0.24965549496655215, 0.19715139535522774, 0.26882758604505064, -0.20376805135551468, -0.775539317522641, 0.7553479658314555, 0.5271582377193746, 0.6659242738461757, -0.863827483881149, 0.20377602309649445, -0.13961711310735114, 0.4867628643672548, -0.5820043404752249, 0.7407667033286176, 0.4741142444674482, -0.14198660540175578, 0.5583204886102213, 0.46513384450219775, -0.45654143246824175, -0.9926601622004776, 0.3856250927424334, -0.7141869104125227, -0.671929234393285, -0.8437974939301016, -0.22139566600763083, -0.005120810916961371, -0.022420381261600397, 0.6365935562307861, 0.8668141549424548, -0.5174482342428091, -0.43238041002920946, -0.8451699708389631, -0.011244360343528381, -0.600873336427062, -0.3184402418783625, -0.7144217102334249, 0.40492780033813847, 0.045206272595087915, 0.5887761275798455, 0.09935502217421344, -0.923487446172371, -0.4712123537795523, 0.03452172318761959]]
    #mu = [[61.76607978992045, 64.73789863147108, 87.3614248815592, 73.23755103200732, 5.849806274283886, 32.88643059653612, 23.149758189372825, 2.975888542259142, 27.713648598533158, 87.44097716302484, 25.835398836139255, 4.868523218493914, 64.75756069495542, 51.43178342773869, 56.02367559636844, 25.181609939511993, 5.282029145437683, 79.33377504471608, 37.45864800386152, 34.76975042098213, 79.31853968707657, 11.535741682798461, 4.177464876393067, 93.8150876124081, 38.07161621135716, 56.98196804049773, 15.871109077496614, 36.148138844305336, 88.03516110894591, 38.49851522907037, 46.525000317335696, 38.332486322424465, 89.33288987876352, 10.821566129489534, 74.47161274716642, 77.3453673944898, 62.52455461648175, 71.04591159921824, 78.76954118364198, 79.20702262754934, 90.59082230387028, 77.75582099074482, 35.27471088234903, 37.848964948058715, 58.976206732859595, 52.52155913810168, 88.54056373975862, 63.689287509997975, 96.59812863582148, 2.014097119076763, 63.48198513555137, 15.103381226065881, 86.24038994734701, 90.48248523646465, 77.44804683083339, 98.51028694893418, 44.02855257713654, 86.80591557784689, 15.97615562840703, 58.88514196159511, 68.88842397596792, 57.86756634900932, 35.749210376713414, 51.55070175106956, 89.49952906445685, 41.317737717407134, 74.86518264349925, 62.10811184560862, 60.204731169687584, 68.08911800198977, 70.3779630530077, 84.93770682994918, 36.89095795657015, 94.42517894926866, 9.164060067270551, 38.01284780386823, 12.659055619621585, 36.40463533478759, 67.366725461676, 73.50497078494436, 11.487125035165558, 3.930061007360308, 44.91659995379999, 39.709757598106876, 63.305563424690504, 32.8816249067564, 69.65539010242367, 62.498842700874555, 18.495642114815336, 11.996962128939126, 2.4725525228450618, 76.26035829724404, 47.92712125291315, 72.78341248267087, 79.55824721974977, 21.686496356408615, 32.31143153929889, 0.7710592903669045, 83.96597733223963, 64.16220705555432]]
    #10
    #omega = [[0.6299139040430586, -0.24954835404693054, -0.6555460819796104, 0.14618239626180762, 0.6768643822603426, -0.7852596214094743, -0.8965568690781378, -0.40477355781649704, -0.520443921754858, -0.6994068634825146, -0.46194826796748845, 0.5519583676156736, 0.870815948717053, -0.023866981836854206, 0.35571746866404585, 0.8872963569388206, -0.5108879345813602, 0.6088015214563631, 0.19151653348777442, 0.1783364542133632, 0.7320423651463444, -0.6338142933870945, 0.13346174486584128, -0.22135122990281264, -0.9807750696856632, -0.8439894722480521, 0.5198113755880487, -0.9295034386225678, 0.5371270766651772, -0.6430032786505187, 0.13654843677377348, -0.1343811287231278, -0.9407141451681209, 0.013643467007429688, -0.39141937266741933, 0.25099356868266764, 0.6791384833715743, 0.6466870957599793, 0.2987286289552449, 0.5190131594866496, -0.19399702681773312, 0.8935316172464247, 0.8359110350701917, -0.35130760157618646, -0.13655496434988157, 0.9323013386518908, -0.6013414090877378, 0.2824463705807969, 0.8103280307102554, 0.8302111530852307, -0.7173551109438057, -0.14730237337271102, -0.0015208337218928225, -0.9179330447900036, -0.424204965900836, 0.8135182681995159, 0.5628017459475303, -0.9770105273796781, 0.31364724298114344, 0.15704503690738147, 0.820482259282517, -0.6013098975947953, -0.7994369247412179, 0.4822151504075478, -0.36745870174770245, -0.24912239850774665, -0.8700192683318397, -0.4173202148394528, 0.22046333851918143, -0.5260277965634055, -0.823811550679963, -0.08154245288691819, -0.9059195121689443, 0.5555653839760726, 0.03982516123274449, -0.13658744259319722, 0.8851832564928466, -0.5932021622913075, 0.16660903347665457, 0.37774969342223663, -0.18626511029723614, -0.20091219434294105, 0.9649139682696548, -0.3723136889124645, 0.6197401220889325, -0.7500942717619852, -0.9856251265948222, 0.6141258184189755, -0.8928039838738187, -0.8975601287964607, -0.39661991836115096, -0.46733041834046385, -0.7874368843242983, -0.3963569289183908, 0.12079005951087152, -0.7811710351868364, -0.41000845716836065, 0.5520635621246446, -0.6732528374777607, -0.4802365773947337]]

    #omega = [[0.79986235823773, 0.6091010996979873, -0.20250200196664903, -0.8733980751992751, -0.027184493063225013, -0.37776680223675196, -0.8385360522954668, 0.11681912164708064, 0.13669634205535375, -0.16345880683481795, -0.6514159095753493, 0.602359959328014, -0.20238536190497336, -0.6832847892999749, 0.7371701951028902, 0.7006370500309731, -0.1291726776236808, -0.8692681161039084, -0.01138995750670535, 0.12267177117392047, -0.8617342152360354, -0.9315314166082891, 0.16533244909382283, 0.27206507008500136, -0.32420246616042414, 0.17751788177597727, 0.09785189169299335, 0.5823473250118218, 0.5658839336692008, 0.9071305965349254, 0.8483225488276764, 0.2677845161128678, -0.5364804270728953, -0.12467142573080192, -0.17580393975059705, 0.14158838525215667, -0.9994173053146553, -0.018202869499435614, 0.7464313855234763, -0.6622243933091259, -0.43212065086126383, -0.35289655092772265, 0.027653862694068554, 0.8583079752329001, -0.011429358896809072, -0.35104699292406294, -0.05810904540122519, -0.18795493575078415, -0.6576312555057435, 0.29567427555697123, 0.6003099716647493, -0.8877872119780978, -0.024264439245028857, 0.21371205961727058, -0.791305781941539, -0.8269615716983159, 0.32519736859390935, -0.23529523067672353, -0.8464897027131402, 0.28542470036580947, 0.12993482601462492, 0.2277040984283838, -0.5742605619951635, 0.21028450660074238, 0.5160167436191334, -0.5085116533645468, 0.6348912961258308, -0.009536131578756768, -0.01702970306789031, -0.2849499923075589, -0.8477032310882648, -0.571103164080492, 0.15521600114833123, -0.12437914053748811, -0.3439683947208083, 0.2465239318182939, -0.918813018104617, 0.16584516198818022, 0.025248413291998117, 0.2620624232357165, -0.7477576950075384, -0.891973038729962, -0.9339440952354723, 0.8617218506134927, -0.6613488106011702, -0.43950219849008, -0.20723868976972604, 0.6148951451218967, 0.17681288202009227, 0.7763497747996566, 0.5177069281137403, -0.7140044603736491, 0.7589955100339418, 0.8612697735047212, 0.5498770259429124, -0.275107500786141, -0.16957185937699615, -0.5522222993390276, -0.6030748780278545, -0.013269728472857123]]
    #mu = [[5.66769221409843, 43.23504909431952, 29.923614001698663, 91.56033019600483, 64.38923768153907, 7.443812943484507, 64.41570899610473, 11.165489028582476, 6.168463045166117, 66.00717278116004, 62.970020621268674, 80.33962882265993, 15.710475545136626, 77.78681173303431, 95.26277653630957, 97.58111053758593, 23.695355826320963, 48.81018891518878, 25.612460247674672, 95.386296020038, 22.03821526336981, 6.817679740293725, 8.77836955917447, 14.308217356997933, 69.3270796217085, 62.482347092936074, 51.657699375805855, 68.54194156655853, 37.20063611970431, 41.23871178744951, 67.00994219240994, 16.537781076050805, 87.42202033012086, 82.96949267196948, 68.07093286798647, 82.51209507115865, 8.518603051642193, 51.583977473137544, 36.75329897490298, 87.61826401673973, 76.53796211517636, 95.68928303339092, 34.457456628358116, 55.895154199132726, 43.72621148266004, 8.10231240279805, 11.918979213003977, 17.592580496385025, 95.53149540416007, 10.452406034640816, 17.043243690543186, 28.75724918595758, 19.95161522960167, 63.533638446518715, 33.70921499029114, 96.48242011482667, 12.192196947254963, 32.546684209771925, 98.5287452940411, 35.56726541581795, 58.213519262554804, 3.819965940748926, 43.72964305952895, 95.31314390623227, 82.99568502999806, 30.68475130421656, 20.71134892271389, 59.12006752168638, 70.48633470273796, 44.84032004210441, 60.37248329464091, 62.65489074926097, 27.927030145565325, 82.03076827209946, 52.849364409403265, 40.981467547479845, 94.18645346273755, 36.70100614447141, 97.44245261810967, 5.870690098055487, 40.66047301397062, 36.08389899512443, 28.307114842973558, 42.84296456192212, 86.2766473810414, 49.08878839966465, 97.45139826397417, 93.33136321320988, 77.3295413420423, 19.64609921424223, 1.9296118470522705, 64.63108368707599, 43.85115448553189, 96.54212341246176, 29.586704579782662, 99.15737098378136, 87.81441800175149, 64.46075820930336, 5.192639623265971, 57.67768256496794]]

    #omega = [[0.5796217241862403, 0.5431209959011487, 0.49533823307622327, -0.5617402779988123, 0.5571402680960764, 0.3254699857500707, 0.7775243984789961, -0.3515710618259038, -0.6312307890461735, -0.7834113448238107, 0.3600290867843423, -0.17098981641874267, -0.4729681812056916, -0.15030639140134627, 0.06956916171350702, -0.09497328557820062, -0.6236815420159689, -0.5313684186145737, 0.31029801183044525, -0.7489605228205627, -0.5855112244736522, -0.01658215791209683, 0.7707967417350081, 0.876086082980251, -0.26484359187719186, -0.2155682811802433, -0.4283515442964838, 0.3410767266697472, -0.23525016970465185, 0.012998277743992315, 0.34190477210935555, 0.5281243062998418, -0.28603411115718247, 0.24212335125594864, 0.6467380307159871, 0.43848365226833175, 0.9465327764468985, -0.22430323851617806, 0.34150454730273627, -0.6301461733635803, 0.5813095302885223, -0.04555594351563652, -0.704059072292762, 0.84324763456438, -0.8582732049230744, 0.18118419001095498, -0.5339127194020774, 0.4366408067180092, 0.2293500016782346, -0.4890764551712017, 0.529700560279728, -0.610568406862319, -0.6817432520942148, -0.28959162596740273, -0.7275841023164207, -0.41141175317235623, 0.665574345874568, 0.018372418096645804, 0.9588856511865973, 0.02582463835323856, -0.48998328394766477, -0.9180094639169039, 0.9202139397900071, 0.7279943850243649, -0.3269867988558688, 0.6706485496528622, -0.18937246624539306, -0.9637074794010636, -0.7976281193477133, 0.7456600499063224, -0.6767139277639416, -0.23941048527058006, -0.22075465806912065, 0.9972009018786683, 0.13238413027023244, 0.2959978074108871, 0.8273008400703399, -0.5078529188332712, 0.6979780997573077, 0.8219254128080102, 0.4285828512650811, 0.5384888336925222, 0.9728744543077479, 0.7227694884531783, -0.7362020649848011, -0.9595241614554799, 0.3182824578286707, -0.8112541780089335, 0.8300696085257198, 0.01836794046411483, 0.7393939933281908, 0.7389007692906102, -0.4779673418437249, 0.16789268362794862, -0.5500128846074639, -0.4101982123841239, 0.8367683159539685, 0.665133185176817, -0.6517830991769533, 0.9362474108020009]]
    #mu = [[20.130936635521223, 53.98015116166314, 44.3711908784139, 9.555382173649217, 98.90723454128494, 41.26923497044038, 81.74461826268306, 10.269652752642877, 46.85250650921989, 44.070755485884874, 97.98050928889775, 96.48639096175495, 86.09191796640772, 85.09825558846718, 83.91727149915525, 0.28787535367467143, 78.35641854533102, 60.21167521018659, 75.9598322902987, 14.4280348425762, 12.370212251647617, 59.789919792494686, 13.287584759606874, 5.196425167942231, 75.94779962476855, 46.33381724774759, 17.478800929686543, 77.20013367623054, 26.73741955812343, 88.42512079272345, 38.38918982931626, 14.270323036678423, 5.548821336257392, 81.26602948355506, 6.529131149531664, 48.362330359806826, 89.67289332145008, 94.02819840843671, 46.72928517086525, 10.382638950453094, 40.515123694474475, 41.98714906522502, 69.4767682553803, 21.44345057613878, 97.47130268232092, 67.49950233256378, 94.97330612363874, 98.66223309648852, 9.75809560751938, 4.73761217837152, 13.592244486966553, 57.733890127224505, 0.6616739123666449, 30.217479576783703, 9.313934900996978, 16.805866240907676, 51.22727774495361, 4.996024643256247, 89.34803938467803, 21.304636369759244, 28.44809787368775, 35.92374772001011, 92.364428955513, 4.575164085193217, 22.58843878625698, 94.63305261662546, 36.850952687056605, 46.11230452840126, 25.96628555756306, 17.109659898852804, 88.35076038678017, 13.333810179193438, 48.029605770173504, 2.020044162152934, 34.622676694556496, 72.83105209879062, 35.860863142225206, 16.859560269607577, 81.85557423943023, 98.31540845757958, 92.86402198265074, 90.35907374259831, 45.51761323522198, 51.11592701966452, 56.959129679846264, 36.74914755696162, 98.06239367147337, 31.526580307161666, 77.96729658812451, 66.70074703009291, 41.69242117226499, 30.57430596074996, 36.59130725161872, 63.549280495716665, 97.42464738149235, 19.288875292371877, 36.08077863172282, 16.057384517537578, 11.434748727397793, 92.29257772650232]]


    #omega=[[0.3810110826483708, 0.9009826553399982, -0.7021136377838828, -0.4151678331154671, 0.775476278229261, 0.16432181986964967, 0.8662077555543091, 0.19430170890073817, 0.9997053019952837, 0.6765417419772393, -0.26639932700257396, 0.5255056344609037, -0.3634372070233298, -0.017807188365179805, 0.8796412334689427, -0.9743350597778389, 0.24514749715084183, 0.4225839970565157, 0.8558890961559529, 0.7130439532088526, -0.48860421139750065, -0.8337300140208368, -0.8695335923191256, -0.8591209557243387, 0.2432169300373337, -0.5906851782360476, -0.09820309785672898, -0.840153098608458, 0.31744681532650687, -0.050625287514637574, -0.0867604619686555, -0.31373655028829583, -0.7414819422287753, -0.9200645870044166, -0.15921407640637786, -0.6535331609810451, 0.8500311884706628, -0.8934137290968902, -0.8837728990022968, 0.7165073587911264, 0.5181078942128616, 0.7166447425348164, -0.7187606944758771, -0.6669673046120956, 0.7451057886315584, -0.9936683355081315, -0.8732755506523904, 0.729966344857806, -0.4322622561452758, -0.66037035436518, -0.013338018128116857, 0.6429465802516772, -0.5227245671808283, 0.8930095003762453, 0.08071701447338642, 0.6686023619843313, 0.4152024643739447, 0.9758572374735266, 0.6020727655548015, 0.13699144051605594, 0.30974002290753844, -0.49369495598405844, -0.6112432317043881, -0.31658172417055064, -0.3604788973657227, 0.40394818417436773, -0.9706351313699613, -0.811855479919714, -0.6949076593823236, -0.7911743804849254, 0.28105110096359986, -0.8364620235785658, 0.7512382366399302, -0.25156478519475356, -0.2910131332780177, -0.07638453852461247, 0.3706105241796258, -0.8749309877912348, -0.5417455661944472, 0.42137430727027825, 0.8716522853196567, 0.9373988120403514, 0.5067957417852706, 0.5716377621307325, -0.24009337046713042, -0.9603159206550471, -0.6724034804546286, 0.6267021404738691, -0.9529234745406558, 0.7068874113033681, 0.8584232127641693, 0.6803496235432414, -0.5310799885436757, -0.045208795664029244, 0.858167412475104, 0.345725873329759, -0.6131217951162953, -0.19253073890627936, -0.72506197383874, -0.7380332331169335]]
    #mu=[[58.340261916774885, 2.3638209383980757, 62.523202763636235, 66.8692718846308, 30.135734591922247, 29.29694725970331, 81.93623629332943, 40.45928446972508, 52.63229649651178, 76.51891490530505, 14.766735430892119, 36.38707094826903, 95.86951950311733, 20.077739735850606, 63.01932851016144, 31.250797321791723, 73.53271875398562, 80.34073830322987, 10.37812777584307, 18.85684453739399, 17.593646468786204, 81.50861912875702, 28.928376701878978, 46.852921246302095, 84.43396181974182, 62.316973246869445, 17.073450441469728, 69.57847351285957, 77.69003284328711, 73.77226071149737, 29.3212843892918, 37.02136726623287, 15.705335879722536, 0.9182206788962088, 7.782095553646817, 92.46406269907426, 49.8936661966024, 87.60886555508995, 13.789619639512152, 54.54501919566241, 73.97571501335273, 89.08774699104373, 67.4085051655251, 75.59982907170836, 10.711194004459612, 26.657001163403994, 80.09519607489781, 14.906794048771388, 33.60951010481942, 29.869185145970157, 74.15836014397765, 42.40896101648109, 49.31233799106993, 88.82368670667698, 62.42713055638075, 80.74641190642802, 10.534036771112753, 76.03834079448457, 84.71516754154604, 7.937172850305563, 82.5575607795899, 68.91059099055065, 1.756466117639699, 27.864126232946084, 20.539468828382258, 12.73218511857095, 94.33861645598006, 63.47664795656128, 0.45989815121814104, 38.65902815754634, 8.482517540940893, 9.604703339023391, 49.379007071446324, 35.77698401392194, 34.846006161104384, 8.506586841692531, 96.7907500662216, 87.28567854972795, 54.60003847094483, 57.120767061736984, 46.99081314010899, 97.8686022683161, 63.065077690280724, 78.07114904541233, 64.13825354089767, 13.766419114393102, 51.236048134006104, 80.85547974881628, 73.62817908658958, 64.49345113028497, 18.143120631332554, 81.73521198435438, 45.96814479301641, 46.44669128137387, 42.53229399872166, 83.42219872881044, 13.15283038068198, 62.81965194236921, 93.83704428576841, 41.46351805417837]]


    #  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    # 25
    #omega = [[0.17833500584906026, -0.7217201228101111, 0.3102287733815021, -0.5438094194139951, 0.1298622735098529, -0.626574131935205, 0.9115306204747042, -0.22860008737033088, -0.8935135775737519, 0.3128560273889114, -0.49267442764533786, 0.1682597027856656, 0.7036798666903776, -0.5429873025376162, -0.25161969521472694, -0.24426354947205642, -0.4161765879283652, 0.3607497989204018, 0.6646643113326345, 0.7480166428317403, 0.7647144743858671, -0.8418404448571977, 0.8795221414654601, -0.6836247998694156, -0.7186269492669541, -0.4637656725104484, -0.2030512038506087, 0.2987389260643529, 0.4894076657028932, 0.15155763903489805, 0.48988396108536403, -0.2595849337505929, -0.05372488714662804, -0.7966418467835312, 0.8297107236452985, 0.5681952892717785, 0.37978449935417147, 0.8405744059354194, 0.10185948107947929, -0.5220003036171434, 0.6789020729546622, -0.6730085895327327, -0.4802742772053683, 0.9875081648478135, 0.534712317066343, 0.7542421749800852, -0.3672482019358023, 0.7298209624687892, -0.8318772571965554, -0.35789706400217125, -0.5246042241775895, 0.1459292348762995, 0.6566872852995298, -0.6818266410786407, -0.5148589016223764, 0.9650761528307514, 0.8892652732507265, 0.22669835138538397, -0.5890385426503515, -0.9759314349585828, 0.39537362448128044, -0.7483736677882107, -0.9292782636670611, -0.7355236249636155, 0.33892362364479367, -0.7379894739181161, -0.519056691207759, 0.7340011164867457, -0.34444805324155414, 0.384068984459045, 0.275855194857352, -0.08498621358340408, 0.5016812437030971, 0.12783589997153255, 0.07581346473869544, 0.640884358517483, 0.5497367236237252, 0.31802701764610797, 0.6174684862626454, -0.3456557028914615, -0.14719341312798795, 0.004330434902551694, 0.121731416612614, -0.5876899351934763, -0.18429929583060223, -0.7545118054646447, -0.2646261191963881, -0.9432591453316157, -0.9889993515724855, -0.9828494603446454, -0.6363638321549983, -0.9727736358866281, -0.45176859460139296, 0.13927092398607654, 0.11072578825077173, 0.31510240197481165, -0.20204508005086397, 0.596851277866771, 0.9512238196534628, 0.9671707084864554]]
    #mu =  [[28.085854716487834, 98.1707148837617, 1.6889057866073975, 33.588427120894636, 80.26295285680305, 19.61503665138633, 48.913259813008445, 29.093036694973364, 76.86633794662015, 39.791867268396885, 77.84008621340195, 93.83279212798249, 67.84991358721749, 33.45761732837993, 69.87115636650317, 1.4305660512876628, 40.214310131335296, 51.23580183682934, 26.978965486516138, 88.03844945813026, 14.546249044780524, 96.38567602717755, 50.237374717144014, 4.83308341625982, 25.494935030100187, 45.2756726544854, 37.176771648348485, 72.65823111612379, 31.209915677541133, 9.42034532143865, 24.587943454606055, 34.586425315515775, 15.26208559575204, 67.81991569826053, 94.73031231997673, 85.3330743502624, 75.64164120156745, 83.77572022920691, 50.407138410234786, 27.045040759254036, 21.479110084065354, 2.2293634707905463, 76.62112405117844, 42.56703791774428, 12.00173452017711, 66.85168351931826, 61.079669862200745, 82.1485887824431, 6.532573120749586, 14.959933967235994, 98.57385155395983, 4.936637447067216, 67.39063855558881, 93.19986337963172, 36.99849471871086, 40.809024190645225, 94.28905382356257, 44.42238873242036, 88.78003452195212, 99.84902187109867, 14.386683008175961, 13.934850709460777, 70.52347909037366, 48.3068334704866, 93.04766337245044, 40.43610170502245, 64.03539374145014, 10.263943993395863, 25.364306200566457, 36.512614649365304, 85.18318253574874, 22.83033648091931, 51.588560404068595, 82.55230764624677, 28.894221988089043, 51.262572901702605, 37.19942393838886, 5.208057014892975, 87.08981214540209, 69.73432874616633, 22.54427983074222, 48.78432297901614, 99.97075298514338, 21.465293393147334, 28.286538202876876, 74.70615301647524, 96.07633850563597, 15.813943470745729, 52.79000424461825, 49.34226524436206, 25.541282615799364, 60.33901750353727, 39.00623137817293, 44.90475150090856, 30.632606457039614, 52.28537045856382, 61.46818108886492, 64.28047866708225, 78.51243922694397, 37.46330842291056]]
    #
    # 32 - Full Negative Direction Movement
    #omega=[[0.051236084597211295, -0.1186847107434037, -0.9381450741368165, 0.62267641757877, 0.6141322340336224, -0.43604360798829767, -0.2989561933300009, 0.3035120427783422, 0.5278436318674078, 0.09283256890625124, -0.3777008379525384, -0.2124509053892698, -0.5902051016311036, 0.8259314897699508, -0.01524439003696143, 0.13272804933299742, -0.9390512710676828, 0.3115348959371691, -0.24193004382816552, -0.07527450097878097, -0.4726003755969024, -0.7238669860487139, 0.1415901303438758, 0.8221980000659108, -0.2554668420717445, 0.7314058619091361, -0.08919822197592864, -0.768098566997865, -0.6039999617086316, 0.10474687560279428, 0.3053874254962148, -0.9857367285604937, -0.9973294300050677, -0.8874267072628645, -0.4270058516388757, -0.8559946081629817, -0.5247524197583315, 0.3503318065911927, -0.6552704386584023, -0.49042295654623014, -0.3281950605627231, -0.815830475278678, -0.928517008178511, -0.8353875712115568, 0.1614074623452304, 0.8302233239581382, 0.2101132976264961, 0.128342917277515, -0.3099447045004031, 0.06530692351764777, 0.5257223605837145, -0.5543680484074267, 0.3221880202449363, 0.8108761195996093, 0.8381478246954981, 0.973565554091004, -0.5933769227057684, 0.7158559203111017, -0.9171835365706256, 0.6811740852954189, -0.2986882731544189, -0.07076344574441418, -0.8730960925073656, -0.8816660240591347, -0.3574404155602007, -0.6290723259105495, -0.4307839965425053, -0.8776077465580789, 0.6223731304364388, -0.19002278817223495, 0.7597844735644168, -0.4306037265613858, -0.5744973838489582, -0.12226153076910262, -0.23543506885407228, -0.9965837849207666, 0.0799606198797671, -0.6854246090515868, -0.765796245125548, 0.13610397220908488, -0.3702243567069905, -0.8838644796697901, 0.38960027631873184, -0.758538560858159, -0.9073074349079961, 0.10015771414007046, -0.3482034037221884, -0.14029957496078804, 0.8315572501837847, -0.8511531432099908, -0.826725487731957, 0.16842877030328074, 0.0659219161481448, -0.39470293771087817, 0.747869757039733, 0.37293957257106003, -0.9475914677326314, -0.2753546401642082, 0.8261254529255928, -0.7975124032298451]]
    #mu=[[19.021913900632736, 70.98712279530973, 48.348168814241944, 3.392315456641637, 64.88124452424299, 79.66988444270812, 64.5656108907924, 39.46689244851578, 87.02747832357987, 15.521385940567223, 16.428179633568053, 43.955660549622344, 70.75828923835175, 22.119550875621997, 31.83949082745958, 4.9331689984128735, 74.65824016527722, 10.483764144424768, 43.53701925751699, 28.314354674265385, 46.006406597042606, 15.776094038448596, 76.26371181729775, 14.472338139128759, 59.83152043860517, 79.28680183698637, 59.34859855765728, 16.24665983855298, 61.41732553939849, 80.68620189249572, 11.118884491849169, 46.7822170474374, 1.459291141434993, 3.5335091412370123, 68.72573964294276, 86.92267179395586, 81.57236520207236, 96.7956713710165, 94.61027523764056, 34.44394709449229, 45.01752250768787, 97.64589528929132, 13.6743650376412, 10.602486521535848, 63.03999442162023, 70.67140686544448, 71.47011664759006, 29.342264056730972, 12.142187513220637, 97.90643900009725, 44.670800524165536, 50.99859212086739, 45.15578481845538, 22.394743098365456, 27.62372079589548, 53.62769911869451, 20.306755358295636, 7.562824051482908, 20.904063835369325, 40.91018798401037, 96.54713818815915, 11.63046945971421, 42.23012689438499, 44.645144665063405, 78.18485367249953, 34.7727024660937, 2.3368153231046573, 87.88626408992799, 9.670733159874324, 65.7632540742554, 60.227910782760006, 27.861485351572824, 79.20681315496384, 81.04088146714437, 75.05603492917712, 88.0736353602485, 30.551064062312495, 70.11724723893704, 55.19052357023458, 12.558636225707797, 61.30474466957493, 4.1364798108126095, 0.8302324644184345, 72.32665309495415, 94.36437220666791, 21.495987162450692, 37.35312917220253, 43.61034205267642, 41.51189777884302, 55.048836258834456, 74.87281801699969, 50.5734427401443, 64.33836206274981, 26.82447336380279, 21.633786194664406, 69.7428752609656, 17.369977938952218, 30.804883681858186, 43.59980814972402, 18.59955922438461]]
    # 86
    #omega = [[0.6451687666218682, -0.5835216484075552, 0.33516533799526216, 0.5092274711567373, -0.09682693466218217, -0.4205754074327459, 0.8577075378643424, -0.6137064382377262, -0.8440936713070701, -0.918123161900688, -0.2452692445831759, 0.935113817418737, -0.7990389461963443, -0.7362200277271769, -0.48252425234743623, 0.8793534692469196, 0.8229249678359707, -0.30166927466626725, 0.7965473505655494, -0.9987734145882936, 0.11959081674982586, 0.023139788569348285, -0.07264293860799009, 0.17026597540302046, 0.5479638364730626, 0.4852844390811488, 0.5938829693635959, 0.8482319280030111, -0.09135992164256601, 0.0139213643447611, -0.6815883816789221, 0.0522920785358616, -0.6641608621910366, -0.11222023779812473, -0.26984024719716193, 0.7146226517766492, 0.8781155861312757, 0.5947187430570731, 0.7425325178010869, 0.5361921158950262, 0.5483133104423228, 0.6364641898596111, 0.5411773211809177, -0.38604302191554507, -0.6584623743188633, 0.636617689270015, 0.4114869038368021, -0.8563026654294585, -0.6641893699005268, -0.9226517410024702, -0.9700924273918483, 0.23741300766134166, -0.1549937950732656, 0.9782974530628319, -0.14420549220312462, -0.6860110180239691, -0.28492722865671727, 0.2207200675217904, 0.3425706216236828, 0.4294618135469632, 0.9127394065348302, -0.02674380079332561, -0.03891056157906436, 0.2555614001389146, -0.8049313360899253, -0.8399317294591437, -0.5265272651116226, -0.7393073321708066, 0.7640491070862732, -0.08537260183971829, -0.3008960724898273, -0.8893362594613123, 0.5723135958228351, 0.7162238764043274, -0.2559631703217393, 0.48371258398850014, 0.527178797795635, 0.4307610244073845, 0.10408740074414391, -0.0016406425740305153, -0.7882173848245249, -0.1786151446047648, 0.32523119988992866, -0.8389690290555376, 0.8079220557039521, 0.6523123114101885, 0.6296179334803844, 0.536465521454299, 0.16593409522223124, 0.3574708043995112, -0.49904478295541677, -0.9697048187862944, 0.8369833807190481, -0.45824455097345407, 0.4496299509737258, 0.10106688798167829, -0.20418289929639877, 0.2509774746172495, 0.24870120712329147, 0.22604364712353786]]
    #mu = [[45.7013800467916, 28.892064297510466, 92.98206694509136, 6.846450100139478, 56.22548248956163, 41.85098416956753, 37.166982309909216, 0.01701325325030867, 5.451753011223303, 80.07188071420008, 21.594760931940115, 34.78134766146211, 29.086901246467857, 9.054750173902448, 44.62303710622607, 65.8992199853284, 55.50142973502313, 51.916691418863806, 64.98875007382289, 17.80317137673236, 2.0164657369451833, 23.86760258631011, 25.528651828069627, 48.20589919439917, 3.2028103052821777, 98.64612960355869, 46.16908927205837, 30.297004837650455, 83.94161389524562, 39.79551063867368, 29.852123562694445, 67.59648564265342, 78.42338358639518, 13.04036740885206, 55.51918098608273, 81.03947387510757, 52.66257208756969, 87.07910428722136, 15.63436125760247, 42.905808010573395, 56.10166424852962, 27.84852024549861, 36.372418903471, 59.625917050361345, 57.38000711793273, 23.429444113787756, 83.20496993175527, 6.955389219761043, 0.8695495122348906, 71.80349357657776, 87.74712410238118, 99.1152592919592, 2.852959156276269, 77.44321503909204, 27.89080540646941, 17.515742319382323, 91.08107569833344, 82.78335472927184, 86.64022550066822, 40.96679287300543, 74.37462587757054, 71.1331267781178, 82.50379399254957, 42.10650248136819, 5.06516874626498, 63.947545040033326, 8.065719783317316, 52.576305044560876, 26.33634419789095, 41.7273408978304, 82.19538398528991, 66.75181705028857, 53.89644555147648, 11.311894676130974, 15.457214963974252, 64.57122204957125, 58.96204870246052, 95.50546000070649, 57.29501515234938, 28.126029512879093, 83.88114694597279, 26.297163906110665, 16.483941292174453, 63.691551663786974, 39.83580882466473, 95.82107610969169, 85.65356117841188, 35.745920117190224, 6.283571713166058, 68.07860153471049, 78.02930437380824, 19.93396480489169, 84.22933093051851, 43.01926777333263, 66.57216520694539, 85.11150434438365, 70.40128165518976, 25.555447606280946, 56.616895735481265, 52.215590650957054]]
    #135
    # omega = [[-0.1877172759093515, -0.08724068025572973, -0.8369347287632944, 0.5009418660629583, 0.8386017298529436, -0.4164144390733211, -0.6549494114639807, 0.6124103836161656, -0.8718626941917615, -0.9961398013076199, -0.5673426358320821, -0.11628501353938181, -0.5662263854690495, -0.2639777036987123, -0.6003001162518109, 0.9330923351037221, 0.6892939284728239, 0.3274447870425683, -0.29216357797890247, -0.35910005518361165, -0.8165332771835174, -0.9153985278652073, -0.7390960530876034, -0.949603690362913, -0.755471568368113, -0.2935063528093138, -0.5564306397567518, 0.04967285214118955, -0.9847172694516988, -0.877269021149855, -0.5660151998212792, -0.632804738196191, -0.6091753507031854, 0.82043692122441, -0.9090696758871744, -0.9829623774508829, -0.8582811128899115, 0.16705739209749937, -0.43721344204753865, 0.3703723008783182, -0.4929755154749025, -0.7161074904551334, 0.5061636250283443, 0.36522613975563134, 0.5838525585073242, 0.32793081646022926, -0.53842927878691, -0.679166453917547, -0.17286954681943545, -0.9760853809184871, 0.3142940203505036, -0.604483987819076, -0.25543832614738937, -0.47124121674789454, 0.012825931709606886, -0.5020791701435712, 0.5933388345786865, -0.03869241288835701, 0.136330470226792, -0.27321609683816606, -0.7661633678619562, 0.7909873253713633, 0.5843304525094881, -0.46302678024699606, -0.15519431341504308, -0.11319837244926756, -0.07833751885057616, -0.6168516172053389, -0.6588936232513221, 0.8674193031625024, 0.6694925948356041, 0.6952680824099204, 0.8588607426388584, -0.8038131999929343, 0.971487846831385, -0.23481355192278186, 0.5882202506260048, 0.949356802422654, 0.021679740733828057, 0.22942318169844933, -0.28533409972158985, -0.48153753861883786, -0.7917747372969475, 0.5708826383092325, 0.2615762642553603, -0.8959420557671824, -0.053394030929259984, -0.8066736059234456, 0.6761459806306258, 0.28078020876849363, -0.5926000987434961, -0.14533174164280882, -0.8994905270539466, -0.37076426376894744, -0.6417566231208869, -0.5232786859240455, -0.02080856717568813, -0.8695239681236473, -0.390631906189679, -0.8486779001097169]]
    # mu = [[99.55344082399326, 16.547441836598153, 64.01582725800753, 68.65549886408725, 21.63015325573774, 83.84859197255051, 88.1536049667051, 36.07987454208884, 84.1777933671491, 98.23241735203955, 47.63288040066044, 80.71854172439745, 28.14671261076881, 11.821354625542268, 68.53984597707814, 9.88490933207552, 88.22589101367375, 43.84771815070678, 35.62218186900509, 46.32224791251382, 92.07519545660251, 70.05476390446648, 22.827300244601233, 62.087347132448066, 33.601305495566095, 19.308883745797424, 11.701303446541477, 83.01677120881065, 83.9496530636368, 22.22462301521079, 96.2388780373589, 33.66035002684179, 44.248649421184524, 90.8548626744323, 23.716511568206013, 39.86542818149946, 42.09385512962328, 49.888598498934954, 46.060472002792075, 3.4691061104627385, 80.41972056922175, 70.14403654830865, 35.86525251033651, 48.69045480065276, 47.382345964572814, 42.492265164907074, 51.340781984908816, 16.34143339279891, 63.82545788920536, 53.93481159197717, 0.6801943830745394, 52.187519312140815, 11.424555914860356, 69.97594019695784, 24.41061091535558, 58.44984842428482, 29.869324094569627, 65.43015290490916, 77.77472898298744, 35.866416876593696, 0.6771035669648318, 53.01144522444511, 18.508670987091957, 73.15371101323962, 30.69584636088608, 64.9057992456065, 42.93610254634647, 1.486266036743722, 53.30935519252334, 60.36213958816712, 32.03457348686545, 11.746023496819069, 75.61550973995853, 24.13097468861186, 30.97431069703638, 22.85900397598204, 96.38182920230513, 74.84844372070478, 52.562550805024, 74.51532791134868, 94.9157431737984, 43.1066797018959, 36.486230885055804, 65.05719133744007, 34.49049756523308, 39.002867274585775, 11.154784131281758, 1.20199521951192, 55.10873322195297, 49.95726660381803, 69.35617271101474, 14.77557115973427, 1.8674992326038753, 33.56818620045738, 29.02845706279037, 56.596525334430616, 92.44052357359533, 46.971383517977294, 3.715252500163946, 23.58836421949807]]
    # 159
    #omega =  [[0.48352006425369143, 0.34580653490366675, 0.9892952728159965, 0.27097049986497135, 0.5908367034148865, 0.017717522821620646, 0.8655536727895918, -0.7491306995750289, -0.3721545249013052, 0.09554432582472017, -0.6412864835648013, -0.41922870698665626, 0.9755937685189604, 0.8966203238305537, 0.6988953956778607, -0.17086279968192608, 0.9470961738853718, 0.31123590190063677, -0.8545331723636547, -0.6747840059009953, -0.8657077039806835, -0.09812226070401153, 0.11833237517417006, 0.18256071030776533, 0.4238847634401006, -0.5635703227783195, -0.6056888756148116, 0.9605258161407639, 0.19201870189746195, 0.2122513040942866, 0.11120094067649733, 0.36359616391813265, 0.2716900034894376, -0.08428584571748954, 0.23293782859162393, 0.43752194960528, -0.16818123225123283, 0.45747707321792763, -0.15722202039065047, -0.10459762303341069, -0.4188891038873901, 0.21066889040819792, 0.8042373543061649, 0.5915475715559948, -0.48327618451282217, 0.02835341057755092, -0.292871242399225, -0.8280484997200817, -0.9651843809201917, -0.6641579312160382, 0.7204306241887437, 0.17997343223287454, 0.023456116374098723, -0.2084396848502703, -0.013465941415258698, 0.04049290978432518, 0.8200029437440022, 0.6862535178144553, 0.41709917728740553, 0.6439381802126227, 0.8510905340815873, 0.5974200922312312, 0.8484950649674106, -0.09976811682948727, 0.1600333211279703, 0.8152913814010267, -0.8744630655909831, 0.19017071721758483, -0.8060362319196914, -0.3275628973227809, -0.5092192624697325, 0.8871364020732027, -0.05586597761048018, 0.40867696453135305, -0.08373455231542892, -0.3055234264171298, 0.20417260016062766, -0.6615905707888605, 0.9015426854173332, 0.29316119992988177, -0.9257775958974939, 0.521616764403076, 0.9227855237544056, 0.7190700233207681, 0.8402228046540594, 0.934154409720755, 0.6672939647940488, -0.4304019213914332, -0.6988064387260264, 0.38837519927383113, 0.8652086014523874, -0.7028973792602122, -0.478133583838938, 0.7956353325031496, -0.38498180576091645, 0.4588476184279391, 0.91919128620385, 0.592466165348775, -0.1967961378571852, -0.4840487290421147]]
    #mu =  [[90.78593615258826, 98.93682103760374, 33.395254179645804, 48.97953949862321, 12.43238761749006, 15.10717770650778, 91.23388528875958, 41.745341073145184, 43.15231207449271, 43.27204894967514, 43.50732193735289, 91.65009469771381, 59.07974181195603, 32.257922795185145, 82.95897809215782, 8.872026018613488, 76.28434688006705, 51.5372213013593, 94.17682603469552, 55.45526047927033, 31.283661906516393, 50.072817545098715, 46.108155063851854, 71.27449837785407, 96.39144723386806, 70.36396702491852, 25.55158340959197, 42.19545574609812, 85.26542124084631, 62.392356639136004, 59.10224995181873, 22.726568234459023, 24.59360094597496, 23.279518986127524, 0.3800679899859216, 58.663271870601065, 54.58415977954569, 74.38178105972091, 46.646256170486936, 37.90270761074458, 18.351949735021144, 71.6582911399403, 55.98003487358177, 77.10290984035248, 10.332437091537905, 8.348557832459758, 45.77512719469033, 73.47632499255226, 4.5121032747915795, 50.66090965798533, 73.48009429019118, 24.769527909026046, 0.06395160197660843, 66.32040115566676, 37.28980119427582, 42.95590821347945, 44.77356518801842, 84.11854382053863, 48.985465143099546, 68.07136609918994, 35.95273314534383, 14.430512516576632, 21.586718331836195, 27.248624370339037, 3.1098203282023618, 20.106923798060716, 52.35738366262807, 24.80199647217869, 72.87489697566944, 43.60621933062162, 41.588070735288454, 47.59961710329472, 41.33614010192841, 2.317036952475837, 93.17667990435118, 1.4965850334980102, 16.3103775715026, 25.378422288930036, 34.02325083640348, 78.0677050610332, 80.32095447331254, 43.619305216874906, 25.462266924441547, 64.41793934460217, 82.63129472110626, 40.08640924706943, 28.915148136979717, 27.875272036719213, 2.571491618991606, 13.145170410392314, 96.38368891399037, 13.475673657125464, 3.128872442788788, 86.31658210734304, 27.175960945117104, 16.176800248183596, 14.258163810469382, 13.12840812859335, 92.35358453261749, 59.870339991271415]]
    # 182
    #omega = [[0.8268450961051192, -0.1677042512035014, 0.41665037164771657, -0.7283863068511005, -0.04879297674242977, 0.8256160730932385, 0.524362923379514, -0.027231556230615128, -0.638150206317396, -0.07443221864562877, 0.9302659047441699, -0.6003706442916694, 0.6833577247287166, 0.7339513577637362, -0.7257177396131074, 0.8278245671219999, -0.7412584510599058, 0.3930043533554761, -0.8845034354126222, -0.9321072920136786, -0.7484329181416236, 0.6613602081770913, 0.05418798525736657, -0.455909554431726, 0.24824577360518685, -0.5935283013834403, 0.9344093479060414, -0.8442160135753687, -0.2670651067538665, -0.9523203212171103, 0.7333318448179711, 0.7522511103109415, -0.5114156807454844, -0.3626784848184941, 0.7880410227830186, -0.6712603538260014, -0.9528637983159176, -0.8879773199332093, 0.8152758578264161, 0.7768912816725113, -0.9125059736957142, 0.020268096485684728, 0.9961470225343032, -0.47449186643580354, 0.5577819471798895, -0.18431352991212546, -0.29239940172917067, -0.9913981859249157, -0.18045294068732076, 0.7371860002962414, 0.4104219941468199, 0.9983848627856593, 0.6820377764987553, -0.9430306892630671, -0.8402853094343152, -0.6429986856602328, -0.2494386489547895, -0.3150650556308019, -0.20423008918708563, -0.06878594267947125, 0.03232673519613649, 0.27396787339134976, -0.29243471215712225, -0.13380968423099215, -0.014917891385786364, 0.9094132042235088, -0.15706549919826407, 0.12778894124531592, 0.2772001148596126, -0.3588261512169275, 0.9412195338548737, -0.8339725935347202, 0.5369451720336511, -0.07098348994128112, -0.783717021000079, -0.382718920054411, 0.4975744477034487, -0.7889512330298409, -0.05971962394375163, 0.2320250462185336, 0.9526266405312955, 0.54216185485551, 0.9377767739340919, 0.5255549612660142, -0.9172761123149173, 0.8159764965659444, -0.23932064100829442, -0.7505449317921375, -0.8253501806445682, 0.6976670912395098, 0.5351064621972861, -0.8789109637576162, 0.7453747944710287, 0.9453402306483754, 0.44864818801792605, 0.3022686906039769, -0.48367147096122176, -0.12882901710442551, 0.897509492915572, 0.13112694211813913]]
    #mu = [[61.16821975305691, 91.59524541494585, 55.52248244090148, 91.73594986915874, 65.32695230972303, 35.71103739815368, 1.7216187984598008, 6.8319988612181355, 50.665301716886916, 62.00198197679886, 90.2788728765582, 4.854059153246027, 18.402751068227865, 30.327893771757797, 1.5667780533389686, 63.1995695591278, 35.494781886835916, 66.3198880183008, 13.664959395288523, 92.54402478336901, 70.94154750283877, 14.711899792958116, 47.08902273079193, 16.258248631226692, 94.41375775731389, 75.25840786388488, 29.719111498664773, 44.82012907885118, 41.82134585284557, 48.09971355676893, 40.65989175508851, 13.359960809854766, 74.70504786320075, 78.91798836039989, 27.830053892048245, 59.9757669173244, 47.737584027870525, 79.36403478253443, 63.9077105799971, 2.52698351357451, 39.52948645608626, 27.960870267593563, 22.569146765231118, 46.09473926468036, 90.06922894361082, 31.05915857500422, 0.6136002874046698, 83.5689360403953, 95.44611334659635, 67.57461110975768, 52.180363064443604, 91.93418017893205, 62.26133674797705, 14.777544312842771, 60.71696685359038, 40.967135102480626, 58.210770200140715, 36.96937118557956, 70.87855136453514, 33.58898297017453, 87.53809187093002, 57.312500137801194, 0.3424257095658412, 27.77689285574274, 99.64353886724993, 27.50993820052301, 11.642551258454626, 33.102910491435686, 96.44500479512784, 76.89260282896404, 55.7229853960956, 73.27960010790619, 56.47935134622132, 94.05062109521786, 83.5053625541041, 38.588874551521926, 66.34262092834801, 82.25242113775558, 99.95364947533612, 69.78829085242606, 86.32590091846592, 79.34252344819025, 17.955457493091707, 33.97793786442096, 91.60390011225302, 74.88501114663926, 92.1897110561813, 6.474219836454931, 15.338591787689992, 98.28281283025872, 12.866646415962302, 5.250474216516188, 89.43081137399209, 99.72146295678256, 31.626440558815094, 25.322902215869693, 30.108712030847272, 34.639600448948215, 3.443071033542988, 64.4018737359893]]
    # 218
    #omega = [[0.9087503284923342, -0.3956368520131224, -0.9256792985155788, 0.993692079693226, -0.7472496571063967, -0.400342915614617, 0.08936961768271923, -0.5862629188909285, 0.5539216086018421, -0.33537444402764516, -0.7718914649604625, -0.06259708941054742, -0.7378583331361799, -0.4408920128856062, 0.7839543118258958, 0.07465539291075851, 0.42352856430653896, 0.45745263525802415, 0.7274101864059914, 0.5642027686925841, 0.5824526419517859, 0.4041635917737132, 0.22677276868545437, 0.08973746020211415, -0.8277938179475546, 0.7440776964871763, -0.2529351755673601, 0.8301221587578906, -0.08714487294658846, -0.17051336787791205, 0.5097234439125118, -0.5181933235530594, -0.4219415963233555, 0.13456334667181347, -0.8772525949699683, -0.8779149988330466, 0.1804237483026998, 0.7763514537916045, 0.4561198099772217, 0.2622924855640789, -0.6383928252237336, 0.06395757039429228, 0.30808405651449955, -0.819519913059773, 0.7669400873690846, 0.11122780056811155, -0.8870507197343493, -0.0859471908519367, 0.9452484318123777, -0.06736497403450259, 0.32783210798515494, -0.5910090497510088, 0.5259084990696397, -0.5237306292521071, -0.6134691049576082, -0.09864731340083877, -0.24343149048017954, -0.10969740570050579, 0.9123645035568206, 0.339593616306592, -0.34842543459443087, -0.9534553249726381, 0.11949238589236089, 0.06964359464282688, 0.3664207220314528, 0.6744345735712598, 0.2551314258506252, 0.9913617754847281, -0.6084581733192018, 0.12990061271067077, 0.5183274036652106, 0.6361240566786439, 0.7134682082500854, 0.7577692461171264, 0.16440660924637185, -0.26050632328727885, 0.7250213011887323, -0.8147969717367625, 0.7289555469520927, -0.57234134252572, 0.9853017416297063, 0.9886226096556294, -0.8947299549449454, 0.5617887058473046, -0.9272006419426682, 0.6899175772145285, 0.36613296351232294, -0.5314459239552878, -0.200974767017851, 0.09358589401459261, -0.48492943849642867, 0.9248396130942975, -0.9759417662233139, -0.9569392924000832, 0.9018070330925771, 0.14330373625201442, 0.14931938117767962, 0.10380878016282247, 0.004827370536506059, -0.9249676717035504]]
    #mu = [[46.123360216344665, 87.2410622201128, 86.19735232621092, 73.81528892133973, 69.05244383411251, 10.774423029085266, 96.33308189153594, 61.1280942763617, 20.413968987306742, 69.94820359331946, 10.901061221278264, 40.02385138332455, 71.11314558736112, 27.39198756214679, 19.681208922605286, 39.36878258239089, 43.28488927182102, 73.01343499715652, 33.81564888378522, 97.57768159869312, 66.75213375569186, 62.210058401121934, 58.91700853951952, 4.546328359340301, 3.751357408450562, 53.68538297939245, 10.01040787640134, 19.325100951847862, 44.23851691657513, 66.29345112254089, 4.815844050205498, 32.97494182489804, 76.6717258191427, 76.13984958591004, 59.88911097452372, 57.84670579656268, 16.678766902534846, 37.37049292118346, 82.83127940252878, 79.90824531964495, 3.931831592144941, 54.136290794045614, 20.968486797754238, 12.031276010426451, 63.3978208012342, 9.368987757608583, 66.56981289029252, 40.33767285149745, 58.50838139382054, 25.302173776575287, 20.8927072705249, 37.93981433526024, 88.56021607394247, 74.90463804806092, 63.94698852329079, 98.87212276097583, 56.90155804264697, 94.89959606040195, 78.03501278989667, 85.06126338511115, 18.64136932494579, 26.093131603722387, 93.85644100760281, 99.81348558252974, 39.7721755854175, 43.883734726914504, 71.74677619310168, 94.16753059065903, 74.05694189495102, 79.74710348967724, 88.58985453225108, 39.2249794745139, 26.03383130278958, 27.916070003726723, 87.07139915780915, 58.524008814752435, 65.89046525953682, 14.155019348888132, 76.8756649196895, 94.23230226018163, 72.69559543468813, 92.08308758371703, 87.59944393763885, 13.888545403907415, 34.73569140386872, 2.107099896192577, 18.243510424444086, 33.45776957183154, 3.2064204081519776, 91.53938518259183, 97.53874565473589, 73.81376578951982, 3.563354265342644, 0.9653238988880264, 62.76862490712571, 42.960947461252054, 58.608938248608965, 90.67007596912717, 4.823581457558001, 3.963416791383345]]
    #90
    #omega = [[0.5561200543947529, 0.0944459132427431, 0.14401901388934513, 0.7000589815818388, 0.3174272464837231, -0.6832731518630191, -0.9183163567734218, -0.5199918284247962, -0.8197955333346774, -0.3493097970746728, 0.5281538854034802, -0.021187079752836846, -0.858492948900861, 0.12181764933038353, -0.23015695095114586, -0.5390296556698637, -0.6813833285976199, -0.08798295863191696, -0.12647251599293874, 0.2068194684855027, 0.9393428697622377, 0.6811219544309233, -0.9817831357399611, 0.3771125205815806, -0.3309122344928177, -0.4769102728622192, 0.6998777076042615, 0.9684747664928994, -0.05574642423767395, 0.668449365898711, 0.31856935412077614, -0.06808515808429294, 0.03964791066907214, 0.12774025307260373, -0.4299194686514354, 0.4442843445045781, 0.7084003360226108, -0.9354241679050601, -0.42687805581967475, 0.041787566643376683, -0.8752968302166264, 0.617969261881488, -0.29139914299041547, -0.2686446978181296, -0.42837346296368684, -0.9748040353217595, 0.5952882102593042, 0.3926140151239783, -0.8004536251834862, 0.5187142897427566, -0.05869979659351943, 0.9673746822924296, -0.7448054545554159, 0.19898121407134295, -0.8060499294407497, 0.36032496710376405, -0.9517042142196244, 0.19300954897288625, 0.9100101393063524, 0.21712350523566504, -0.20257272978263496, 0.14166957836559946, -0.7372720054620205, 0.5622666092319364, -0.5403015097822186, 0.16798570976979832, -0.876587567643861, 0.4958495192908332, -0.14883363695556873, 0.20984579353739052, 0.46442598265160573, 0.3924454774987427, 0.39315731637199414, -0.9090986801174115, -0.9441456294484691, -0.39156545401139686, 0.4083863042895435, 0.34229258474983437, -0.01319133115418758, -0.11848379375466811, -0.06745008771277616, 0.5317005976575593, 0.14779159124286223, -0.3086674499022726, -0.3508627432971301, 0.8380672179191913, -0.8038740451729949, -0.6180215224654053, -0.22000918185294815, 0.6548041033641676, -0.8996213118123024, -0.046485698749559656, 0.11792056953413788, 0.9945998545366017, -0.7038581846312519, -0.16631652955969223, -0.6801205292690378, -0.15162443826140937, -0.9486761792672846, -0.361499180194059]]
    #mu = [[61.09827555996152, 56.814078831521265, 48.41836753855835, 39.086302452448905, 41.426072058506804, 87.22647464945979, 15.316699355394158, 53.26873095498765, 34.28908566569644, 8.27729491631577, 54.637536316549394, 54.75524244218812, 18.90215531744872, 4.718327714882986, 70.28073064954629, 29.596812567417974, 17.398642588359657, 87.9451306883481, 2.044487921782079, 69.73130289292054, 36.910836832616766, 86.29867824645181, 13.312274015193193, 4.653178992626595, 7.926009943770174, 58.68154777257119, 18.079178350508897, 53.424094588385486, 15.085253866178139, 6.508646527757445, 54.16360438210057, 91.2802954367661, 94.53814015422708, 88.68427750442235, 4.215876151379383, 25.179602734932615, 58.16298527649222, 67.00050372478363, 86.11496938838386, 9.497255190179299, 48.07309294106472, 58.30749540825229, 63.54869149793363, 91.43743448983007, 60.593526409594766, 62.86275810672555, 8.558221126277232, 90.76714005690262, 32.02313646017978, 22.92392190858279, 11.83645916009538, 99.04760832687198, 36.76232332754841, 16.90232510194294, 23.281496091943467, 9.710236065376321, 85.02403455691382, 6.369366082344275, 94.21136204810784, 36.22103441337745, 61.656030330774605, 27.180250824429898, 60.14189243029232, 24.121338879733955, 30.792876995654073, 88.49382670861641, 1.1338340659488244, 2.26855778698859, 6.678659109001295, 31.182817991703093, 19.664988792991977, 93.61833296117692, 20.12575294992136, 63.91051644595775, 39.97881406728618, 59.87107671866481, 23.160183028399416, 31.27067883452348, 43.42057145585074, 74.07163697634832, 24.60496193547258, 89.98627529875355, 59.97347559520584, 52.130048491127226, 86.61611172922335, 88.67327758773146, 30.11083647105587, 43.02698264578741, 13.855573465221571, 78.56423895093796, 60.2378514835897, 95.149590010319, 80.38839049442976, 74.42983815202273, 11.943987671209, 43.20878273666122, 64.30726902283514, 81.260476805515, 19.467401306981312, 10.884063692919998]]

    # Survival Threshold Write Up >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    # Write Up OK
    # omega = [[-0.45570349442317326, 0.9926566784100075, 0.888549026699764, 0.14928544806368338, -0.9996264233158934, -0.4385610485834899, -0.08038541123391796, -0.6260150923250922, -0.47235424832183703, 0.08534830008829819, 0.04489977686157176, 0.20925429233908543, 0.33254542065489434, 0.0840048379259668, -0.49418449970563194, 0.436757577051496, -0.10442494952037817, -0.4757616053069522, 0.21271766647905, -0.6493074483217449, -0.8353341996437704, -0.2056676731969611, -0.219114871126884, 0.3482756179142581, -0.7028479623473687, 0.06655864395029609, -0.2594633634515553, 0.71109331879931, 0.2747045193340545, 0.6193474305138627, -0.25427585792748153, 0.42264649771697194, -0.7670619926343019, 0.5194338631557813, 0.2955475346559173, 0.8362123688943861, 0.6573922690996239, -0.33227139325065447, -0.0417269736591952, 0.7474335021368288, 0.9721065523838919, 0.34145394392500794, -0.30158871229552675, 0.6383367973778622, -0.9658834930955591, -0.07201988587528474, 0.9859256779205499, -0.6456751377980265, 0.34596559619769796, 0.008703893399207852, -0.07077698031747182, 0.3687349388787877, -0.2128586823583034, -0.428467812969906, -0.7612417665593616, -0.753888511973025, -0.5823855135630227, 0.34720762289370155, 0.5656944867519293, 0.8403768391236615, -0.7055015387194046, 0.9167024270609578, -0.8377405059080654, 0.613368151113215, -0.20085672743369987, 0.5324877735051026, -0.5404093098424378, -0.4793030314186506, 0.020783169315794492, -0.339350185930549, 0.6054281152160448, 0.28770596557012973, -0.401032234196933, 0.38382727022568774, -0.5413820483877667, 0.758547095228723, -0.6448441963556208, 0.6560350213385717, 0.3469446743002187, 0.8625593080945051, 0.4194108163826673, -0.6339503647551701, -0.5989127516874513, 0.16883352766822046, 0.7962033825685597, 0.9763587212634572, 0.5538388523357383, -0.7229295694774867, 0.24767934527856994, -0.19051494465833296, 0.9618596596970299, -0.07639280592577236, 0.022044509842797044, -0.013989791881396485, -0.3704962409196475, 0.2672261767286863, -0.1534276130207337, -0.08114108850993196, -0.6215005516241177, 0.6759542263992802]]
    # mu = [[83.28825637081572, 19.91571692627123, 61.32525135771586, 15.672902946681667, 99.60109311987452, 24.675327758157138, 45.49766334978646, 98.01411351486603, 14.926773747336696, 26.197887508113617, 8.33039624249391, 48.66276674465474, 79.20562919962092, 31.3412946690634, 60.07521156883806, 88.51314965235781, 59.22999584861787, 10.866822137513054, 7.721663134157419, 55.212466048042465, 45.4806246853774, 85.04379254402356, 33.36264522633044, 40.3056685546258, 72.26374861765332, 89.23388249659632, 33.23888478740763, 55.56364226912627, 86.46948848547017, 60.894453999422424, 39.75123975664799, 13.596967208002864, 87.05914161816646, 49.06723745022505, 85.85137654356825, 69.49385579935682, 81.51659630137934, 66.41766460075132, 82.32530462853556, 71.40294877458498, 53.41365933231239, 72.79787798021528, 72.72213208784406, 11.622320416792142, 32.79578605848111, 77.4230920723422, 64.79175868066488, 46.11347113918881, 1.6882881330386512, 58.18262186923574, 84.53715699657215, 23.175810167449985, 33.93955774606593, 50.58356189329606, 63.62625059556708, 83.48616763999951, 92.53057854280155, 28.37362873012099, 50.22611401493394, 77.27937911974684, 9.343607616123572, 17.509062939619447, 23.933792264286257, 70.66324965971809, 9.465150222878272, 9.559033167143072, 3.9341833747434496, 11.000779992185016, 63.463144118865344, 55.13443058649155, 12.19131735262431, 40.1999622829841, 91.65020017010718, 87.98928652554477, 46.736551603767076, 67.66704553087106, 93.81008320866786, 66.1536314996456, 94.51162741284558, 69.82403754406121, 91.09060303974191, 49.9136245636434, 47.25073606399731, 60.08221965203116, 48.83208415621863, 55.86184279261995, 86.70469872121117, 4.548397985062458, 20.116473823336456, 95.11452004637383, 4.671406311441073, 48.48827517728724, 12.674309717595822, 60.89359727652629, 72.51607861597465, 1.4544709343304874, 69.00210031096566, 23.63269453291944, 96.73703677466968, 89.73427847911927]]
    # Write Up Species non living
    #omega = [[0.0595222849143906, 0.3003556638110849, -0.43853644136819514, -0.695282516599482, -0.5995859733945523, 0.2959743594387121, -0.03746401044516823, -0.3585718486316478, -0.26220105725259213, -0.6232237164522079, -0.45809166678436775, 0.6897389494362713, -0.663882738866401, 0.831855648785639, -0.7206929113070564, -0.9176201528116177, -0.7932529637967538, -0.9269626385022456, -0.5198423080135093, 0.6658829017970367, 0.711797708457687, 0.9993310411952732, 0.13554568126464495, -0.5287409490890458, 0.2996514191047137, -0.15098432711913445, -0.20323926220302035, -0.6409282655188662, -0.14533312623692707, -0.8819964635511961, 0.557014131478885, -0.6944334624803776, 0.8581608044783273, 0.5581860699456351, 0.33110851360019167, -0.8247760455218418, -0.5039468147203927, -0.4119418549056286, -0.17371852948233868, -0.13054776420980452, 0.711747942920665, 0.6502937177046493, -0.13939815040883508, 0.9611347467277598, 0.8655428773595626, -0.7774933871852512, 0.03260070681450267, 0.6870551157594096, 0.8940186470272009, 0.5860010250251209, -0.2968195977831196, 0.8153623355013431, 0.19219337971302264, 0.6024256427095882, -0.5967560381120247, -0.9129649118830743, 0.9003901660109466, -0.1372340324820185, -0.30182787415476664, -0.7260499673734162, -0.8867075910679649, -0.960418889285408, 0.9154601437561836, -0.3247665890536431, 0.5137416845305747, 0.1289831530609893, 0.534735950674698, -0.8934286264787019, 0.3249828741964713, -0.5225840510880191, -0.5578989751397609, 0.2504393378359602, 0.39485508974790684, -0.16586566863168817, 0.22960309370603693, 0.344873868909783, 0.6574505471872147, 0.3019848844124946, -0.09594394433365117, -0.59081355497861, -0.5885626283144172, -0.9481745379753856, -0.6854095889931984, -0.12282379705191548, -0.9673426833709022, -0.9048768648028249, 0.5522384440998924, -0.9439198582351813, -0.17078297616890858, -0.4227161128470083, 0.1496361597528042, -0.714069195992513, 0.1725263028569166, 0.710614867599334, 0.057445908963330794, -0.8900311735965765, -0.31745350819846996, -0.3576985595201352, -0.8797620543588065, -0.24659234705534772]]
    #mu = [[98.14249657114175, 93.50743005017955, 31.49614515977803, 35.94306287930203, 78.52410519147895, 27.12435480711558, 11.191675263257817, 11.879450565883786, 57.40151414702391, 64.49178727460885, 50.06130276928437, 10.03366068029219, 68.66390560469871, 99.72492157948113, 51.83589705969883, 24.294250807626927, 1.5985197305016463, 49.89443967597504, 65.4078861642513, 16.54286158996228, 79.52318894053127, 65.6488922306538, 57.543623924329225, 58.13880498913869, 15.199596952687944, 39.037137398687506, 72.23318030000179, 9.208493175427112, 50.47863469097086, 54.412397096219486, 77.59953485462006, 11.791506373536908, 58.800016440113346, 39.633573018111804, 13.022552776615514, 65.33032714275957, 62.7304930664471, 93.69335475851345, 76.9316029070103, 23.751844479694583, 53.24238875885432, 18.026373631116332, 35.64624023592413, 63.8093480296008, 7.948173430207072, 18.744641078718715, 48.59861146446305, 42.468423337912256, 63.63679870799089, 23.968981688023405, 68.74811696101264, 30.738303668284097, 3.1570209069105792, 81.32782198735924, 27.473375457791292, 7.365116016793372, 16.858045389006115, 2.475678162551609, 70.48896998426709, 95.71603769815738, 57.52066503926626, 39.58172448773413, 42.67299975214055, 47.460659423128305, 28.78945549564722, 34.78914611759215, 39.43182997431817, 6.982199385717747, 24.815397496539184, 70.43024015917787, 97.50578199293041, 46.46531947800915, 96.50866654060607, 16.568752174956536, 65.33892564815079, 21.577844889426345, 62.84011421135914, 17.259359913225225, 17.311567999358335, 45.36882071029276, 40.41430550170271, 16.089558853995058, 14.00386664526485, 78.65426630089077, 12.384077118158764, 18.704558331117926, 53.87473877309129, 34.82916483038547, 33.24476753632385, 4.372778387566489, 50.380044625665455, 96.43887799494277, 17.33937390394875, 24.63349151696984, 18.73538255647699, 25.07444786179972, 4.402824743399803, 51.680646656342745, 21.685122871239415, 97.77580669339994]]
    # RESULTS - JI OUT vs ST IN
    omega = [[-0.1877172759093515, -0.08724068025572973, -0.8369347287632944, 0.5009418660629583, 0.8386017298529436, -0.4164144390733211, -0.6549494114639807, 0.6124103836161656, -0.8718626941917615, -0.9961398013076199, -0.5673426358320821, -0.11628501353938181, -0.5662263854690495, -0.2639777036987123, -0.6003001162518109, 0.9330923351037221, 0.6892939284728239, 0.3274447870425683, -0.29216357797890247, -0.35910005518361165, -0.8165332771835174, -0.9153985278652073, -0.7390960530876034, -0.949603690362913, -0.755471568368113, -0.2935063528093138, -0.5564306397567518, 0.04967285214118955, -0.9847172694516988, -0.877269021149855, -0.5660151998212792, -0.632804738196191, -0.6091753507031854, 0.82043692122441, -0.9090696758871744, -0.9829623774508829, -0.8582811128899115, 0.16705739209749937, -0.43721344204753865, 0.3703723008783182, -0.4929755154749025, -0.7161074904551334, 0.5061636250283443, 0.36522613975563134, 0.5838525585073242, 0.32793081646022926, -0.53842927878691, -0.679166453917547, -0.17286954681943545, -0.9760853809184871, 0.3142940203505036, -0.604483987819076, -0.25543832614738937, -0.47124121674789454, 0.012825931709606886, -0.5020791701435712, 0.5933388345786865, -0.03869241288835701, 0.136330470226792, -0.27321609683816606, -0.7661633678619562, 0.7909873253713633, 0.5843304525094881, -0.46302678024699606, -0.15519431341504308, -0.11319837244926756, -0.07833751885057616, -0.6168516172053389, -0.6588936232513221, 0.8674193031625024, 0.6694925948356041, 0.6952680824099204, 0.8588607426388584, -0.8038131999929343, 0.971487846831385, -0.23481355192278186, 0.5882202506260048, 0.949356802422654, 0.021679740733828057, 0.22942318169844933, -0.28533409972158985, -0.48153753861883786, -0.7917747372969475, 0.5708826383092325, 0.2615762642553603, -0.8959420557671824, -0.053394030929259984, -0.8066736059234456, 0.6761459806306258, 0.28078020876849363, -0.5926000987434961, -0.14533174164280882, -0.8994905270539466, -0.37076426376894744, -0.6417566231208869, -0.5232786859240455, -0.02080856717568813, -0.8695239681236473, -0.390631906189679, -0.8486779001097169]]
    mu = [[99.55344082399326, 16.547441836598153, 64.01582725800753, 68.65549886408725, 21.63015325573774, 83.84859197255051, 88.1536049667051, 36.07987454208884, 84.1777933671491, 98.23241735203955, 47.63288040066044, 80.71854172439745, 28.14671261076881, 11.821354625542268, 68.53984597707814, 9.88490933207552, 88.22589101367375, 43.84771815070678, 35.62218186900509, 46.32224791251382, 92.07519545660251, 70.05476390446648, 22.827300244601233, 62.087347132448066, 33.601305495566095, 19.308883745797424, 11.701303446541477, 83.01677120881065, 83.9496530636368, 22.22462301521079, 96.2388780373589, 33.66035002684179, 44.248649421184524, 90.8548626744323, 23.716511568206013, 39.86542818149946, 42.09385512962328, 49.888598498934954, 46.060472002792075, 3.4691061104627385, 80.41972056922175, 70.14403654830865, 35.86525251033651, 48.69045480065276, 47.382345964572814, 42.492265164907074, 51.340781984908816, 16.34143339279891, 63.82545788920536, 53.93481159197717, 0.6801943830745394, 52.187519312140815, 11.424555914860356, 69.97594019695784, 24.41061091535558, 58.44984842428482, 29.869324094569627, 65.43015290490916, 77.77472898298744, 35.866416876593696, 0.6771035669648318, 53.01144522444511, 18.508670987091957, 73.15371101323962, 30.69584636088608, 64.9057992456065, 42.93610254634647, 1.486266036743722, 53.30935519252334, 60.36213958816712, 32.03457348686545, 11.746023496819069, 75.61550973995853, 24.13097468861186, 30.97431069703638, 22.85900397598204, 96.38182920230513, 74.84844372070478, 52.562550805024, 74.51532791134868, 94.9157431737984, 43.1066797018959, 36.486230885055804, 65.05719133744007, 34.49049756523308, 39.002867274585775, 11.154784131281758, 1.20199521951192, 55.10873322195297, 49.95726660381803, 69.35617271101474, 14.77557115973427, 1.8674992326038753, 33.56818620045738, 29.02845706279037, 56.596525334430616, 92.44052357359533, 46.971383517977294, 3.715252500163946, 23.58836421949807]]


    #omega = [[0.7028809639906732, -0.1772091514037275, -0.5022750707740649, -0.1839283930101332, -0.573179687469179, -0.318523504945901, 0.30413821865327284, 0.04721478201458451, -0.49004990522995384, -0.9901353887100743, -0.9962422819697276, 0.5027542917212175, -0.9618118699262848, -0.7928917383683571, -0.02702868124579294, -0.9095725190225379, 0.9747470641928524, 0.6191234350155694, -0.29112650909255544, -0.5236332790394194, -0.6366900125530555, 0.35722759574639285, 0.43721823058853215, 0.9592746886641987, 0.5686812243625643, 0.9804585142478661, 0.2341045412148408, 0.46285386788226734, -0.5585416154902711, 0.01212751015140423, 0.12847071602438653, -0.6244511430766353, 0.9339738147957892, -0.8226807621014653, 0.7295867673012404, 0.17639755570437976, 0.22047086954709916, -0.15938402616898806, 0.43075611617477794, -0.2617269876194206, -0.15165831636015614, 0.07338445390080572, -0.9618530215141241, -0.395610115379051, 0.3812532804708937, -0.20232315808643153, -0.17874404398804766, 0.49894557215192314, -0.956674140516226, -0.8092590236053854, -0.6709311499649098, -0.16036194095401868, -0.5508806699696727, -0.1649714097078563, 0.7045636586948898, -0.027319879729604146, 0.4026253117955376, 0.1775493082266295, -0.5400964804660142, -0.8448081825019156, 0.5489389795162993, 0.49035250536380803, 0.8187037657352072, -0.8449921553712942, -0.12970787985505083, 0.41868472288954894, 0.3621661141351269, -0.3310855935884425, -0.33912679493185105, 0.14353678596739838, 0.036419948196754426, 0.1348853072105045, 0.831224313873234, 0.9462021869557455, 0.2300971511620058, 0.14430682431298547, -0.4958642004223879, -0.6233901784991154, 0.7278857400128496, 0.12978147103414406, 0.18889112034612054, -0.9094653448527845, -0.9866128923964586, -0.1245641678671805, 0.8351794046015812, -0.10549900467926943, -0.6288485413070777, 0.0741880417846632, -0.713221091784791, 0.9604831424854192, -0.06183853661747252, 0.4299576095696782, -0.19926841387633898, 0.10420359128516288, 0.174139571561849, 0.26640017952861106, -0.42445134222325653, 0.5032337097135968, 0.145851034601026, 0.8173483451584787]]
    #mu = [[80.74299233587666, 93.5378965976649, 10.442357422654913, 57.4125980415755, 2.6900318185959615, 65.0079767940026, 3.1695018824787424, 99.07943749361237, 95.14352033894653, 95.3905761345429, 2.827948072883979, 98.76260833009154, 54.07506651169696, 89.45656245312934, 91.88923397699847, 41.76025029034335, 56.414761402607795, 46.436050278977866, 37.496853793391615, 35.811655964306276, 26.597083761039908, 80.95536540531619, 27.55113886283106, 77.69687362612953, 75.31233676117589, 63.913588355893246, 48.96742338820174, 23.72110957687379, 1.1717537091021635, 94.15404577285385, 0.7124774563762704, 65.98862807638378, 10.252198776237897, 37.837795434272984, 9.567036513145366, 41.51553480332737, 55.23905906699075, 35.435591919211085, 87.28532523637601, 30.68815879561391, 82.29924868961325, 75.77277464255123, 58.673461463221365, 36.48404929286906, 95.3158199844202, 99.87398025953517, 25.948584989455924, 39.79944511813248, 74.49775141313818, 50.627714351469635, 2.597507513434638, 68.39765300086133, 29.689567783082282, 21.94470691531093, 37.27607963877093, 30.567639496176835, 87.78080687809955, 24.83682332506335, 81.94615990632207, 74.24416264528865, 98.47671255849522, 14.14010604180842, 45.20608600904534, 63.088617488257626, 0.20830008536402156, 23.519309768725417, 89.52238462644834, 33.34569235178243, 99.13524757044755, 40.14874380188807, 54.62058472134517, 60.691269576440654, 79.71185658177234, 99.96791311137756, 32.44832629319998, 72.71472996111216, 20.36904543494329, 32.12244788112546, 71.92141767195601, 89.7536131380911, 12.092164739612166, 31.922795916498792, 73.17438351571633, 27.76677217387672, 8.48164571815212, 91.78413911806793, 38.684544088115345, 70.66759051842355, 81.45904210444537, 38.394326951177796, 56.2409775252245, 98.4491321724531, 2.5136419711863645, 97.31579505804064, 37.20317381700997, 97.62229262211449, 46.37237645459788, 24.147839627295586, 15.552682683569419, 99.37017949594966]]

    #64
    #[[0.5862667247606381, 0.5012087713875462, 0.17291707610794393, 0.08407121611889368, 0.31368895135292907, -0.3915319746297119, 0.046412971983357476, 0.7603935430296367, -0.12597175047731612, 0.09017174576720066, -0.4701435785874788, 0.10306288449814427, 0.2812168019214336, 0.6318405613486344, 0.8027750956627369, 0.2430131423917692, 0.37323288496024465, -0.13373611547369402, -0.7321119637568902, 0.06981624774965445, 0.39775873746278934, 0.15379837907271376, 0.40338220064666297, 0.869491987424253, 0.2341019535639144, -0.6492282085012975, 0.7927658857121851, -0.9373124255485057, 0.8855573002781105, 0.9678720531265446, 0.271244453952765, 0.24479456344345807, 0.9447629295240632, 0.04792752205547868, -0.06993388738242001, -0.24103797630844803, -0.207191257162201, -0.5861778552085377, 0.5220839191634643, 0.7497218208432406, -0.295555280774908, 0.02913150138164977, 0.3681833038774489, -0.12534036183482566, -0.9397775908612305, 0.5082762112303394, -0.32415406550754033, 0.6175510451936412, 0.8297701494490592, 0.05952507191404943, -0.6962005355488277, -0.6698205452585857, 0.6479772081552064, -0.1444412050692141, 0.06259824139617143, -0.868208817543695, -0.6067093718902778, -0.68855059433151, 0.02355720151846441, 0.11317937496177621, 0.40918153781287026, -0.8237448240742091, -0.9694267468832767, 0.02914229707096605, 0.8665959395368752, 0.2729680580441345, -0.052931076381026454, -0.41160207584822106, 0.974497923297529, -0.4889918376693829, -0.003707386526937473, 0.5340986010680158, 0.49257367262019014, -0.6353907856153478, -0.941336897281918, -0.8624088463719943, 0.4034725028290804, -0.26211470718140784, -0.3129432455015193, -0.0029575805031563096, 0.9317960577357376, -0.3951593732891525, 0.20416580114283356, -0.9364169443809485, 0.922548371920717, 0.6958874812167899, 0.9640430478250133, 0.741857075051539, 0.5690926304571042, 0.18532551124828922, -0.29198209459055025, -0.24914692253497428, 0.6857688982717887, -0.5458729362592549, 0.8943472722138006, -0.219909939252394, -0.19162741799314809, 0.009127354716620628, 0.1678953618084169, -0.4896335336361579]]
    #[[77.85005528047579, 52.30198214666145, 59.735996564619, 84.97804399881423, 93.12483409848994, 21.71095484444896, 85.75910730988923, 83.14511633242745, 54.620485807786935, 28.470978031957948, 80.428854917545, 63.87004329649882, 92.74071593306465, 67.51875511217149, 89.20535651085088, 33.65441598921819, 41.524291152250925, 63.62988005316219, 40.12369147227487, 97.7025683412075, 6.725637106002857, 10.195436880846131, 35.572640529068686, 47.69206765479611, 10.400490323940915, 31.953170175844747, 11.512171783003755, 24.586874649983613, 21.67703038328852, 21.002609247326497, 7.630574891729902, 95.3314710269658, 21.934239145535017, 47.00118533229676, 85.97198365968161, 94.45949446016468, 70.41259472309125, 32.22541284827366, 39.40229949104905, 21.147391725724283, 52.82188987311155, 70.7274252371483, 71.1783834836266, 79.62249133544339, 83.64082900438916, 56.92442366322291, 68.10065606874848, 68.38201882419371, 43.34784988706005, 70.27399940472199, 24.455818836723743, 40.64896543042581, 7.123096911956262, 67.5265511054102, 81.32244863494013, 27.947917724208015, 58.01124932793107, 0.7087475042667157, 34.92832718562527, 69.6218970768002, 59.71391686115306, 18.4316785580805, 41.205830632431116, 54.44926808119851, 98.34348182867878, 39.70626430205423, 73.88834837013322, 49.820497601445325, 10.235230075354307, 80.24931760496806, 10.332263989547608, 40.49141205528749, 18.575968574595557, 76.77700721414946, 70.12595700794886, 79.28119757639077, 51.80404284909282, 71.79831899809253, 64.84799573090471, 18.959810061909245, 30.202121411503015, 69.87879583295974, 3.4394900969141884, 2.3017220947517125, 98.11188922063594, 60.159726503216426, 80.74459496211702, 3.9795688532441975, 50.00086499114595, 6.07845403472147, 33.526381391248336, 70.03924449488586, 82.99861925590537, 15.792302253879708, 39.24989576783883, 97.04532133044134, 93.81859443364105, 19.727513404645137, 15.467944420747237, 24.134227227278448]]



    ji_alives_at_start = [0 for _ in range(SPECIES_K)]
    ji_alives_at_end   = [0 for _ in range(SPECIES_K)]
    st_alives_at_start = [0 for _ in range(SPECIES_K)]
    st_alives_at_end   = [0 for _ in range(SPECIES_K)]

    system_state = np.zeros(SPECIES_K+ENV_VARS)

    Eg = ENV_START[0]
    #Eg = random.uniform(0, RANGE_R)

    for s_i in range(SPECIES_K):
        a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
        system_state[s_i] = a_star
        if(a_star > 0):
            ji_alives_at_start[s_i] = 1


    for _ in range(ENV_VARS):
        system_state[SPECIES_K+_] = ENV_START[_]

    ENV_VAR_ALIVE_ZERO_START = ENV_START[0]
    ENV_VAR_ALIVE_ONE_START = ENV_START[0]

    ALIVE_THRESHOLD=0
    results = [[] for _ in range(SPECIES_K+ENV_VARS)]
    times_steps=[]

    for step in np.arange(TIME_START, TIME_END, TIME_STEP):
        times_steps.append(step)
        for _ in range(SPECIES_K+ENV_VARS):
            results[_].append(system_state[_])
        k1 = TIME_STEP * rates_of_change_system_state(system_state)
        k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
        k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
        k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
        system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
    ENV_VAR_ALIVE_ZERO_END = system_state[SPECIES_K+0]
    results_nt = results

    #================
    #================
    #================
    #================
    #================
    plot_gaussian_trunk()
    plot_temps()
    ALIVE_THRESHOLD=0.2
    plot_alphas_truncated(1)
    #plot_stable_points()
    #plot_stable_points_t()


    results = [[] for _ in range(SPECIES_K+ENV_VARS)]
    times_steps=[]
    system_state = np.zeros(SPECIES_K+ENV_VARS)
    Eg = ENV_START[0]

    for s_i in range(SPECIES_K):
        a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
        if a_star < ALIVE_THRESHOLD:
            a_star = 0
        system_state[s_i] = a_star

        if(a_star > 0.00001):
            st_alives_at_start[s_i] = 1

    for _ in range(ENV_VARS):
        system_state[SPECIES_K+_] = ENV_START[_]

    for step in np.arange(TIME_START, TIME_END, TIME_STEP):
        times_steps.append(step)
        for _ in range(SPECIES_K+ENV_VARS):
            results[_].append(system_state[_])
        k1 = TIME_STEP * rates_of_change_system_state(system_state)
        k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
        k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
        k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
        system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
    ENV_VAR_ALIVE_ONE_END = system_state[SPECIES_K+0]

    print("[JI + ST Simulations Completed]")

    ji_final_results = results_nt

    for s_i in range(SPECIES_K):
        if(ji_final_results[s_i][-1] > 0):
            ji_alives_at_end[s_i] = 1

    #print(results[-1])
    st_final_results = results
    for s_i in range(SPECIES_K):
        if(st_final_results[s_i][-1] > 0.00001):
            st_alives_at_end[s_i] = 1

    #print(ji_alives_at_start)
    #print(ji_alives_at_end)
    #print(st_alives_at_start)
    #print(st_alives_at_end)

    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    ji_alive_start_till_end = []
    ji_alive_only_start = []
    ji_not_alive_start_alive_end = []

    st_alive_start_till_end = []
    st_alive_only_start = []
    st_not_alive_start_alive_end = []

    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        if(ji_alives_at_start[y] == 1 and ji_alives_at_end[y]==1): # alive start and made it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                data.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
            ji_alive_start_till_end.append(data)
    for y in range(SPECIES_K):
        if(ji_alives_at_start[y] == 1 and ji_alives_at_end[y]==0): # alive start did not make it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                data.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
            ji_alive_only_start.append(data)
    for y in range(SPECIES_K):
        if(ji_alives_at_start[y] == 0 and ji_alives_at_end[y]==1): # not alive but alive at end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                data.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
            ji_not_alive_start_alive_end.append(data)




    for y in range(SPECIES_K):
        if(st_alives_at_start[y] == 1 and st_alives_at_end[y]==1): # alive start and made it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                aliveness = ((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
                if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                    data.append(0)
                else:
                    data.append(aliveness)
            st_alive_start_till_end.append(data)
    for y in range(SPECIES_K):
        if(st_alives_at_start[y] == 1 and st_alives_at_end[y]==0): # alive start did not make it to end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                aliveness = ((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
                if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                    data.append(0)
                else:
                    data.append(aliveness)
            st_alive_only_start.append(data)
    for y in range(SPECIES_K):
        if(st_alives_at_start[y] == 0 and st_alives_at_end[y]==1): # not alive but alive at end
            data = []
            for x in np.arange (-25, RANGE_R+25, step):
                aliveness = ((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
                if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                    data.append(0)
                else:
                    data.append(aliveness)
            st_not_alive_start_alive_end.append(data)



    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))
    #fig.suptitle('Abundance for 20 species', fontsize=30)
    #fig.set_size_inches(3, 1.5)

    #ax1.set_title('JI Model', fontsize=35)
    ax1.set_xlabel('Temperature', fontsize=30)
    ax1.set_ylabel('Abundance', fontsize=30)
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(23)

    for item in ji_alive_start_till_end:
        ax1.plot(temperatures,item, 'b', label='Alive from start till end')
    for item in ji_alive_only_start:
        ax1.plot(temperatures,item, 'r', label='Alive at start but not alive at end')
    for item in ji_not_alive_start_alive_end:
        ax1.plot(temperatures,item, 'g', label='Not alive at start but alive at end')

    #ax2.set_title('ST Model', fontsize=35)
    ax2.set_xlabel('Temperature', fontsize=30)
    ax2.set_ylabel('Abundance', fontsize=30)
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(23)

    for item in st_alive_start_till_end:
        ax2.plot(temperatures,item, 'b',label='Alive from start till end')
    for item in st_alive_only_start:
        ax2.plot(temperatures,item, 'r', label='Alive at start but not alive at end')
    for item in st_not_alive_start_alive_end:
        ax2.plot(temperatures,item, 'g', label='Not alive at start but alive at end')
    fig.tight_layout()
    #fig.legend()
    fig.show()


#if((results_nt[-1][-1] > 110 or results_nt[-1][-1] < -5) and (results[-1][-1] > 110 or results[-1][-1] < -5)):
    if(1):
        #or
       # ((results_nt[-1][-1] < 100 and results_nt[-1][-1] > 0) and (results[-1][-1] > 100 or results[-1][-1] < 0))):

    #print(omega)
    #print(mu)

    # GHOST NUMBERS

    #if((results[-1][-1] > 106 or results[-1][-1] < -6)):

        #print(omega)
        #print(mu)
        #print(Eg)

        #for line in results:
        #    print(line[-2])

        print("=================================================")

        fig = plt.figure(dpi=300, figsize=(20,10))
        #fig.suptitle('Species Aliveness ' + str(sim))
        #fig.suptitle('A simulation run with 100 biotic components', fontsize=20)

        gs = fig.add_gridspec(2,2)
        ax1 = fig.add_subplot(gs[0, 0])
        ax2 = fig.add_subplot(gs[0, 1])
        ax3 = fig.add_subplot(gs[1, :])

        SIZE = 17

        myList = results_nt[:-1]
        for item in myList:
            ax1.plot(times_steps,item)
        #ax1.set_title('JI Model', fontsize=20)
        ax1.set_xlabel('Time Steps', fontsize=19)
        ax1.set_ylabel('Abundance', fontsize=19)

        ax1.xaxis.set_minor_locator(AutoMinorLocator())
        ax1.yaxis.set_minor_locator(AutoMinorLocator())
        ax1.tick_params(which='both', width=1)
        ax1.tick_params(which='major', length=8)
        ax1.tick_params(which='minor', length=6)

        for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
            label.set_fontsize(SIZE)
        #ax1.set_ylim([0, 1])
        myList = results[:-1]
        for item in myList:
            ax2.plot(times_steps,item)
        #ax2.set_title('ST Model', fontsize=20)
        ax2.set_xlabel('Time Steps', fontsize=19)
        ax2.set_ylabel('Abundance', fontsize=19)

        ax2.xaxis.set_minor_locator(AutoMinorLocator())
        ax2.yaxis.set_minor_locator(AutoMinorLocator())
        ax2.tick_params(which='both', width=1)
        ax2.tick_params(which='major', length=8)
        ax2.tick_params(which='minor', length=6)

        for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
            label.set_fontsize(SIZE)
        #ax2.set_ylim([0, 1])
        #ax3.set_title('System Temperature',fontsize=20)
        ax3.set_xlabel('Time Steps', fontsize=19)
        ax3.set_ylabel('Temperature', fontsize=19)

        ax3.xaxis.set_minor_locator(AutoMinorLocator())
        ax3.yaxis.set_minor_locator(AutoMinorLocator())
        ax3.tick_params(which='both', width=1)
        ax3.tick_params(which='major', length=8)
        ax3.tick_params(which='minor', length=6)


        ax3.plot(times_steps,results_nt[-1], "b", label = "GAF Model")
        ax3.plot(times_steps, results[-1],"k", label = "TGAF Model")
        for label in (ax3.get_xticklabels() + ax3.get_yticklabels()):
            label.set_fontsize(SIZE)

        #ax3.set_ylim([0, 100])
        plt.subplots_adjust(hspace=0.1)
        ax3.legend(prop={'size': 15})
        fig.tight_layout()
        fig.show()

        ################################################################################################################
        # Abundance Start Higher then End Graphs
        # fig = plt.figure(dpi=300, figsize=(20,10))
        #
        # gs = fig.add_gridspec(1,2)
        # ax1 = fig.add_subplot(gs[0, 0])
        # ax2 = fig.add_subplot(gs[0, 1])
        #
        # myList = results_nt[:-1]
        # ji_abundance_total_start = 0
        # ji_abundance_total_end = 0
        #
        # for item in myList:
        #     ji_abundance_total_start += item[0]
        #     ji_abundance_total_end += item[-1]
        #
        #     ax1.scatter("Start",item[0])
        #     ax1.scatter("End",item[-1])
        #
        #
        # ax1.annotate(str(ji_abundance_total_start),
        #             xy=(0.1, 0.5),
        #             xycoords='axes fraction',
        #             xytext=(0.1, 0.5))
        # ax1.annotate(str(ji_abundance_total_end),
        #              xy=(0.5, 0.5),
        #              xycoords='axes fraction',
        #              xytext=(0.5, 0.5))
        #
        #
        # ax1.set_title('JI Model', fontsize=20)
        # ax1.set_xlabel('Time Steps', fontsize=19)
        # ax1.set_ylabel('Abundance', fontsize=19)
        # for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # myList = results[:-1]
        #
        # st_abundance_total_start = 0
        # st_abundance_total_end = 0
        #
        # for item in myList:
        #     st_abundance_total_start += item[0]
        #     st_abundance_total_end += item[-1]
        #
        #     ax2.scatter("Start",item[0])
        #     ax2.scatter("End",item[-1])
        #
        #
        # ax2.annotate(str(st_abundance_total_start),
        #              xy=(0.1, 0.5),
        #              xycoords='axes fraction',
        #              xytext=(0.1, 0.5))
        # ax2.annotate(str(st_abundance_total_end),
        #              xy=(0.5, 0.5),
        #              xycoords='axes fraction',
        #              xytext=(0.5, 0.5))
        #
        # ax2.set_title('ST Model', fontsize=20)
        # ax2.set_xlabel('Time Steps', fontsize=19)
        # ax2.set_ylabel('Abundance', fontsize=19)
        # for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # fig.tight_layout()
        # fig.show()

        # ################################################################################################################
        # #
        # temperatures=[]
        # for x in np.arange (-25, RANGE_R+25, step):
        #     temperatures.append(x)
        #
        # ji_close_by_abundances = []
        # for y in range(SPECIES_K):
        #     abundances_species_near_start = []
        #     for x in np.arange (-25, RANGE_R+25, step):
        #         abundances_species_near_start.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
        #
        #     vicinity = 0
        #     temp_index = 0
        #     for temp in temperatures:
        #         if((temp >=45 and temp <=55) and abundances_species_near_start[temp_index] >0):
        #             vicinity = 1
        #         temp_index+=1
        #     if(vicinity == 1):
        #         ji_close_by_abundances.append(abundances_species_near_start)
        #
        # st_close_by_abundances = []
        # for y in range(SPECIES_K):
        #     abundances_species_near_start = []
        #     for x in np.arange (-25, RANGE_R+25, step):
        #         a_star=((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))
        #         if a_star < ALIVE_THRESHOLD:
        #             abundances_species_near_start.append(0)
        #         else:
        #             abundances_species_near_start.append(a_star)
        #
        #     vicinity = 0
        #     temp_index = 0
        #     for temp in temperatures:
        #         if((temp >=45 and temp <=55) and abundances_species_near_start[temp_index] >0):
        #             vicinity = 1
        #         temp_index+=1
        #     if(vicinity == 1):
        #         st_close_by_abundances.append(abundances_species_near_start)
        #
        #
        # fig = plt.figure(dpi=300, figsize=(20,10))
        #
        # gs = fig.add_gridspec(1,2)
        # ax1 = fig.add_subplot(gs[0, 0])
        # ax2 = fig.add_subplot(gs[0, 1])
        #
        # for item in ji_close_by_abundances:
        #     ax1.plot(temperatures,item)
        #
        # ax1.set_title('JI Model', fontsize=20)
        # ax1.set_xlabel('Time Steps', fontsize=19)
        # ax1.set_ylabel('Abundance', fontsize=19)
        # for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # for item in st_close_by_abundances:
        #     ax2.plot(temperatures,item)
        #
        # ax2.set_title('ST Model', fontsize=20)
        # ax2.set_xlabel('Time Steps', fontsize=19)
        # ax2.set_ylabel('Abundance', fontsize=19)
        # for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # fig.tight_layout()
        # fig.show()


#------------------------------ Experiment Reset


    JI_Start_TEMP_Abundance=[]
    ST_Start_TEMP_Abundance=[]

    for start_temperature in np.arange (0,101, 5):
        print("Running for Start Temp : " + str(start_temperature))
        ji_start_abundance = 0
        ji_end_abundance = 0
        st_start_abundance = 0
        st_end_abundance = 0
        system_state = np.zeros(SPECIES_K+ENV_VARS)
        Eg = start_temperature

        for s_i in range(SPECIES_K):
            a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
            system_state[s_i] = a_star
            ji_start_abundance += a_star

            if(a_star > 0):
                ji_alives_at_start[s_i] = 1
        for _ in range(ENV_VARS):
            system_state[SPECIES_K+_] = start_temperature


        ENV_VAR_ALIVE_ZERO_START = ENV_START[0]
        ENV_VAR_ALIVE_ONE_START = ENV_START[0]

        ALIVE_THRESHOLD=0
        results = [[] for _ in range(SPECIES_K+ENV_VARS)]
        times_steps=[]

        for step in np.arange(TIME_START, TIME_END, TIME_STEP):
            times_steps.append(step)
            for _ in range(SPECIES_K+ENV_VARS):
                results[_].append(system_state[_])
            k1 = TIME_STEP * rates_of_change_system_state(system_state)
            k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
            k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
            k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
            system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
        ENV_VAR_ALIVE_ZERO_END = system_state[SPECIES_K+0]
        results_nt = results
        for _ in range(SPECIES_K):
            ji_end_abundance += results[_][-1]

        end_temperature = results[SPECIES_K][-1]

        JI_Start_TEMP_Abundance.append([start_temperature, end_temperature, ji_start_abundance, ji_end_abundance])

        ALIVE_THRESHOLD=0.2


        results = [[] for _ in range(SPECIES_K+ENV_VARS)]
        times_steps=[]
        system_state = np.zeros(SPECIES_K+ENV_VARS)
        Eg = start_temperature

        for s_i in range(SPECIES_K):
            a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
            if a_star < ALIVE_THRESHOLD:
                a_star = 0
            system_state[s_i] = a_star
            st_start_abundance+=a_star

            if(a_star > 0.00001):
                st_alives_at_start[s_i] = 1

        for _ in range(ENV_VARS):
            system_state[SPECIES_K+_] = start_temperature

        for step in np.arange(TIME_START, TIME_END, TIME_STEP):
            times_steps.append(step)
            for _ in range(SPECIES_K+ENV_VARS):
                results[_].append(system_state[_])
            k1 = TIME_STEP * rates_of_change_system_state(system_state)
            k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
            k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
            k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
            system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
        ENV_VAR_ALIVE_ONE_END = system_state[SPECIES_K+0]

        for _ in range(SPECIES_K):
            st_end_abundance += results[_][-1]

        end_temperature = results[SPECIES_K][-1]

        ST_Start_TEMP_Abundance.append([start_temperature,end_temperature, st_start_abundance, st_end_abundance])

        print("[JI + ST Simulations Completed] for : " + str(start_temperature))

        print("=================================================")

        # fig = plt.figure(dpi=300, figsize=(20,10))
        # #fig.suptitle('Species Aliveness ' + str(sim))
        # #fig.suptitle('A simulation run with 100 biotic components', fontsize=20)
        #
        # gs = fig.add_gridspec(2,2)
        # ax1 = fig.add_subplot(gs[0, 0])
        # ax2 = fig.add_subplot(gs[0, 1])
        # ax3 = fig.add_subplot(gs[1, :])
        #
        # SIZE = 17
        #
        # myList = results_nt[:-1]
        # for item in myList:
        #     ax1.plot(times_steps,item)
        # ax1.set_title('JI Model', fontsize=20)
        # ax1.set_xlabel('Time Steps', fontsize=19)
        # ax1.set_ylabel('Abundance', fontsize=19)
        # for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        # #ax1.set_ylim([0, 1])
        # myList = results[:-1]
        # for item in myList:
        #     ax2.plot(times_steps,item)
        # ax2.set_title('ST Model', fontsize=20)
        # ax2.set_xlabel('Time Steps', fontsize=19)
        # ax2.set_ylabel('Abundance', fontsize=19)
        # for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        # #ax2.set_ylim([0, 1])
        # ax3.set_title('The Environment Condition',fontsize=20)
        # ax3.set_xlabel('Time Steps', fontsize=19)
        # ax3.set_ylabel('Temperature', fontsize=19)
        # ax3.plot(times_steps,results_nt[-1], "b", label = "JI Model")
        # ax3.plot(times_steps, results[-1],"k", label = "ST Model")
        # for label in (ax3.get_xticklabels() + ax3.get_yticklabels()):
        #     label.set_fontsize(SIZE)
        #
        # #ax3.set_ylim([0, 100])
        # plt.subplots_adjust(hspace=0.1)
        # ax3.legend(prop={'size': 15})
        # fig.tight_layout()
        # fig.show()

        # ################################################################################################################
        #


    fig = plt.figure(dpi=300, figsize=(20,10))

    gs = fig.add_gridspec(1,2)
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[0, 1])

    #JI_Start_TEMP_Abundance=[]
    #ST_Start_TEMP_Abundance=[]

    start_abundance_line = []
    end_abundance_line = []
    temperature = []

    #for start_t_start_a_end_a in JI_Start_TEMP_Abundance:

    for start_t_start_a_end_a in JI_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])

    ax1.plot(temperature, start_abundance_line, 'k')
    ax1.plot(temperature, end_abundance_line, 'g')

    ax1.set_title('JI Model', fontsize=20)
    ax1.set_xlabel('Start Temp', fontsize=19)
    ax1.set_ylabel('Abundance', fontsize=19)
    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(SIZE)

    start_abundance_line = []
    end_abundance_line = []
    temperature = []

    #for start_t_start_a_end_a in ST_Start_TEMP_Abundance:

    for start_t_start_a_end_a in ST_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])

    ax2.plot(temperature, start_abundance_line, 'k')
    ax2.plot(temperature, end_abundance_line, 'g')

    ax2.set_title('ST Model', fontsize=20)
    ax2.set_xlabel('Start Temp', fontsize=19)
    ax2.set_ylabel('Abundance', fontsize=19)
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(SIZE)

    fig.tight_layout()
    fig.show()

    fig = plt.figure(dpi=300, figsize=(20,10))

    gs = gridspec.GridSpec(1,3, width_ratios=[1,1,0.1] )#, hspace=0.05,wspace=0.5, bottom=0.01, left=0.1, right=0.1)


    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[0, 1])
    ax3 = fig.add_subplot(gs[0, 2])



    ax1.set_ylim(-30, 150)
    ax2.set_ylim(-30, 150)

    #cbax = plt.subplot(gs[0,2]) # Place it where it should be.
    #cb = Colorbar(ax = cbax, orientation = 'vertical', ticklocation = 'right')
    #cb.set_label(r'Total Abundance !', labelpad=10)


    start_abundance_line = []
    end_abundance_line = []
    temperature = []
    temperature_end = []


    for start_t_start_a_end_a in JI_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        temperature_end.append(start_t_start_a_end_a[1])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])


    im = ax1.scatter(temperature,temperature_end,c = end_abundance_line, cmap = "viridis")
    #ax1.scatter(x=temperature,y=temperature_end)
    #fig.colorbar(im)

    #ax1.set_title('JI Model', fontsize=20)
    ax1.set_xlabel('Start Temperature', fontsize=19)
    ax1.set_ylabel('End Temperature', fontsize=19)
    ax1.xaxis.set_minor_locator(AutoMinorLocator())
    ax1.yaxis.set_minor_locator(AutoMinorLocator())
    ax1.tick_params(which='both', width=1)
    ax1.tick_params(which='major', length=8)
    ax1.tick_params(which='minor', length=6)

    for label in (ax1.get_xticklabels() + ax1.get_yticklabels()):
        label.set_fontsize(SIZE)

    start_abundance_line = []
    end_abundance_line = []
    temperature = []
    temperature_end = []

    for start_t_start_a_end_a in ST_Start_TEMP_Abundance:
        temperature.append(start_t_start_a_end_a[0])
        temperature_end.append(start_t_start_a_end_a[1])
        start_abundance_line.append(start_t_start_a_end_a[2])
        end_abundance_line.append(start_t_start_a_end_a[3])

    im = ax2.scatter(temperature,temperature_end,c = end_abundance_line, cmap = "viridis")

    #fig.colorbar(im, cax=ax3)

    cb = fig.colorbar(im, cax=ax3, ax=[ax1,ax2], label='Total Abundance', orientation = 'vertical')
    cb.ax.tick_params(labelsize=19)
    cb.set_label('Total Abundance',size = 19, labelpad=10, verticalalignment='baseline', rotation=270)
    #im.figure.axes[0].tick_params(axis="both", labelsize=21)
    #ax2.set_title('ST Model', fontsize=20)
    ax2.set_xlabel('Start Temperature', fontsize=19)

    ax2.xaxis.set_minor_locator(AutoMinorLocator())
    ax2.yaxis.set_minor_locator(AutoMinorLocator())
    ax2.tick_params(which='both', width=1)
    ax2.tick_params(which='major', length=8)
    ax2.tick_params(which='minor', length=6)

    #ax2.set_ylabel('End Temperature', fontsize=19)
    for label in (ax2.get_xticklabels() + ax2.get_yticklabels()):
        label.set_fontsize(SIZE)

    fig.tight_layout()
    fig.show()



#https://www.sc.eso.org/~bdias/pycoffee/codes/20160407/gridspec_demo.html
#https://www.anycodings.com/1questions/143556/how-to-have-one-colorbar-for-all-subplots