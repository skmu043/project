import random
import os
import shelve
import time
from multiprocessing import Process, Pool
import numpy as np
import time
from matplotlib.gridspec import GridSpec

import sys
import random
import math
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
from scipy import optimize
from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm
plt.rcParams["font.family"] = "Times New Roman"

#from numba import jit

# Generating ALL Parameters
SAMPLE_SIZE = 1
SAMPLE_STEP = 1
RUN_ID = int(time.time())

SPECIES_K   = 100                  # ----------- Number of Biotic Components
RANGE_R     = 100                  # ----------- Essential Range
TIME_START  = 0                     # ----------- Start of Simulation
TIME_END    = 200                   # ----------- Length of Simulation
TIME_STEP   = 1                   # ----------- Time Step3
ENV_VARS    = 1                     # ----------- Number of Environment Variables
NICHE = 5                           # ----------- Niche Size
LOCAL_SIZE  = 50                    # ----------- Local Population Size (%)
ALIVE_THRESHOLD = 0
ENV_START=[50]
omega = [[random.uniform(-1, 1) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]
mu = [[random.uniform(0, RANGE_R) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]

number_alive_global_start = 0
number_alive_start = 0

system_state = np.zeros(SPECIES_K+ENV_VARS)

Eg = ENV_START[0]

for s_i in range(SPECIES_K):

    a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))

    if a_star < ALIVE_THRESHOLD:
        a_star = 0

    system_state[s_i] = a_star

    if a_star >= ALIVE_THRESHOLD:
        number_alive_global_start +=1


number_alive_start = number_alive_global_start

# Environment Init
for _ in range(ENV_VARS):
    system_state[SPECIES_K+_] = ENV_START[_]

def rates_of_change_system_state(system_state):

    # Environment Vars Change >>> Abundance >>> Biotic Force Changes >>> Environment Vars Change\
    # Alphas_IN determine E_OUT via biotic Force
    # E_IN determine Alphas_OUT via Gaussian

    rate_of_change = system_state.copy()

    Eg = system_state[SPECIES_K+0]

    for s_i in range(SPECIES_K):

        a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))

        if a_star < ALIVE_THRESHOLD:
            a_star = 0

        rate_of_change[s_i] =  a_star - system_state[s_i]


        #da/dt = a* - a
    biotic_force_FG = 0

    for s_i in range(SPECIES_K):
        # Global
        biotic_force_FG += (system_state[s_i] * omega[0][s_i])

    rate_of_change[SPECIES_K+0] = (biotic_force_FG)

    #dE/dt = E* + F

    return(rate_of_change)



def plot_alphas():

    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-50, RANGE_R+50, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-50, RANGE_R+50, step):
            biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])
            #biotic_force[y].append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))))

    plt.figure(figsize=(30,30))
    plt.title('Biotic Force of 100 species with alive threshold : ' + str(ALIVE_THRESHOLD), fontsize=30)
    plt.xlabel('Temperature', fontsize=20)
    plt.ylabel('Biotic Force', fontsize=20)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    for _ in range(SPECIES_K):
        plt.plot(temperatures,biotic_force[_])

    plt.plot(temperatures,np.sum((np.array(biotic_force, dtype=float)), axis=0), lw=4)
    plt.legend(loc='upper right')
    plt.show()

def fYa(Xe, Ni, u):
    return (((math.e) ** ((-1) * (((abs(Xe-u)) ** 2) / (2*(Ni**2))))))

def fXe(Ya, Ni, u):
    return (math.sqrt(((math.log(Ya,math.e) / -1) * (2*(Ni**2))))) + u

def plot_inverse():

    Xe = 60 # spot on x axis - temperature
    Ya = 0  # abundance
    Ni = 5 # niche
    u = 50 # ideal growing temperature

    #Ya = ((math.e) ** ((-1) * (((abs(Xe-u)) ** 2) / (2*(Ni**2)))))
    #Xe = (math.sqrt(((math.log(Ya,math.e) / -1) * (2*(Ni**2))))) + u
    #Xe = np.linspace(-50,150,1000)


    f2 = np.vectorize(fYa)
    x = np.arange(-5, 105, 0.001)
    plt.plot(x, f2(x, Ni, u))
    plt.show()

    f2 = np.vectorize(fXe)
    x = np.arange(0.00001, 1, 0.0001)
    plt.plot(f2(x, Ni, u), x)
    plt.show()


    print(fYa(58.97061288997051, Ni, u))
    print(fXe(1, Ni, u))
    print(fXe(0.2, Ni, u))

#plot_inverse()


def fYaI(Xe, Ni, u, T):

    abundance = ((math.e) ** ((-1) * (((abs(Xe-u)) ** 2) / (2*(Ni**2)))))

    if(abundance <= T):
        abundance = 0

    return(abundance)

def fXe(Ya, Ni, u):
    return (u + (math.sqrt(((-1 * math.log(Ya,math.e)) * (2*(Ni**2))))))

def fXe_negative(Ya, Ni, u):
    return (u - (math.sqrt(((-1 * math.log(Ya,math.e)) * (2*(Ni**2))))))

def fYaIx(Xe, Ni, u, NRange):

    abundance = ((math.e) ** ((-1) * (((abs(Xe-u)) ** 2) / (2*(Ni**2)))))

    if((Xe >= u + NRange) or (Xe <= u - NRange)):
        abundance = 0

    return(abundance)

def plot_inverse_case():

    Ni = 5 # niche
    u = 50 # ideal growing temperature
    ST = 0.2

    #print(fYaI(45, Ni, u, ST))

    #f2 = np.vectorize(fYaI)
    #x = np.arange(-5, 105, 0.001)
    #plt.plot(x, f2(x, Ni, u, ST))
    #plt.show()

    alpha = []
    temps = []

    for x in np.arange(-5, 105, 0.001):
        temps.append(x)
        alpha.append(fYaI(x, Ni, u, ST))

    plt.title("ST Model")
    plt.xlabel('Temperature')
    plt.ylabel('Abundance')
    plt.axhline(y=0.2, color='r', linestyle='-', label='survival threshold')
    plt.legend(prop={'size': 10})
    plt.plot(temps,alpha)
    plt.tight_layout()
    plt.show()

    Ni = 20

    alpha = []
    temps = []

    for x in np.arange(-5, 105, 0.001):
        temps.append(x)
        alpha.append(fYaI(x, Ni, u, ST))

    plt.title("NW Model")
    plt.xlabel('Temperature')
    plt.ylabel('Abundance')
    plt.axhline(y=0.2, color='r', linestyle='--', label='survival threshold 0.2')
    plt.plot(temps,alpha,'--', color="#FF7F0E", label='NW model 0.2')

    #plt.tight_layout()
    #plt.show()

    #print(fXe(0.2, 5, u))

    NRange = (fXe(0.2, 5, u) - u)

    #print("NRANGE")
    #print(NRange)

    alpha = []
    temps = []


    for x in np.arange(-5, 105, 0.001):
        temps.append(x)
        alpha.append(fYaIx(x, Ni, u, NRange))

    plt.axhline(y=fYaI(fXe(0.2, 5, u), 20, u, 0), color='r', linestyle='-', label='survival threshold 0.9')
    #plt.annotate('truncation : '+str(fYaI(fXe(0.2, 5, u), 20, u, 0)), xy =(0.5, 1), xytext =(0.5, 0.5))
    print("Truncation : " + str(fYaI(fXe(0.2, 5, u), 20, u, 0)))

    plt.plot(temps,alpha, label='NW Model 0.9')

    handles, labels = plt.gca().get_legend_handles_labels()

    #specify order of items in legend
    order = [1,0]

    #add legend to plot
    plt.legend([handles[idx] for idx in order],[labels[idx] for idx in order])
    plt.legend(prop={'size': 10}, loc="center right", bbox_to_anchor=(1, 0.7))

    plt.tight_layout()
    plt.show()


    #print("Truncation : " , str(fYaI(fXe(0.2, 5, u), 20, u, 0)))

    #print(fXe(0.5, 20, u))
    #print(fXe_negative(0.5, 20, u))

    #print("Verification : ")

    #print(fYaI(fXe(0.5, 20, u), 20, u, 0))
    #print(fYaI(fXe_negative(0.5, 20, u), 20, u, 0))



truncation = 0.2


def plot_temps():

    temperatures = []
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    abundance_for_st = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                abundance_for_st[y].append(0)
            else:
                abundance_for_st[y].append(aliveness)

    abundance_for_st_x = [[] for _ in range(SPECIES_K)]

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            NRange = (fXe(0.2, 5, mu[0][y]) - mu[0][y])
            aliveness = fYaIx(x, 10, mu[0][y], NRange)
            abundance_for_st_x[y].append(aliveness)


    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))

    #fig.set_size_inches(3, 1.5)
    for _ in range(SPECIES_K-80):
        ax1.plot(temperatures,abundance_for_st[_])
    ax1.set_title('ST Model', fontsize=20)
    ax1.set_xlabel('Temperature', fontsize=20)
    ax1.set_ylabel('Abundance', fontsize=20)
    for _ in range(SPECIES_K-80):
        ax2.plot(temperatures,abundance_for_st_x[_])
    ax2.set_title('NW Model', fontsize=20)
    ax2.set_xlabel('Temperature', fontsize=20)
    ax2.set_ylabel('Abundance', fontsize=20)
    plt.tight_layout()
    fig.show()


def plot_alphas_truncated():


    temperatures = []
    biotic_force = [[] for _ in range(SPECIES_K)]
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
            if(aliveness <= truncation and aliveness >= (-1 * truncation)):
                biotic_force[y].append(0)
            else:
                biotic_force[y].append(aliveness * omega[0][y])


    plt.figure(figsize=(20,20), dpi=300)
    plt.title('Biotic Force for the ST Model', fontsize=30)
    plt.xlabel('Temperature', fontsize=30)
    plt.ylabel('Biotic Force', fontsize=30)
    plt.xticks(fontsize=25)
    plt.yticks(fontsize=25)
    for _ in range(SPECIES_K):
        plt.plot(temperatures,biotic_force[_])

    plt.plot(temperatures,np.sum((np.array(biotic_force, dtype=float)), axis=0), lw=4, label='Combined Biotic Force')
    plt.legend(prop={'size': 30}, loc = 'upper right')
    plt.tight_layout()
    plt.show()

    temperatures = []
    step = 0.01

    for x in np.arange (-25, RANGE_R+25, step):
        temperatures.append(x)


    abundance_for_st_x = [[] for _ in range(SPECIES_K)]

    for y in range(SPECIES_K):
        for x in np.arange (-25, RANGE_R+25, step):
            NRange = (fXe(0.2, 5, mu[0][y]) - mu[0][y])
            aliveness = fYaIx(x, 10, mu[0][y], NRange)
            abundance_for_st_x[y].append(aliveness * omega[0][y])

    plt.figure(figsize=(20,20), dpi=300)
    plt.title('Biotic force for the NW Model', fontsize=30)
    plt.xlabel('Temperature', fontsize=30)
    plt.ylabel('Biotic Force', fontsize=30)
    plt.xticks(fontsize=25)
    plt.yticks(fontsize=25)
    for _ in range(SPECIES_K):
        plt.plot(temperatures,abundance_for_st_x[_])

    plt.plot(temperatures,np.sum((np.array(abundance_for_st_x, dtype=float)), axis=0), lw=4, label='Combined Biotic Force')
    plt.legend(prop={'size': 30}, loc = 'upper right')
    plt.tight_layout()
    plt.show()



###################### ROOTS ########################################################
###################### ROOTS ########################################################


def f1(x):
    #return((x**3) + (2*(x**2)) - (2*x) - 5)
    #return(x**2 -1000)
    biotic_force = []
    for y in range(SPECIES_K):
        biotic_force.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])

    return(np.sum((np.array(biotic_force, dtype=float))))


    #print(xi," ",y[-1])

#TypeError: fsolve: there is a mismatch between the input and output shape of the 'func' argument 'f1'.Shape should be (2,) but it is (1,).

def plot_function():
    print("Plotting Sum  ... ")
    plt.figure(figsize=(20,10))
    plt.title('xy', fontsize=40)
    plt.xlabel('x', fontsize=40)
    plt.ylabel('y', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.axvline(x=0)
    plt.axhline(y=0)

    plt.plot(x,y, 'r-',label = 'roots')
    plt.show()


def plot_stable_points():

    x = []
    y = []

    X1 = -50
    Y1 = RANGE_R + 50

    for xi in np.arange(X1, Y1, 0.1):
        x.append(xi)
        y.append(f1(xi))

    print("Solving Roots ...")
    true_zeros = []

    for _ in range(RANGE_R):
        sol = optimize.root(f1, [_], jac=False, method='hybr')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)


    #print("Solving ...")
    true_zeros = []
    sign_change = ""

    if(y[0] < 0):
        sign_change = "neg"
    if(y[0] > 0):
        sign_change = "pos"
    if(y[0] == 0):
        print("ZERO DETECTED")

    #print(sign_change)

    for _ in range(RANGE_R):
        sol = optimize.root(f1, [_], method='df-sane')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)



    plt.figure(figsize=(20,10))
    plt.title('Roots', fontsize=40)
    plt.xlabel('temperature', fontsize=40)
    plt.ylabel('biotic force', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    for stable in true_zeros:
        plt.axvline(x=stable)
    plt.axvline(x=0)
    plt.axhline(y=0)
    plt.plot(x,y, 'r-',label = 'biotic force')
    #plt.legend(loc=7, prop={'size': 30})
    plt.show()




#print(np.unique(np.array(true_zeros)))

###################### ROOTS ########################################################
###################### ROOTS ########################################################


###################### ROOTS ########################################################
###################### ROOTS ########################################################

# TRUNCATION


def f1_t(x):
    #return((x**3) + (2*(x**2)) - (2*x) - 5)
    #return(x**2 -1000)
    biotic_force = []
    for y in range(SPECIES_K):
        aliveness = (math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2))))
        if(aliveness <= truncation and aliveness >= (-1 * truncation)):
            biotic_force.append(0 * omega[0][y])
        else:
            biotic_force.append(aliveness * omega[0][y])


        #biotic_force.append((math.e) ** ((-1) * (((abs(x-mu[0][y])) ** 2) / (2*(NICHE**2)))) * omega[0][y])

    return(np.sum((np.array(biotic_force, dtype=float))))


    #print(xi," ",y[-1])

#TypeError: fsolve: there is a mismatch between the input and output shape of the 'func' argument 'f1'.Shape should be (2,) but it is (1,).

def plot_function_t():
    print("Plotting Sum  ... ")
    plt.figure(figsize=(20,10))
    plt.title('xy', fontsize=40)
    plt.xlabel('x', fontsize=40)
    plt.ylabel('y', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    plt.axvline(x=0)
    plt.axhline(y=0)

    plt.plot(x,y, 'r-',label = 'roots')
    plt.show()



def plot_stable_points_t():

    x = []
    y = []

    X1 = -50
    Y1 = RANGE_R + 50

    for xi in np.arange(X1, Y1, 0.1):
        x.append(xi)
        y.append(f1_t(xi))


    print("Solving Roots Truncated ...")
    true_zeros = []

    for _ in range(RANGE_R):
        sol = optimize.root(f1_t, [_], jac=False, method='hybr')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)


    #print("Solving ...")
    true_zeros = []
    sign_change = ""

    if(y[0] < 0):
        sign_change = "neg"
    if(y[0] > 0):
        sign_change = "pos"
    if(y[0] == 0):
        print("ZERO DETECTED")

    #print(sign_change)

    for _ in range(RANGE_R):
        sol = optimize.root(f1_t, [_], method='df-sane')
        if(sol.x >=0 and sol.x <= RANGE_R):
            true_zeros.append(sol.x)

    plt.figure(figsize=(20,10))
    plt.title('Roots', fontsize=40)
    plt.xlabel('temperature', fontsize=40)
    plt.ylabel('biotic force', fontsize=40)
    plt.xticks(fontsize=20)
    plt.yticks(fontsize=20)
    for stable in true_zeros:
        plt.axvline(x=stable)
    plt.axvline(x=0)
    plt.axhline(y=0)
    plt.plot(x,y, 'r-',label = 'biotic force')
    #plt.legend(loc=7, prop={'size': 30})
    plt.show()




#print(np.unique(np.array(true_zeros)))

###################### ROOTS ########################################################


def plot_gaussian():

    ideal_temp = 50
    temp = []
    gaus = []
    for each_temp in np.arange(0,100,0.01):
        temp.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        gaus.append(result)

    plt.figure(figsize=(20,10))
    plt.title('The Gaussian Distribution', fontsize=40)
    plt.xlabel('Environment Condition (temperature)', fontsize=40)
    plt.ylabel('Alive Value', fontsize=40)
    plt.plot(temp,gaus, 'r-',label = 'The gaussian distribution')
    plt.show()

    print(gaus)

def gaus(each_temp):
    ideal_temp = 50
    temp = []
    gaus = []

    result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))

    if(result >= ALIVE_THRESHOLD):
        return(result)
    else:
        return(0)


def plot_gaussian_trunk():


    ideal_temp = 50

    temp = []
    gaus = []

    for each_temp in np.arange(0,100,0.01):
        temp.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        gaus.append(result)

    #plt.figure(figsize=(20,10))
    #plt.title('The Gaussian Distribution', fontsize=40)
    #plt.xlabel('Environment Condition (temperature)', fontsize=40)
    #plt.ylabel('Alive Value', fontsize=40)
    #plt.plot(temp,gaus, 'r-',label = 'The gaussian distribution')
    #plt.show()

    #plt.figure(figsize=(20,10))
    #plt.title('The Truncated Gaussian Distribution', fontsize=40)
    #plt.xlabel('Environment Condition (temperature)', fontsize=40)
    #plt.ylabel('Alive Value', fontsize=40)


    temp_t = []
    gaus_t = []
    alive_thresh = 0.2
    for each_temp in np.arange(0,100,0.01):
        temp_t.append(each_temp)
        result = (math.e) ** ((-1) * (((abs(each_temp-ideal_temp)) ** 2) / (2*(NICHE**2))))
        if (result > alive_thresh):
            gaus_t.append(result)
        else:
            gaus_t.append(0)

    #plt.axhline(y=ALIVE_THRESHOLD, color='g', linestyle='--')
    #plt.plot(temp_t,gaus,_t 'b-',label = 'The gaussian distribution')
    #plt.show()


    fig, (ax1, ax2) = plt.subplots(1, 2, dpi=300, figsize=(30,10))
    fig.suptitle('The survival threshold',fontsize=30)
    #fig.set_size_inches(3, 1.5)
    ax1.plot(temp, gaus)
    ax1.set_title('The Original Model', fontsize=20)
    ax1.set_xlabel('Temperature', fontsize=20)
    ax1.set_ylabel('Abundance', fontsize=20)
    ax2.plot(temp_t, gaus_t)
    ax2.set_title('Survival Threshold of 0.2', fontsize=20)
    ax2.set_xlabel('Temperature', fontsize=20)
    ax2.set_ylabel('Abundance', fontsize=20)

    ax2.hlines(y=0.2, xmin=0, xmax=100, linewidth=2, color='r', label='survival threshold')
    ax2.legend(prop={'size': 20})
    fig.show()


def rates_of_change_system_state_new_niche(system_state):

    # Environment Vars Change >>> Abundance >>> Biotic Force Changes >>> Environment Vars Change\
    # Alphas_IN determine E_OUT via biotic Force
    # E_IN determine Alphas_OUT via Gaussian

    rate_of_change = system_state.copy()

    Eg = system_state[SPECIES_K+0]


    for s_i in range(SPECIES_K):
        NRange = (fXe(0.2, 5, mu[0][s_i]) - mu[0][s_i])
        a_star = fYaIx(Eg, 10, mu[0][s_i], NRange)
        rate_of_change[s_i] =  a_star - system_state[s_i]


        #da/dt = a* - a
    biotic_force_FG = 0

    for s_i in range(SPECIES_K):
        # Global
        biotic_force_FG += (system_state[s_i] * omega[0][s_i])

    rate_of_change[SPECIES_K+0] = (biotic_force_FG)

    #dE/dt = E* + F

    return(rate_of_change)



if __name__ == '__main__':

    for sim in range(0, 1):

        #print(sim)
        omega = [[random.uniform(-1, 1) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]
        mu = [[random.uniform(0, RANGE_R) for _ in range(SPECIES_K)] for _ in range(ENV_VARS)]
        print(sim)
        print(omega)
        print(mu)
        #omega = [[-0.7606309166232983, -0.30656459261181834, 0.05129001309671177, 0.8222774249661196, -0.542971708146222, -0.6568450067100073, -0.2496095511396157, -0.2668532256929059, 0.8881170192804011, 0.909508485820103, -0.20755931188143273, -0.49525968173430934, 0.7146094503469982, 0.858618177871677, -0.2756183587753862, 0.11248630329649356, -0.598689670721779, 0.7053711716887376, 0.28139746988367964, -0.8512075764249425, -0.7516160270573229, -0.7500594499640028, -0.9903407710753105, -0.4071967617633194, 0.9326976323171305, 0.6696594573582442, 0.5615278795832817, 0.0018042188896614242, 0.14364585275926034, -0.1475146556195548, -0.9818272182803782, -0.9606105204746622, 0.5521104337156226, -0.985524212027862, -0.4501535347912844, 0.7347080500639207, -0.48687751725120787, -0.25010603033145484, -0.7260614787652673, 0.18522993202870142, 0.2613221089767306, -0.9597428598835354, 0.49120311384107884, 0.9133916790827177, -0.5270950170393662, -0.7091124684269821, -0.06438304709440201, -0.09317320894962888, -0.9492938163564253, -0.49360237913426785, 0.698926431716375, 0.5901097772618877, -0.5179239893046841, 0.3854529991583602, 0.13240463789438417, 0.5081645866440943, 0.03433347412512022, 0.5549361572895568, -0.981220705141056, 0.7476002079344164, 0.978180008981473, -0.2037893253909986, 0.9333536806382772, 0.6266215863870039, 0.9135455527390071, -0.16301660472149537, 0.0990767640653456, -0.33110844720401644, 0.9438425879580892, 0.9274388294755305, 0.29873647062917463, 0.5817388966871686, -0.0043540073620593756, 0.49597487507407156, 0.3443365526042439, 0.1430984387907408, -0.7502893720684516, 0.36144670690924396, 0.33977413082691155, -0.5918106904314755, 0.7921032441676021, 0.04712772558509215, 0.6501512170529951, 0.3983894753380126, 0.6520404217280338, 0.018104903738153988, 0.6881594438436913, -0.05544429899984227, 0.3951868524550115, 0.1254238110056256, 0.21741232043919156, 0.894811789615579, 0.25042489666576095, -0.27455410732584595, -0.495371342773433, -0.7295573673764788, -0.3164041835355933, -0.8861918776774904, 0.5161605204331021, -0.31997066940613283]]
        #mu = [[27.47072653065391, 72.23852775955119, 16.62261751218004, 28.609485834284744, 73.01993304058304, 30.24013979458361, 57.23888786373822, 51.75784515865691, 86.23481442996228, 79.38739736743509, 26.76485401953976, 79.86784620321485, 87.19163136649745, 37.38157055724236, 60.65223516627422, 90.99013728695155, 67.94046108980127, 0.09934338840221768, 27.46472652440971, 4.442104570899874, 74.4454301381862, 43.18903024166305, 65.41425056367859, 21.772941738257035, 79.0146426820896, 73.52028427485699, 73.69158268909696, 51.65306846474306, 34.24965413161989, 44.852275128847474, 41.14957583626929, 7.773295206297581, 91.56228670579549, 62.177459233333146, 16.563610645324257, 69.36913941271399, 94.92474590221734, 10.4565993024903, 71.34167763108775, 81.18561539523029, 10.659502267218034, 59.48452232340781, 1.434446943775869, 25.935072755774545, 91.80653805141665, 77.433236458811, 16.245524578050208, 17.473934910891032, 44.96212363168001, 84.61360175038361, 45.43519383163412, 95.25995748291835, 47.592461034809794, 14.306512034645813, 68.54317884776653, 35.06874402868364, 49.9896801520091, 78.45256083336089, 80.76923451949591, 39.67799061972166, 13.037849998417927, 73.96845064664885, 35.64790567442764, 92.3768308177704, 36.548940847278125, 10.856549812549531, 92.63888936119639, 86.3373773278121, 8.091107112224648, 92.94483288818788, 62.47513902342553, 75.93483106082417, 82.00606718997655, 33.098261036676426, 22.15594427323587, 90.88174468441669, 72.72053816890872, 46.53506895978241, 74.41126995089272, 45.19184314310557, 12.482157877347388, 77.55972523656204, 91.84338411933805, 9.307824392803244, 85.37223780735305, 87.572454037445, 98.97077903829003, 15.450437287172136, 85.90015532127354, 31.68767781601015, 5.6201832599341195, 32.18538022870965, 14.539033055396033, 99.89448344574492, 84.04861338729293, 42.76573523713013, 70.01653986983355, 24.304995167303634, 96.22304536772086, 90.72238883117949]]

        # For Write Up
        # 24
        #omega=[[-0.734639756686118, -0.5470016673778066, 0.09173929554991367, -0.5882118550831403, -0.570141918341037, 0.9057826390080188, 0.9146361294127952, -0.45089296522989986, 0.31370727532061227, 0.6778366099063631, -0.3241281714173425, 0.9725562728074746, 0.8897438034273155, 0.18197514069118048, 0.32312373947405293, 0.4758656822971392, -0.12926824456706476, -0.4445420243813518, -0.3164634415408554, 0.19502845710556382, -0.6892213971702732, -0.31163050167615225, 0.1474599771343721, 0.3381823971612745, -0.9559280210836982, -0.7292907664510688, -0.5392295968152814, -0.4342377945789011, 0.22362542532194118, -0.6108272512697279, 0.5163505411844445, 0.4030875872054782, 0.5873078195536632, -0.24191359494987807, 0.6513051531139242, 0.13544849697821393, 0.26787491838433475, 0.3257437257885625, 0.36951909289606344, -0.8553536384330531, -0.012503744321064492, 0.656480596189476, -0.5956879276737814, -0.37463292025120043, -0.8222712191976671, 0.6625795219555777, 0.06384553016088024, -0.9288876343421895, 0.5602679910151871, -0.00010800648398179291, 0.7734060804852845, -0.45449800140411445, -0.5519105899033956, 0.17175057738276567, -0.1540878071297087, 0.018130173077287592, -0.3738477762215693, -0.49731774391897354, -0.4337383611186463, 0.4759476749271325, -0.6511720612885394, 0.27656199512985946, 0.7553138628422977, -0.32296117095739363, -0.1446297782577619, -0.17146324622383968, -0.12172455597518761, -0.023778207902673376, 0.33327261231756933, -0.09916029491340872, -0.9801567133251885, -0.1965058610909911, 0.1882253264768512, 0.7737583627015439, -0.4061576285337847, -0.923062438242664, -0.226464105970404, -0.47551147553928574, 0.1459771274649948, 0.08549365737958436, -0.4724852740789842, -0.1402090262108413, -0.7610719999423616, -0.7092155220100529, 0.8710428728139765, -0.4757708606154072, -0.7321959251256309, 0.46732158536607304, 0.2976445456911878, 0.978932148259799, 0.7969433690037904, 0.608535514808694, -0.8376730715469694, -0.0461435296110817, -0.7905704583207824, 0.367946478842752, -0.38338133167067734, -0.08374828385006938, 0.9823146833587402, 0.07332865773476671]]
        #mu = [[14.009762667538638, 95.23660149978647, 48.79648242165767, 40.97565499026676, 41.08308546338469, 37.47810794329538, 56.690408467355134, 49.38423173327619, 15.091564029662162, 77.91271187298813, 82.54109633680709, 31.212328732997474, 32.27965107021888, 94.5522828246326, 36.03975887542753, 64.86896875588111, 25.401641246643457, 22.779920346144557, 92.62791928591697, 51.18405085328782, 8.739882658184472, 45.9829801013787, 74.70944119453004, 21.84499257003053, 59.7903838329711, 62.09623259191886, 71.70192537384669, 50.08076006330246, 13.279935222129758, 97.17141473784744, 12.264439334580912, 28.282015317476848, 43.58773083863097, 81.16908126478033, 9.603017840477612, 52.199482817938595, 24.10613806665389, 47.10778072258515, 23.55952833386581, 37.201564534925545, 75.27681188755268, 29.782256456469447, 89.63902536850748, 56.47030166107822, 95.92445033864215, 93.8155718063718, 25.893785964399896, 90.82611529847242, 36.76855248365825, 6.090352717188418, 45.57393461852983, 83.09061793220641, 54.20205871471835, 75.26634750452588, 63.176158114567606, 26.158359541466147, 34.88977408358673, 66.88288109191528, 77.61585581133357, 31.319854438043805, 90.19754694646758, 68.8080540745242, 59.22335880085691, 97.96208568764442, 83.81144291303086, 96.36189909192271, 86.09637794829813, 23.531989075747596, 1.2022990973239445, 26.136271032078618, 88.20694067044647, 37.49494081091148, 76.37517696589383, 48.74522835084498, 46.65558455417075, 28.253739195101513, 79.22859748254253, 86.58081420717996, 68.69147081846373, 95.30567352624955, 4.20713231140356, 41.12464198434248, 46.71537058582953, 18.242295835036103, 47.60408598714032, 66.90330398033561, 80.36159426827093, 20.796559624852083, 49.02106266975827, 66.5690085553664, 63.282403672351684, 2.5019049230768697, 49.67949243478203, 79.25840810738742, 99.93582063984438, 92.64028266455634, 33.435116743663116, 85.8170051756747, 78.11149260215419, 78.29891652117223]]
        # 74 - this is the one used for writeup
        omega=[[-0.17557316113626942, 0.21565977466449637, 0.8672120389719933, -0.9861149464943151, -0.4031356340271617, -0.7365286876019648, -0.756935861393117, -0.7006104412428911, -0.018856311835961037, -0.9617873985497791, 0.8707209009043155, -0.1965277255718756, 0.9009474171502727, -0.02435828224825687, 0.07503068026242121, 0.7074282823547802, -0.0974490595202826, 0.841046124494429, 0.5966781779398294, 0.5037923171175598, -0.20773492721764097, -0.9940346767891615, -0.48846377598873914, 0.24398849161491265, -0.11320013076633728, -0.015828503267104166, 0.7762861638192047, -0.2643547111176765, -0.9342930667936593, 0.49954414511142264, -0.12740881600553644, -0.4501186194998297, -0.43586345745155675, -0.9300868729401819, 0.6600144813000424, -0.6637595523040001, 0.16544909769737703, 0.11989179690670215, 0.5594919358126476, -0.8617426541450213, 0.5324188744593052, -0.40315697698096775, 0.5691803569278853, -0.6839515983799018, 0.2214913342820375, -0.04919664452955819, 0.43667240785107375, 0.7018540936421327, 0.06427169627296814, 0.26083259044688156, -0.3301408631503968, 0.2532730503828551, -0.07548527941004823, 0.07466724801793578, 0.653141341844814, 0.36936648282921203, -0.5395256894340987, 0.637226542504731, -0.4271473749842305, 0.7028755702306122, -0.5463604823874157, 0.5540403178242275, -0.16480407881436543, 0.5402334440120564, -0.7881158401857795, 0.8221374428147963, 0.1929461179970413, -0.07093007894196268, 0.6362196417387753, 0.1726563466520532, 0.8655360411729724, 0.4627941731633731, 0.6141556034703191, 0.8883446621298032, 0.8821671826864377, 0.3449503271751331, 0.2729240027613964, -0.31103952391313583, -0.4756545355782833, -0.4419949557347256, -0.31221462989100446, 0.09258396191526241, 0.7606763449972425, 0.8811344976567481, 0.30261916226420604, 0.6839507158937355, -0.29378471955358565, -0.6530380740653117, -0.4057951786603402, 0.5261683848149523, -0.4380012799471529, -0.735356172267277, 0.9820249084455104, 0.25282286883956284, -0.38542040775306496, 0.7745666998489051, 0.37256318750240935, 0.1500153761616716, 0.016953972449578858, -0.025338359464254667]]
        mu=[[1.5995243439174578, 91.64427685216594, 36.3355820012014, 23.025590398466157, 36.49631832771274, 1.915985419033861, 47.541476304844075, 88.82064597228295, 89.89987898606896, 69.55593350814212, 90.97414410649388, 45.73274839644941, 46.757561554265195, 79.99314514231544, 38.913460667591536, 30.01029184418855, 89.11610801291754, 11.150304629104657, 56.249667005755256, 65.72826800445692, 26.572901311112407, 91.51130151839368, 51.24622591021072, 3.8844943115396657, 93.99983984210895, 69.11596655193868, 60.51042612210074, 60.01958932278122, 37.937976969334805, 36.66390133170695, 28.914942412530586, 91.76741667940354, 36.64394885307332, 83.38972651369826, 38.191194289979094, 15.301583840853695, 71.30795986587906, 93.85040336045927, 32.65051136731877, 65.7318775870357, 36.763483303871446, 5.829531245717378, 55.61363626638419, 8.759704301493542, 47.1784019405811, 39.45139424658787, 64.49079054063164, 16.56053616012001, 4.633059903515591, 14.04031627146729, 58.5117077798955, 71.4107901086649, 22.136309467852612, 18.76331983519589, 59.16058799388295, 30.280568714905687, 42.32990287320779, 2.993472062160707, 7.152722078350838, 62.65268172059796, 61.140914435879665, 5.400514519873145, 84.74533908618326, 32.969292223179714, 56.90529085290312, 7.6031075683767435, 31.664532663073008, 86.23081251646487, 72.24560499758007, 46.50599202812745, 3.070894706222138, 50.689257558027755, 82.44796680900714, 67.12493899608731, 84.14161784761718, 12.662595377716357, 58.11626619206417, 92.46360810417019, 36.005755108827984, 30.775488367759262, 64.19272958521687, 95.2850144489027, 6.367721431309715, 73.26219554495756, 12.824730150776064, 26.780222258317654, 87.21215165270951, 54.31732296201839, 75.57729066050992, 12.960991083212026, 44.30016461599124, 47.0395308111202, 6.627169239312569, 93.43905541168029, 58.99820504790768, 64.96458649508865, 65.55235551769645, 42.89690846251386, 79.07901411041848, 52.62698922083011]]
        # 82
        #omega = [[-0.8979830921178891, 0.7243854656509732, 0.53535661850696, 0.4909320621594917, -0.1273071076437755, 0.5924962459530148, 0.6009367864202384, 0.27145969240690837, -0.39380639063004197, -0.4136597633040662, 0.03995772369986095, 0.6223222653883216, 0.9017281431163382, -0.44589316533334666, 0.029070580181441708, 0.163672252369522, 0.47060568887624843, 0.7814046943579451, -0.17357193668300774, 0.02312717288791788, -0.48739733764771853, -0.7244908482168901, 0.6572517189533067, 0.04300736543708261, -0.910305910119878, -0.6214750643854947, -0.8770790815483485, -0.48774369331136236, -0.15932662058515312, 0.20102667691928788, -0.874739451288093, 0.21790383735793895, 0.05480363355978346, -0.9482809180321361, 0.947540273437492, -0.6454555089629834, -0.12451541352143747, 0.2734037532039617, 0.4817204793596621, 0.39839811836425465, -0.01062535249477925, 0.9029052487863614, -0.7548462782008014, -0.5300048931093602, 0.3318173033998866, 0.8392321435837424, -0.8773486489473576, -0.38146211939590047, 0.731295754252187, -0.3507374258430509, -0.9459311471569094, -0.651146736556176, -0.6533329701829704, -0.836924501889097, 0.17000091624128832, 0.11028445425476496, 0.22703629271050185, 0.6526315631261803, -0.34025342170300665, 0.6715811762482293, 0.6388007850533517, 0.4107044247367473, 0.6140365482027907, -0.18033576805628293, 0.5397096151883187, -0.49122238212765934, 0.6860340659195678, -0.2847862968728607, 0.45074678656048794, -0.3368777747927123, -0.19486357564486645, 0.07726288646430413, -0.05450045800761316, 0.33034545014363514, 0.2354670981951703, 0.061216421310204217, 0.3895409634698801, 0.46239928938885444, 0.9197812305578845, -0.8645369359653756, 0.8229111394614554, 0.5501841865085584, 0.5144366222988621, -0.9370976119284518, 0.39746027855895827, 0.29041095875248946, -0.6694073560548666, 0.9332748684669361, -0.13595054601631595, 0.7104035203191632, 0.8950400532354665, -0.6249160124321838, -0.9515337991931405, 0.3237468393397176, 0.6351960470619684, -0.6137878027491477, 0.9521208001585928, 0.34966371216476055, 0.9031995222130222, 0.08454958107971233]]
        #mu = [[78.2853446719165, 21.347026813493784, 60.324449370606345, 61.48239631904063, 77.94429480214828, 41.97398118412631, 19.88210589806424, 23.41640501657193, 96.41895611344844, 8.397649839971756, 82.1248845659584, 85.47688116590744, 92.63676555537086, 41.51166673242537, 45.570038322703475, 84.25844398012056, 63.97250687697335, 36.62381104088192, 50.41441854674693, 79.91524546803853, 74.63391551831329, 32.566223085038835, 68.66213395317605, 96.4339749939971, 1.5953113418789022, 6.198780389940839, 50.04167768364467, 77.70237202978005, 5.05760850184922, 25.320083946009753, 64.99266255914615, 9.509965849521807, 40.021501262263335, 81.2350880881549, 22.673247680129784, 48.17701690368158, 65.21247393709129, 27.246244631669548, 88.5929687836608, 9.33965136206285, 20.452711128702905, 20.83605774840477, 90.44981007723412, 2.7658921217464605, 43.99710769902756, 24.904520179281974, 9.638756769188761, 88.74686250142051, 1.0842893520363606, 55.69988128059569, 15.151384258630717, 9.230381053201608, 26.134466499741706, 89.4755864488174, 5.195413729725451, 96.7903634481949, 77.97336213667758, 1.8556262104078458, 89.63976423035727, 40.39854955600423, 2.1504998745567883, 10.026998046767222, 88.3215827959145, 93.86595861414673, 38.855708298847546, 1.5035196053751032, 9.79112923001808, 62.1697119108359, 44.18014137361722, 80.43356901808794, 63.53805514687695, 59.27593160979615, 3.2047781277220078, 82.99233627765774, 88.96670198168061, 87.83640231599861, 26.32293707629152, 48.8027536161324, 12.371903196489942, 45.62919276819476, 63.92378159487474, 62.871008172644714, 74.49516200095115, 76.79952142499393, 63.81660896255713, 5.042625021822678, 89.10293539047417, 72.79931350953919, 10.603438203578575, 10.599178812728894, 84.08205028708703, 77.73427829289707, 74.12859647387322, 86.99599513647685, 1.018185790139714, 46.05777285298852, 98.76166077460284, 0.6719134006149874, 86.43309262538122, 30.620559368098967]]
        # 96
        #omega = [[-0.9259037915703345, -0.24700888630459672, 0.35766644993283037, 0.5395462191107296, 0.08352468100161059, 0.513653757216407, -0.17839000733507637, -0.9309356086389897, -0.43735005477724376, -0.17453746141335902, -0.38032914879333735, -0.15589865094499689, 0.29302074401794886, -0.11418374575446255, -0.2058604635186363, -0.3378904679492971, 0.7828964206761027, 0.22991125312134097, -0.9039471855686598, 0.7821171358373697, 0.4082641887266616, 0.12296545377354651, 0.6933718841682182, -0.6077279071752419, -0.542523969381242, -0.7934144269082379, -0.8578764570772262, 0.4967562004204298, -0.6864578933057379, 0.5632974119976768, 0.8841065806608144, -0.6839021790353774, 0.6813120011936606, -0.7711312521044285, -0.41670897583025024, 0.5470711472771013, 0.8561335890105148, 0.6625452905514777, -0.6668289068231223, -0.8932316419347779, 0.4356543497140035, -0.0667479613027564, 0.7276951904591902, -0.8769159969807923, 0.1988357773494731, -0.6362808793429799, -0.8060918813086446, 0.2237098088029088, -0.587230462076461, 0.2433689834833248, -0.7324457718517925, 0.5204022587547203, 0.1289165496965814, 0.04925784344431405, -0.3648679633858092, 0.01788576710783163, 0.9234476198660957, -0.8089540479497506, 0.31436108753210745, -0.5698496885240298, -0.5561306972394897, 0.6871369279584874, 0.7957598760609048, -0.9529077321693054, -0.5315523196631358, 0.10870638895112972, 0.42614753773554104, -0.5132067796495801, -0.7783139852849339, -0.40083428594373793, -0.1584178335543962, 0.8061363159085904, -0.37190955210654764, -0.012657262107930833, -0.744497963836305, -0.7879182961312632, -0.44419969278075633, -0.4835766437626243, -0.7768226751207661, -0.9998650637536273, -0.04959236486030805, -0.5872331058762621, -0.9918494784971743, 0.33792261219047015, 0.1353776803317599, 0.04247818059738617, 0.5410263826130917, -0.5154668706444985, -0.8674124431676213, 0.49795140135431404, 0.012065724619831686, 0.427153767922289, 0.05978175878485681, -0.7116219795707943, -0.2785476070060775, -0.18865575521022393, -0.3122655435673012, -0.510768625656979, 0.786136580590018, 0.7878681285404956]]
        #mu = [[20.465790801841887, 85.97112015539298, 64.66375930046381, 53.06651700670202, 96.4740417007674, 52.477978954509496, 69.5127986880515, 20.009835957044775, 46.5727056331684, 10.149342197345678, 52.837275324060975, 43.23687914468161, 91.40425054041128, 85.46215331689207, 75.02342428407407, 25.907572724350214, 36.04309860660514, 59.56840072372647, 77.47979570306373, 85.95114401341507, 34.294357215792836, 14.116483836341565, 92.6674986119074, 8.909787958473059, 56.740147203378896, 58.86349916840079, 54.520118422740495, 91.63125325147232, 14.740540954112024, 99.07451304720013, 0.6880818987915926, 9.057772120972473, 36.371998576190414, 14.712911888509794, 59.813694988505084, 81.21550227174126, 94.73390657546507, 96.40575047726414, 1.129237151167739, 88.17779858878357, 69.32181074132693, 21.223086018513115, 26.490125694941025, 88.47211894173556, 59.41635208585756, 69.0020346149548, 80.36733051159192, 65.52100595577845, 22.22848655516224, 33.39220097181838, 96.61057491681072, 46.166540737291506, 40.688789640006476, 90.88165394224814, 47.10632515854979, 47.68969003330703, 58.474126821966735, 75.248403910991, 97.87480781044444, 51.884486370544145, 98.32600145935437, 7.612382287121933, 12.285755325772197, 86.5179797315244, 64.77484285678992, 69.94119812088343, 92.6061923081313, 6.132119874072972, 61.51873271590485, 8.906177215234756, 13.161954741685955, 59.70832971041816, 54.02411721843102, 51.85818783547147, 29.36395837329726, 35.911557641579705, 78.91077231598153, 6.5881082526427654, 60.7547985658336, 4.8563232442973, 88.70493740986096, 10.152946168979792, 26.48573160352291, 11.478248456252405, 39.570374883997985, 84.17636860766828, 1.7180787874926384, 47.04277699975521, 64.04357401006718, 28.965264157763183, 94.07695500433879, 7.507347564527789, 90.34167716639357, 16.106297535451418, 21.256729549267195, 6.771800635061387, 56.651018042021164, 43.679394300619336, 26.040347487166983, 27.940664691321327]]
        #
        system_state = np.zeros(SPECIES_K+ENV_VARS)

        Eg = ENV_START[0]
        #Eg = random.uniform(0, RANGE_R)
        SURVIVAL_THRESHOLD=0.2
        for s_i in range(SPECIES_K):
            a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * 5 ** 2 ))
            if a_star < SURVIVAL_THRESHOLD:
                a_star = 0
            system_state[s_i] = a_star

        for _ in range(ENV_VARS):
            system_state[SPECIES_K+_] = ENV_START[_]

        ENV_VAR_ALIVE_ZERO_START = ENV_START[0]
        ENV_VAR_ALIVE_ONE_START = ENV_START[0]


        results = [[] for _ in range(SPECIES_K+ENV_VARS)]
        times_steps=[]

        for step in np.arange(TIME_START, TIME_END, TIME_STEP):
            times_steps.append(step)
            for _ in range(SPECIES_K+ENV_VARS):
                results[_].append(system_state[_])
            k1 = TIME_STEP * rates_of_change_system_state(system_state)
            k2 = TIME_STEP * rates_of_change_system_state(system_state + k1 * 0.5)
            k3 = TIME_STEP * rates_of_change_system_state(system_state + k2 * 0.5)
            k4 = TIME_STEP * rates_of_change_system_state(system_state + k3)
            system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
        ENV_VAR_ALIVE_ZERO_END = system_state[SPECIES_K+0]
        results_nt = results

        #================
        #plot_gaussian_trunk() - not needed
        plot_inverse_case()
        plot_temps()
        ALIVE_THRESHOLD=0.2
        plot_alphas_truncated()

        results = [[] for _ in range(SPECIES_K+ENV_VARS)]
        times_steps=[]
        system_state = np.zeros(SPECIES_K+ENV_VARS)
        Eg = ENV_START[0]

        for s_i in range(SPECIES_K):
            a_star = np.exp(- abs(Eg-mu[0][s_i]) ** 2 / ( 2 * NICHE ** 2 ))
            if a_star < ALIVE_THRESHOLD:
                a_star = 0
            system_state[s_i] = a_star

        for _ in range(ENV_VARS):
            system_state[SPECIES_K+_] = ENV_START[_]

        for step in np.arange(TIME_START, TIME_END, TIME_STEP):
            times_steps.append(step)
            for _ in range(SPECIES_K+ENV_VARS):
                results[_].append(system_state[_])
            k1 = TIME_STEP * rates_of_change_system_state_new_niche(system_state)
            k2 = TIME_STEP * rates_of_change_system_state_new_niche(system_state + k1 * 0.5)
            k3 = TIME_STEP * rates_of_change_system_state_new_niche(system_state + k2 * 0.5)
            k4 = TIME_STEP * rates_of_change_system_state_new_niche(system_state + k3)
            system_state += ((k1 + (2*k2) + (2*k3) + k4)/6)
        ENV_VAR_ALIVE_ONE_END = system_state[SPECIES_K+0]

        #print(results_nt[-1][-1])
        #print(results[-1][-1])

        #if((results_nt[-1][-1] > 110 or results_nt[-1][-1] < -5) and (results[-1][-1] > 110 or results[-1][-1] < -5)):
        if(1):
            #or
           # ((results_nt[-1][-1] < 100 and results_nt[-1][-1] > 0) and (results[-1][-1] > 100 or results[-1][-1] < 0))):

        #print(omega)
        #print(mu)

        # GHOST NUMBERS

        #if((results[-1][-1] > 106 or results[-1][-1] < -6)):

            #print(omega)
            #print(mu)
            #print(Eg)

            #for line in results:
            #    print(line[-2])

            print("=================================================")

            fig = plt.figure(dpi=300, figsize=(20,10))
            #fig.suptitle('Species Aliveness ' + str(sim))
            fig.suptitle('A simulation run with 100 biotic components', fontsize=20)

            gs = fig.add_gridspec(2,2)
            ax1 = fig.add_subplot(gs[0, 0])
            ax2 = fig.add_subplot(gs[0, 1])
            ax3 = fig.add_subplot(gs[1, :])

            myList = results_nt[:-1]
            for item in myList:
                ax1.plot(times_steps,item)
            ax1.set_title('ST Model', fontsize=15)
            ax1.set_xlabel('Time Steps', fontsize=12)
            ax1.set_ylabel('Abundance', fontsize=12)
            #ax1.set_ylim([0, 1])
            myList = results[:-1]
            for item in myList:
                ax2.plot(times_steps,item)
            ax2.set_title('NW Model', fontsize=15)
            ax2.set_xlabel('Time Steps', fontsize=12)
            ax2.set_ylabel('Abundance', fontsize=12)
            #ax2.set_ylim([0, 1])
            ax3.set_title('System Temperature',fontsize=15)
            ax3.set_xlabel('Time Steps', fontsize=12)
            ax3.set_ylabel('Temperature', fontsize=12)
            ax3.plot(times_steps,results_nt[-1], "b", label = "ST Model")
            ax3.plot(times_steps, results[-1],"k", label = "NW Model")
            #ax3.set_ylim([0, 100])
            ax3.legend()
            plt.tight_layout()
            fig.show()
            fig.savefig(str(sim) + '.png')

        #number_alive_global_end = 0
            #number_alive_end = 0

            #for s_i in range(SPECIES_K):

            #    a_star = system_state[s_i]
            #    if a_star >= ALIVE_THRESHOLD:
            #        number_alive_global_end +=1

            #number_alive_end = number_alive_global_end

